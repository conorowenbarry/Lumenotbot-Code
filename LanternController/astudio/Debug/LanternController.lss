
LanternController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00003a72  00003b06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000634  00800200  00800200  00003b06  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00003b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00004258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000598  00000000  00000000  00004340  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004d4f  00000000  00000000  000048d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001421  00000000  00000000  00009627  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004865  00000000  00000000  0000aa48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fc4  00000000  00000000  0000f2b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b8a  00000000  00000000  00010274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f24  00000000  00000000  00011dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 00120c8e  00000000  00000000  00013d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000400  00000000  00000000  001349b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
       4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
       8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
       c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      34:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__vector_13>
      38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      54:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      58:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      60:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      64:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      68:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      6c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      70:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      74:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      78:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      7c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      80:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      84:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      88:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      8c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      90:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      94:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      98:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      9c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      a0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      a4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      a8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_42>
      ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_43>
      b0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      b4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      b8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      bc:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      c0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      c4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      c8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      cc:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      d0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      d4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      d8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      dc:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      e0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      e4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      e8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      ec:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      f0:	0c 94 c1 02 	jmp	0x582	; 0x582 <__vector_60>
      f4:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_61>
      f8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      fc:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_63>
     100:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
     104:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
     108:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
     10c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
     110:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
     114:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
     118:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
     11c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d1 e4       	ldi	r29, 0x41	; 65
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	12 e0       	ldi	r17, 0x02	; 2
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b2 e0       	ldi	r27, 0x02	; 2
     132:	e2 e7       	ldi	r30, 0x72	; 114
     134:	fa e3       	ldi	r31, 0x3A	; 58
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0b bf       	out	0x3b, r16	; 59
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x14>
     13c:	07 90       	elpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	a0 30       	cpi	r26, 0x00	; 0
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0x10>
     146:	1b be       	out	0x3b, r1	; 59

00000148 <__do_clear_bss>:
     148:	18 e0       	ldi	r17, 0x08	; 8
     14a:	a0 e0       	ldi	r26, 0x00	; 0
     14c:	b2 e0       	ldi	r27, 0x02	; 2
     14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
     150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
     152:	a4 33       	cpi	r26, 0x34	; 52
     154:	b1 07       	cpc	r27, r17
     156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>
     158:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <main>
     15c:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <_exit>

00000160 <__bad_interrupt>:
     160:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000164 <InitADC>:
.global GetADC
#define ADCH 0x79	// To get rid of warning

// Initialize the ADC infrastructure
InitADC:
	ldi		r18, (1<<REFS0)+(1<<REFS1)+(1<<ADLAR)	// Initial setting for MUX
     164:	20 ee       	ldi	r18, 0xE0	; 224
	sts		ADMUX, r18
     166:	20 93 7c 00 	sts	0x007C, r18
	ldi		r18,(1<<ADEN)+(1<<ADPS0)	//enable the ADC, prescaler = 2
     16a:	21 e8       	ldi	r18, 0x81	; 129
	sts		ADCSRA, r18
     16c:	20 93 7a 00 	sts	0x007A, r18
	ldi		r18,0x1F
     170:	2f e1       	ldi	r18, 0x1F	; 31
	sts		DIDR0, r18
     172:	20 93 7e 00 	sts	0x007E, r18

00000176 <wait_avdd_ok>:
wait_avdd_ok:						//wait for AVDD to come up
	lds		r18, ADCSRB
     176:	20 91 7b 00 	lds	r18, 0x007B
	sbrs	r18, AVDDOK
     17a:	27 ff       	sbrs	r18, 7
	rjmp	wait_avdd_ok
     17c:	fc cf       	rjmp	.-8      	; 0x176 <wait_avdd_ok>
// set start-up time to 16us (max possible with 8MHz ADC clock)
	ldi		r18, 0x1F
     17e:	2f e1       	ldi	r18, 0x1F	; 31
	sts		ADCSRC, r18
     180:	20 93 77 00 	sts	0x0077, r18
	ret
     184:	08 95       	ret

00000186 <GetADC>:

// Read one of the ADC channels and return an 8-bit value
// Channel is provided as a parameter
GetADC:
	ldi		r18, 0
     186:	20 e0       	ldi	r18, 0x00	; 0
	sts		ADCSRB, r18				// set MUX5 before MUX4:1
     188:	20 93 7b 00 	sts	0x007B, r18
// 1.6V reference voltage
	ldi		r18, (1<<REFS0)+(1<<REFS1)+(1<<ADLAR)
     18c:	20 ee       	ldi	r18, 0xE0	; 224
	andi	r24, 0x07
     18e:	87 70       	andi	r24, 0x07	; 7
	or		r18, r24
     190:	28 2b       	or	r18, r24
	sts		ADMUX, r18
     192:	20 93 7c 00 	sts	0x007C, r18

00000196 <wait_vref_ok>:
wait_vref_ok:
	lds		r18, ADCSRB				// wait for reference voltage
     196:	20 91 7b 00 	lds	r18, 0x007B
	sbrs	r18, REFOK
     19a:	25 ff       	sbrs	r18, 5
	rjmp	wait_vref_ok
     19c:	fc cf       	rjmp	.-8      	; 0x196 <wait_vref_ok>
	ldi		r18, (1<<ADEN)+(1<<ADSC)+(1<<ADPS0)
     19e:	21 ec       	ldi	r18, 0xC1	; 193
// Start conversion
	sts		ADCSRA, r18
     1a0:	20 93 7a 00 	sts	0x007A, r18

000001a4 <wait_adsc>:
wait_adsc:
	lds		r18, ADCSRA
     1a4:	20 91 7a 00 	lds	r18, 0x007A
	sbrc	r18, ADSC				// flag cleared at conversion complete
     1a8:	26 fd       	sbrc	r18, 6
	rjmp	wait_adsc
     1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <wait_adsc>
	lds		r24, ADCH				// return result
     1ac:	80 91 79 00 	lds	r24, 0x0079
	ldi		r25, 0
     1b0:	90 e0       	ldi	r25, 0x00	; 0
	ret
     1b2:	08 95       	ret

000001b4 <HAL_Init>:
#include "halTimer.h"

/*****************************************************************************
*****************************************************************************/
void HAL_Init(void)
{
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
  MCUSR = 0;
     1bc:	84 e5       	ldi	r24, 0x54	; 84
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	fc 01       	movw	r30, r24
     1c2:	10 82       	st	Z, r1
  wdt_disable();
     1c4:	88 e1       	ldi	r24, 0x18	; 24
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	80 93 60 00 	sts	0x0060, r24
     1ce:	10 92 60 00 	sts	0x0060, r1
     1d2:	0f be       	out	0x3f, r0	; 63
  SYS_EnableInterrupts();
     1d4:	78 94       	sei

  HAL_TimerInit();
     1d6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <HAL_TimerInit>

}
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	08 95       	ret

000001e0 <HAL_TimerInit>:
static volatile uint8_t halTimerDelayInt;

/*****************************************************************************
*****************************************************************************/
void HAL_TimerInit(void)
{
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
  halTimerIrqCount = 0;
     1e8:	10 92 15 08 	sts	0x0815, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
     1ec:	88 ea       	ldi	r24, 0xA8	; 168
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	20 e2       	ldi	r18, 0x20	; 32
     1f2:	3e e4       	ldi	r19, 0x4E	; 78
     1f4:	fc 01       	movw	r30, r24
     1f6:	31 83       	std	Z+1, r19	; 0x01
     1f8:	20 83       	st	Z, r18
  TCCR4B = (1 << WGM12);              // CTC mode
     1fa:	81 ea       	ldi	r24, 0xA1	; 161
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	28 e0       	ldi	r18, 0x08	; 8
     200:	fc 01       	movw	r30, r24
     202:	20 83       	st	Z, r18
  TCCR4B |= (1 << CS11);              // Prescaler 8
     204:	81 ea       	ldi	r24, 0xA1	; 161
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	21 ea       	ldi	r18, 0xA1	; 161
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	f9 01       	movw	r30, r18
     20e:	20 81       	ld	r18, Z
     210:	22 60       	ori	r18, 0x02	; 2
     212:	fc 01       	movw	r30, r24
     214:	20 83       	st	Z, r18
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
     216:	82 e7       	ldi	r24, 0x72	; 114
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	22 e7       	ldi	r18, 0x72	; 114
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	f9 01       	movw	r30, r18
     220:	20 81       	ld	r18, Z
     222:	22 60       	ori	r18, 0x02	; 2
     224:	fc 01       	movw	r30, r24
     226:	20 83       	st	Z, r18
}
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <__vector_42>:
}

/*****************************************************************************
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     22e:	1f 92       	push	r1
     230:	0f 92       	push	r0
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	0f 92       	push	r0
     236:	11 24       	eor	r1, r1
     238:	8f 93       	push	r24
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
  halTimerIrqCount++;
     242:	80 91 15 08 	lds	r24, 0x0815
     246:	8f 5f       	subi	r24, 0xFF	; 255
     248:	80 93 15 08 	sts	0x0815, r24
}
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	8f 91       	pop	r24
     252:	0f 90       	pop	r0
     254:	0f be       	out	0x3f, r0	; 63
     256:	0f 90       	pop	r0
     258:	1f 90       	pop	r1
     25a:	18 95       	reti

0000025c <__vector_43>:

/*****************************************************************************
*****************************************************************************/
ISR(TIMER4_COMPB_vect)
{
     25c:	1f 92       	push	r1
     25e:	0f 92       	push	r0
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	0f 92       	push	r0
     264:	11 24       	eor	r1, r1
     266:	8f 93       	push	r24
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
  halTimerDelayInt = 1;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	80 93 00 02 	sts	0x0200, r24
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	8f 91       	pop	r24
     27c:	0f 90       	pop	r0
     27e:	0f be       	out	0x3f, r0	; 63
     280:	0f 90       	pop	r0
     282:	1f 90       	pop	r1
     284:	18 95       	reti

00000286 <PHY_Init>:
static uint8_t              phyRxBuffer[128];

/*****************************************************************************
*****************************************************************************/
void PHY_Init(void)
{
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
  TRXPR_REG_s.trxrst = 1;
     28e:	89 e3       	ldi	r24, 0x39	; 57
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	fc 01       	movw	r30, r24
     294:	20 81       	ld	r18, Z
     296:	21 60       	ori	r18, 0x01	; 1
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18

  phyTrxSetState(TRX_CMD_TRX_OFF);
     29c:	88 e0       	ldi	r24, 0x08	; 8
     29e:	0e 94 0b 04 	call	0x816	; 0x816 <phyTrxSetState>

  CSMA_SEED_1_REG_s.aackSetPd = 1;
     2a2:	8e e6       	ldi	r24, 0x6E	; 110
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	fc 01       	movw	r30, r24
     2a8:	20 81       	ld	r18, Z
     2aa:	20 62       	ori	r18, 0x20	; 32
     2ac:	fc 01       	movw	r30, r24
     2ae:	20 83       	st	Z, r18
  CSMA_SEED_1_REG_s.aackDisAck = 0;
     2b0:	8e e6       	ldi	r24, 0x6E	; 110
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	fc 01       	movw	r30, r24
     2b6:	20 81       	ld	r18, Z
     2b8:	2f 7e       	andi	r18, 0xEF	; 239
     2ba:	fc 01       	movw	r30, r24
     2bc:	20 83       	st	Z, r18

  IRQ_STATUS_REG = IRQ_STATUS_CLEAR_VALUE;
     2be:	8f e4       	ldi	r24, 0x4F	; 79
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	2f ef       	ldi	r18, 0xFF	; 255
     2c4:	fc 01       	movw	r30, r24
     2c6:	20 83       	st	Z, r18
  IRQ_MASK_REG_s.rxEndEn = 1;
     2c8:	8e e4       	ldi	r24, 0x4E	; 78
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 81       	ld	r18, Z
     2d0:	28 60       	ori	r18, 0x08	; 8
     2d2:	fc 01       	movw	r30, r24
     2d4:	20 83       	st	Z, r18
  IRQ_MASK_REG_s.txEndEn = 1;
     2d6:	8e e4       	ldi	r24, 0x4E	; 78
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	fc 01       	movw	r30, r24
     2dc:	20 81       	ld	r18, Z
     2de:	20 64       	ori	r18, 0x40	; 64
     2e0:	fc 01       	movw	r30, r24
     2e2:	20 83       	st	Z, r18

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
     2e4:	8c e4       	ldi	r24, 0x4C	; 76
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	fc 01       	movw	r30, r24
     2ea:	20 81       	ld	r18, Z
     2ec:	20 68       	ori	r18, 0x80	; 128
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 83       	st	Z, r18

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = (uint8_t)phyGetRandomNumber();
#else
  CSMA_SEED_0_REG = 0x11;
     2f2:	8d e6       	ldi	r24, 0x6D	; 109
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	21 e1       	ldi	r18, 0x11	; 17
     2f8:	fc 01       	movw	r30, r24
     2fa:	20 83       	st	Z, r18
#endif

  phyIb.request = PHY_REQ_NONE;
     2fc:	10 92 01 02 	sts	0x0201, r1
  phyIb.rx = false;
     300:	10 92 07 02 	sts	0x0207, r1
  phyState = PHY_STATE_IDLE;
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	80 93 0c 02 	sts	0x020C, r24
}
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	08 95       	ret

00000310 <PHY_SetRxState>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	0f 92       	push	r0
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	89 83       	std	Y+1, r24	; 0x01
  phyIb.request |= PHY_REQ_RX;
     31c:	80 91 01 02 	lds	r24, 0x0201
     320:	88 60       	ori	r24, 0x08	; 8
     322:	80 93 01 02 	sts	0x0201, r24
  phyIb.rx = rx;
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	80 93 07 02 	sts	0x0207, r24
}
     32c:	0f 90       	pop	r0
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	08 95       	ret

00000334 <PHY_SetChannel>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	0f 92       	push	r0
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	89 83       	std	Y+1, r24	; 0x01
  phyIb.request |= PHY_REQ_CHANNEL;
     340:	80 91 01 02 	lds	r24, 0x0201
     344:	81 60       	ori	r24, 0x01	; 1
     346:	80 93 01 02 	sts	0x0201, r24
  phyIb.channel = channel;
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	80 93 02 02 	sts	0x0202, r24
}
     350:	0f 90       	pop	r0
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <PHY_SetPanId>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	00 d0       	rcall	.+0      	; 0x35e <PHY_SetPanId+0x6>
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	9a 83       	std	Y+2, r25	; 0x02
     364:	89 83       	std	Y+1, r24	; 0x01
  phyIb.request |= PHY_REQ_PANID;
     366:	80 91 01 02 	lds	r24, 0x0201
     36a:	82 60       	ori	r24, 0x02	; 2
     36c:	80 93 01 02 	sts	0x0201, r24
  phyIb.panId = panId;
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	9a 81       	ldd	r25, Y+2	; 0x02
     374:	90 93 04 02 	sts	0x0204, r25
     378:	80 93 03 02 	sts	0x0203, r24
}
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <PHY_SetShortAddr>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	00 d0       	rcall	.+0      	; 0x38c <PHY_SetShortAddr+0x6>
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	9a 83       	std	Y+2, r25	; 0x02
     392:	89 83       	std	Y+1, r24	; 0x01
  phyIb.request |= PHY_REQ_ADDR;
     394:	80 91 01 02 	lds	r24, 0x0201
     398:	84 60       	ori	r24, 0x04	; 4
     39a:	80 93 01 02 	sts	0x0201, r24
  phyIb.addr = addr;
     39e:	89 81       	ldd	r24, Y+1	; 0x01
     3a0:	9a 81       	ldd	r25, Y+2	; 0x02
     3a2:	90 93 06 02 	sts	0x0206, r25
     3a6:	80 93 05 02 	sts	0x0205, r24
}
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <PHY_Busy>:

/*****************************************************************************
*****************************************************************************/
bool PHY_Busy(void)
{
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
  return PHY_STATE_IDLE != phyState || PHY_REQ_NONE != phyIb.request;
     3bc:	80 91 0c 02 	lds	r24, 0x020C
     3c0:	81 30       	cpi	r24, 0x01	; 1
     3c2:	21 f4       	brne	.+8      	; 0x3cc <PHY_Busy+0x18>
     3c4:	80 91 01 02 	lds	r24, 0x0201
     3c8:	88 23       	and	r24, r24
     3ca:	19 f0       	breq	.+6      	; 0x3d2 <PHY_Busy+0x1e>
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <PHY_Busy+0x22>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	08 95       	ret

000003dc <PHY_DataReq>:

/*****************************************************************************
	Starts the transmission of a frame
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <PHY_DataReq+0x6>
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <PHY_DataReq+0x8>
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
     3e8:	9b 83       	std	Y+3, r25	; 0x03
     3ea:	8a 83       	std	Y+2, r24	; 0x02
     3ec:	6c 83       	std	Y+4, r22	; 0x04
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
     3ee:	89 e1       	ldi	r24, 0x19	; 25
     3f0:	0e 94 0b 04 	call	0x816	; 0x816 <phyTrxSetState>

  TRX_FRAME_BUFFER(0) = size + 2/*crc*/;
     3f4:	80 e8       	ldi	r24, 0x80	; 128
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	2c 81       	ldd	r18, Y+4	; 0x04
     3fa:	2e 5f       	subi	r18, 0xFE	; 254
     3fc:	fc 01       	movw	r30, r24
     3fe:	20 83       	st	Z, r18
  for (uint8_t i = 0; i < size; i++)
     400:	19 82       	std	Y+1, r1	; 0x01
     402:	13 c0       	rjmp	.+38     	; 0x42a <PHY_DataReq+0x4e>
    TRX_FRAME_BUFFER(i+1) = data[i];
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	88 2f       	mov	r24, r24
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	8f 57       	subi	r24, 0x7F	; 127
     40c:	9e 4f       	sbci	r25, 0xFE	; 254
     40e:	29 81       	ldd	r18, Y+1	; 0x01
     410:	22 2f       	mov	r18, r18
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	4a 81       	ldd	r20, Y+2	; 0x02
     416:	5b 81       	ldd	r21, Y+3	; 0x03
     418:	24 0f       	add	r18, r20
     41a:	35 1f       	adc	r19, r21
     41c:	f9 01       	movw	r30, r18
     41e:	20 81       	ld	r18, Z
     420:	fc 01       	movw	r30, r24
     422:	20 83       	st	Z, r18
void PHY_DataReq(uint8_t *data, uint8_t size)
{
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  TRX_FRAME_BUFFER(0) = size + 2/*crc*/;
  for (uint8_t i = 0; i < size; i++)
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	8f 5f       	subi	r24, 0xFF	; 255
     428:	89 83       	std	Y+1, r24	; 0x01
     42a:	99 81       	ldd	r25, Y+1	; 0x01
     42c:	8c 81       	ldd	r24, Y+4	; 0x04
     42e:	98 17       	cp	r25, r24
     430:	48 f3       	brcs	.-46     	; 0x404 <PHY_DataReq+0x28>
    TRX_FRAME_BUFFER(i+1) = data[i];

  TRX_STATE_REG = TRX_CMD_TX_START;			// Start the TX_ARET transaction
     432:	82 e4       	ldi	r24, 0x42	; 66
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	22 e0       	ldi	r18, 0x02	; 2
     438:	fc 01       	movw	r30, r24
     43a:	20 83       	st	Z, r18

  phyState = PHY_STATE_TX_WAIT_END;
     43c:	83 e0       	ldi	r24, 0x03	; 3
     43e:	80 93 0c 02 	sts	0x020C, r24
}
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <PHY_EncryptReq>:

#ifdef PHY_ENABLE_AES_MODULE
/*****************************************************************************
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	00 d0       	rcall	.+0      	; 0x456 <PHY_EncryptReq+0x6>
     456:	00 d0       	rcall	.+0      	; 0x458 <PHY_EncryptReq+0x8>
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
     45c:	9a 83       	std	Y+2, r25	; 0x02
     45e:	89 83       	std	Y+1, r24	; 0x01
     460:	7c 83       	std	Y+4, r23	; 0x04
     462:	6b 83       	std	Y+3, r22	; 0x03
  phyIb.request |= PHY_REQ_ENCRYPT;
     464:	80 91 01 02 	lds	r24, 0x0201
     468:	80 62       	ori	r24, 0x20	; 32
     46a:	80 93 01 02 	sts	0x0201, r24
  phyIb.text = text;
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	9a 81       	ldd	r25, Y+2	; 0x02
     472:	90 93 09 02 	sts	0x0209, r25
     476:	80 93 08 02 	sts	0x0208, r24
  phyIb.key = key;
     47a:	8b 81       	ldd	r24, Y+3	; 0x03
     47c:	9c 81       	ldd	r25, Y+4	; 0x04
     47e:	90 93 0b 02 	sts	0x020B, r25
     482:	80 93 0a 02 	sts	0x020A, r24
}
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <PHY_EdReq>:

#ifdef PHY_ENABLE_ENERGY_DETECTION
/*****************************************************************************
*****************************************************************************/
void PHY_EdReq(void)
{
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
  phyIb.request |= PHY_REQ_ED;
     49c:	80 91 01 02 	lds	r24, 0x0201
     4a0:	80 64       	ori	r24, 0x40	; 64
     4a2:	80 93 01 02 	sts	0x0201, r24
}
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <__vector_63>:
#endif

/*****************************************************************************
*****************************************************************************/
ISR(TRX24_TX_END_vect)
{
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	00 90 5b 00 	lds	r0, 0x005B
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	2f 93       	push	r18
     4be:	3f 93       	push	r19
     4c0:	4f 93       	push	r20
     4c2:	5f 93       	push	r21
     4c4:	6f 93       	push	r22
     4c6:	7f 93       	push	r23
     4c8:	8f 93       	push	r24
     4ca:	9f 93       	push	r25
     4cc:	af 93       	push	r26
     4ce:	bf 93       	push	r27
     4d0:	ef 93       	push	r30
     4d2:	ff 93       	push	r31
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
  if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
     4dc:	81 e4       	ldi	r24, 0x41	; 65
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	fc 01       	movw	r30, r24
     4e2:	80 81       	ld	r24, Z
     4e4:	8f 71       	andi	r24, 0x1F	; 31
     4e6:	89 31       	cpi	r24, 0x19	; 25
     4e8:	79 f4       	brne	.+30     	; 0x508 <__vector_63+0x5c>
  {
    //TRX_STATE_REG = TRX_CMD_PLL_ON; // Don't wait for this to complete
    phyTrxSetState(TRX_CMD_PLL_ON);
     4ea:	89 e0       	ldi	r24, 0x09	; 9
     4ec:	0e 94 0b 04 	call	0x816	; 0x816 <phyTrxSetState>

    phyState = PHY_STATE_TX_CONFIRM;
     4f0:	84 e0       	ldi	r24, 0x04	; 4
     4f2:	80 93 0c 02 	sts	0x020C, r24
    phyTxStatus = TRX_STATE_REG_s.tracStatus;
     4f6:	82 e4       	ldi	r24, 0x42	; 66
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	fc 01       	movw	r30, r24
     4fc:	80 81       	ld	r24, Z
     4fe:	82 95       	swap	r24
     500:	86 95       	lsr	r24
     502:	87 70       	andi	r24, 0x07	; 7
     504:	80 93 0d 02 	sts	0x020D, r24
  }
  else
  {
    // Auto ACK transmission completed
  }
}
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	ff 91       	pop	r31
     50e:	ef 91       	pop	r30
     510:	bf 91       	pop	r27
     512:	af 91       	pop	r26
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	7f 91       	pop	r23
     51a:	6f 91       	pop	r22
     51c:	5f 91       	pop	r21
     51e:	4f 91       	pop	r20
     520:	3f 91       	pop	r19
     522:	2f 91       	pop	r18
     524:	0f 90       	pop	r0
     526:	00 92 5b 00 	sts	0x005B, r0
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti

00000534 <__vector_61>:
#ifdef PHY_ENABLE_ENERGY_DETECTION		// Add this feature if it is needed
/*****************************************************************************
	Interrupt service routine for energy detection requests
*****************************************************************************/
ISR(TRX24_CCA_ED_DONE_vect)
{
     534:	1f 92       	push	r1
     536:	0f 92       	push	r0
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	0f 92       	push	r0
     53c:	00 90 5b 00 	lds	r0, 0x005B
     540:	0f 92       	push	r0
     542:	11 24       	eor	r1, r1
     544:	8f 93       	push	r24
     546:	9f 93       	push	r25
     548:	ef 93       	push	r30
     54a:	ff 93       	push	r31
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
  phyRxRssi = (int8_t)PHY_ED_LEVEL_REG;
     554:	87 e4       	ldi	r24, 0x47	; 71
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	fc 01       	movw	r30, r24
     55a:	80 81       	ld	r24, Z
     55c:	80 93 0e 02 	sts	0x020E, r24
  phyState = PHY_STATE_ED_DONE;
     560:	87 e0       	ldi	r24, 0x07	; 7
     562:	80 93 0c 02 	sts	0x020C, r24
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	ff 91       	pop	r31
     56c:	ef 91       	pop	r30
     56e:	9f 91       	pop	r25
     570:	8f 91       	pop	r24
     572:	0f 90       	pop	r0
     574:	00 92 5b 00 	sts	0x005B, r0
     578:	0f 90       	pop	r0
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	0f 90       	pop	r0
     57e:	1f 90       	pop	r1
     580:	18 95       	reti

00000582 <__vector_60>:

/*****************************************************************************
	Interrupt service routine for receipt of a frame at the radio
*****************************************************************************/
ISR(TRX24_RX_END_vect)
{
     582:	1f 92       	push	r1
     584:	0f 92       	push	r0
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	0f 92       	push	r0
     58a:	00 90 5b 00 	lds	r0, 0x005B
     58e:	0f 92       	push	r0
     590:	11 24       	eor	r1, r1
     592:	2f 93       	push	r18
     594:	8f 93       	push	r24
     596:	9f 93       	push	r25
     598:	ef 93       	push	r30
     59a:	ff 93       	push	r31
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
  TRX_STATE_REG = TRX_CMD_PLL_ON;			// Don't wait for this to complete
     5a4:	82 e4       	ldi	r24, 0x42	; 66
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	29 e0       	ldi	r18, 0x09	; 9
     5aa:	fc 01       	movw	r30, r24
     5ac:	20 83       	st	Z, r18
  phyRxRssi = (int8_t)PHY_ED_LEVEL_REG;		// 0-83dB, 0xFF means no measurement started
     5ae:	87 e4       	ldi	r24, 0x47	; 71
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	fc 01       	movw	r30, r24
     5b4:	80 81       	ld	r24, Z
     5b6:	80 93 0e 02 	sts	0x020E, r24
  phyRxSize = TST_RX_LENGTH_REG;
     5ba:	8b e7       	ldi	r24, 0x7B	; 123
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	fc 01       	movw	r30, r24
     5c0:	80 81       	ld	r24, Z
     5c2:	80 93 0f 02 	sts	0x020F, r24
  phyState = PHY_STATE_RX_IND;
     5c6:	85 e0       	ldi	r24, 0x05	; 5
     5c8:	80 93 0c 02 	sts	0x020C, r24
}
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	ff 91       	pop	r31
     5d2:	ef 91       	pop	r30
     5d4:	9f 91       	pop	r25
     5d6:	8f 91       	pop	r24
     5d8:	2f 91       	pop	r18
     5da:	0f 90       	pop	r0
     5dc:	00 92 5b 00 	sts	0x005B, r0
     5e0:	0f 90       	pop	r0
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	0f 90       	pop	r0
     5e6:	1f 90       	pop	r1
     5e8:	18 95       	reti

000005ea <phyEncryptBlock>:

#ifdef PHY_ENABLE_AES_MODULE
/*****************************************************************************
*****************************************************************************/
static void phyEncryptBlock(void)
{
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	00 d0       	rcall	.+0      	; 0x5f0 <phyEncryptBlock+0x6>
     5f0:	0f 92       	push	r0
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
     5f6:	19 82       	std	Y+1, r1	; 0x01
     5f8:	12 c0       	rjmp	.+36     	; 0x61e <phyEncryptBlock+0x34>
    AES_KEY = phyIb.key[i];
     5fa:	8f e3       	ldi	r24, 0x3F	; 63
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	40 91 0a 02 	lds	r20, 0x020A
     602:	50 91 0b 02 	lds	r21, 0x020B
     606:	29 81       	ldd	r18, Y+1	; 0x01
     608:	22 2f       	mov	r18, r18
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	24 0f       	add	r18, r20
     60e:	35 1f       	adc	r19, r21
     610:	f9 01       	movw	r30, r18
     612:	20 81       	ld	r18, Z
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
#ifdef PHY_ENABLE_AES_MODULE
/*****************************************************************************
*****************************************************************************/
static void phyEncryptBlock(void)
{
  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	8f 5f       	subi	r24, 0xFF	; 255
     61c:	89 83       	std	Y+1, r24	; 0x01
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	80 31       	cpi	r24, 0x10	; 16
     622:	58 f3       	brcs	.-42     	; 0x5fa <phyEncryptBlock+0x10>
    AES_KEY = phyIb.key[i];

  AES_CTRL = (0 << AES_CTRL_DIR) | (0 << AES_CTRL_MODE);
     624:	8c e3       	ldi	r24, 0x3C	; 60
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	fc 01       	movw	r30, r24
     62a:	10 82       	st	Z, r1

  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
     62c:	1a 82       	std	Y+2, r1	; 0x02
     62e:	12 c0       	rjmp	.+36     	; 0x654 <phyEncryptBlock+0x6a>
    AES_STATE = phyIb.text[i];
     630:	8e e3       	ldi	r24, 0x3E	; 62
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	40 91 08 02 	lds	r20, 0x0208
     638:	50 91 09 02 	lds	r21, 0x0209
     63c:	2a 81       	ldd	r18, Y+2	; 0x02
     63e:	22 2f       	mov	r18, r18
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	24 0f       	add	r18, r20
     644:	35 1f       	adc	r19, r21
     646:	f9 01       	movw	r30, r18
     648:	20 81       	ld	r18, Z
     64a:	fc 01       	movw	r30, r24
     64c:	20 83       	st	Z, r18
  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
    AES_KEY = phyIb.key[i];

  AES_CTRL = (0 << AES_CTRL_DIR) | (0 << AES_CTRL_MODE);

  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
     64e:	8a 81       	ldd	r24, Y+2	; 0x02
     650:	8f 5f       	subi	r24, 0xFF	; 255
     652:	8a 83       	std	Y+2, r24	; 0x02
     654:	8a 81       	ldd	r24, Y+2	; 0x02
     656:	80 31       	cpi	r24, 0x10	; 16
     658:	58 f3       	brcs	.-42     	; 0x630 <phyEncryptBlock+0x46>
    AES_STATE = phyIb.text[i];

  AES_CTRL |= (1 << AES_CTRL_REQUEST);
     65a:	8c e3       	ldi	r24, 0x3C	; 60
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	2c e3       	ldi	r18, 0x3C	; 60
     660:	31 e0       	ldi	r19, 0x01	; 1
     662:	f9 01       	movw	r30, r18
     664:	20 81       	ld	r18, Z
     666:	20 68       	ori	r18, 0x80	; 128
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18

  while (0 == (AES_STATUS & (1 << AES_STATUS_RY)));
     66c:	00 00       	nop
     66e:	8d e3       	ldi	r24, 0x3D	; 61
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	fc 01       	movw	r30, r24
     674:	80 81       	ld	r24, Z
     676:	88 2f       	mov	r24, r24
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	00 97       	sbiw	r24, 0x00	; 0
     680:	b1 f3       	breq	.-20     	; 0x66e <phyEncryptBlock+0x84>

  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
     682:	1b 82       	std	Y+3, r1	; 0x03
     684:	12 c0       	rjmp	.+36     	; 0x6aa <phyEncryptBlock+0xc0>
    phyIb.text[i] = AES_STATE;
     686:	20 91 08 02 	lds	r18, 0x0208
     68a:	30 91 09 02 	lds	r19, 0x0209
     68e:	8b 81       	ldd	r24, Y+3	; 0x03
     690:	88 2f       	mov	r24, r24
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	82 0f       	add	r24, r18
     696:	93 1f       	adc	r25, r19
     698:	2e e3       	ldi	r18, 0x3E	; 62
     69a:	31 e0       	ldi	r19, 0x01	; 1
     69c:	f9 01       	movw	r30, r18
     69e:	20 81       	ld	r18, Z
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18

  AES_CTRL |= (1 << AES_CTRL_REQUEST);

  while (0 == (AES_STATUS & (1 << AES_STATUS_RY)));

  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
     6a4:	8b 81       	ldd	r24, Y+3	; 0x03
     6a6:	8f 5f       	subi	r24, 0xFF	; 255
     6a8:	8b 83       	std	Y+3, r24	; 0x03
     6aa:	8b 81       	ldd	r24, Y+3	; 0x03
     6ac:	80 31       	cpi	r24, 0x10	; 16
     6ae:	58 f3       	brcs	.-42     	; 0x686 <phyEncryptBlock+0x9c>
    phyIb.text[i] = AES_STATE;
}
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <phySetRxState>:
/*****************************************************************************
	Put the radio into the waiting or receive state, depending upon the rx
	flag in the phyIb variable.
*****************************************************************************/
static void phySetRxState(void)
{
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
  if (phyIb.rx)
     6c4:	80 91 07 02 	lds	r24, 0x0207
     6c8:	88 23       	and	r24, r24
     6ca:	21 f0       	breq	.+8      	; 0x6d4 <phySetRxState+0x18>
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
     6cc:	86 e1       	ldi	r24, 0x16	; 22
     6ce:	0e 94 0b 04 	call	0x816	; 0x816 <phyTrxSetState>
     6d2:	03 c0       	rjmp	.+6      	; 0x6da <phySetRxState+0x1e>
  else
    phyTrxSetState(TRX_CMD_TRX_OFF);
     6d4:	88 e0       	ldi	r24, 0x08	; 8
     6d6:	0e 94 0b 04 	call	0x816	; 0x816 <phyTrxSetState>
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <phyHandleSetRequests>:
	Handles the accumulated requests to set various values and service
	requests that have accumulated since the last system tasks update.
	Each request corresponds to a bit in the request variable.
*****************************************************************************/
static void phyHandleSetRequests(void)
{
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <phyHandleSetRequests+0x6>
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <phyHandleSetRequests+0x8>
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
// Put the radio in idle mode
  phyTrxSetState(TRX_CMD_TRX_OFF);
     6ec:	88 e0       	ldi	r24, 0x08	; 8
     6ee:	0e 94 0b 04 	call	0x816	; 0x816 <phyTrxSetState>

  if (phyIb.request & PHY_REQ_CHANNEL)
     6f2:	80 91 01 02 	lds	r24, 0x0201
     6f6:	88 2f       	mov	r24, r24
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	81 70       	andi	r24, 0x01	; 1
     6fc:	90 70       	andi	r25, 0x00	; 0
     6fe:	88 23       	and	r24, r24
     700:	61 f0       	breq	.+24     	; 0x71a <phyHandleSetRequests+0x3a>
  {
    PHY_CC_CCA_REG_s.channel = phyIb.channel;
     702:	88 e4       	ldi	r24, 0x48	; 72
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	20 91 02 02 	lds	r18, 0x0202
     70a:	2f 71       	andi	r18, 0x1F	; 31
     70c:	2f 71       	andi	r18, 0x1F	; 31
     70e:	fc 01       	movw	r30, r24
     710:	30 81       	ld	r19, Z
     712:	30 7e       	andi	r19, 0xE0	; 224
     714:	23 2b       	or	r18, r19
     716:	fc 01       	movw	r30, r24
     718:	20 83       	st	Z, r18
  }

  if (phyIb.request & PHY_REQ_PANID)
     71a:	80 91 01 02 	lds	r24, 0x0201
     71e:	88 2f       	mov	r24, r24
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	82 70       	andi	r24, 0x02	; 2
     724:	90 70       	andi	r25, 0x00	; 0
     726:	00 97       	sbiw	r24, 0x00	; 0
     728:	a1 f0       	breq	.+40     	; 0x752 <phyHandleSetRequests+0x72>
  {
    uint8_t *d = (uint8_t *)&phyIb.panId;
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	9a 83       	std	Y+2, r25	; 0x02
     730:	89 83       	std	Y+1, r24	; 0x01
    PAN_ID_0_REG = d[0];
     732:	82 e6       	ldi	r24, 0x62	; 98
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	29 81       	ldd	r18, Y+1	; 0x01
     738:	3a 81       	ldd	r19, Y+2	; 0x02
     73a:	f9 01       	movw	r30, r18
     73c:	20 81       	ld	r18, Z
     73e:	fc 01       	movw	r30, r24
     740:	20 83       	st	Z, r18
    PAN_ID_1_REG = d[1];
     742:	83 e6       	ldi	r24, 0x63	; 99
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	29 81       	ldd	r18, Y+1	; 0x01
     748:	3a 81       	ldd	r19, Y+2	; 0x02
     74a:	f9 01       	movw	r30, r18
     74c:	21 81       	ldd	r18, Z+1	; 0x01
     74e:	fc 01       	movw	r30, r24
     750:	20 83       	st	Z, r18
  }

  if (phyIb.request & PHY_REQ_ADDR)
     752:	80 91 01 02 	lds	r24, 0x0201
     756:	88 2f       	mov	r24, r24
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	84 70       	andi	r24, 0x04	; 4
     75c:	90 70       	andi	r25, 0x00	; 0
     75e:	00 97       	sbiw	r24, 0x00	; 0
     760:	a1 f0       	breq	.+40     	; 0x78a <phyHandleSetRequests+0xaa>
  {
    uint8_t *d = (uint8_t *)&phyIb.addr;
     762:	85 e0       	ldi	r24, 0x05	; 5
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	9c 83       	std	Y+4, r25	; 0x04
     768:	8b 83       	std	Y+3, r24	; 0x03
    SHORT_ADDR_0_REG = d[0];
     76a:	80 e6       	ldi	r24, 0x60	; 96
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	2b 81       	ldd	r18, Y+3	; 0x03
     770:	3c 81       	ldd	r19, Y+4	; 0x04
     772:	f9 01       	movw	r30, r18
     774:	20 81       	ld	r18, Z
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18
    SHORT_ADDR_1_REG = d[1];
     77a:	81 e6       	ldi	r24, 0x61	; 97
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	2b 81       	ldd	r18, Y+3	; 0x03
     780:	3c 81       	ldd	r19, Y+4	; 0x04
     782:	f9 01       	movw	r30, r18
     784:	21 81       	ldd	r18, Z+1	; 0x01
     786:	fc 01       	movw	r30, r24
     788:	20 83       	st	Z, r18
    PHY_RandomConf(rnd);
  }
#endif

#ifdef PHY_ENABLE_AES_MODULE
  if (phyIb.request & PHY_REQ_ENCRYPT)
     78a:	80 91 01 02 	lds	r24, 0x0201
     78e:	88 2f       	mov	r24, r24
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	80 72       	andi	r24, 0x20	; 32
     794:	90 70       	andi	r25, 0x00	; 0
     796:	00 97       	sbiw	r24, 0x00	; 0
     798:	21 f0       	breq	.+8      	; 0x7a2 <phyHandleSetRequests+0xc2>
  {
    phyEncryptBlock();
     79a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <phyEncryptBlock>
    PHY_EncryptConf();
     79e:	0e 94 76 17 	call	0x2eec	; 0x2eec <PHY_EncryptConf>
  }
#endif

#ifdef PHY_ENABLE_ENERGY_DETECTION	// Add in this feature if energy detection is desired
  if (phyIb.request & PHY_REQ_ED)
     7a2:	80 91 01 02 	lds	r24, 0x0201
     7a6:	88 2f       	mov	r24, r24
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	80 74       	andi	r24, 0x40	; 64
     7ac:	90 70       	andi	r25, 0x00	; 0
     7ae:	00 97       	sbiw	r24, 0x00	; 0
     7b0:	f9 f0       	breq	.+62     	; 0x7f0 <phyHandleSetRequests+0x110>
  {
    IRQ_MASK_REG_s.rxEndEn = 0;
     7b2:	8e e4       	ldi	r24, 0x4E	; 78
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 81       	ld	r18, Z
     7ba:	27 7f       	andi	r18, 0xF7	; 247
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
    IRQ_MASK_REG_s.txEndEn = 0;
     7c0:	8e e4       	ldi	r24, 0x4E	; 78
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	fc 01       	movw	r30, r24
     7c6:	20 81       	ld	r18, Z
     7c8:	2f 7b       	andi	r18, 0xBF	; 191
     7ca:	fc 01       	movw	r30, r24
     7cc:	20 83       	st	Z, r18
    IRQ_MASK_REG_s.ccaEdReadyEn = 1;
     7ce:	8e e4       	ldi	r24, 0x4E	; 78
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 81       	ld	r18, Z
     7d6:	20 61       	ori	r18, 0x10	; 16
     7d8:	fc 01       	movw	r30, r24
     7da:	20 83       	st	Z, r18

    phyTrxSetState(TRX_CMD_RX_ON);
     7dc:	86 e0       	ldi	r24, 0x06	; 6
     7de:	0e 94 0b 04 	call	0x816	; 0x816 <phyTrxSetState>
    PHY_ED_LEVEL_REG = 0;
     7e2:	87 e4       	ldi	r24, 0x47	; 71
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	fc 01       	movw	r30, r24
     7e8:	10 82       	st	Z, r1
    phyState = PHY_STATE_ED_WAIT;
     7ea:	86 e0       	ldi	r24, 0x06	; 6
     7ec:	80 93 0c 02 	sts	0x020C, r24
#endif

// When all requests have been processed, put the radio into idle or receive state
// unless there is an energy detection request in progress.
#ifdef PHY_ENABLE_ENERGY_DETECTION	// Add in this feature if energy detection is desired
  if (!(phyIb.request & PHY_REQ_ED))
     7f0:	80 91 01 02 	lds	r24, 0x0201
     7f4:	88 2f       	mov	r24, r24
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	80 74       	andi	r24, 0x40	; 64
     7fa:	90 70       	andi	r25, 0x00	; 0
     7fc:	00 97       	sbiw	r24, 0x00	; 0
     7fe:	11 f4       	brne	.+4      	; 0x804 <phyHandleSetRequests+0x124>
    phySetRxState();
     800:	0e 94 5e 03 	call	0x6bc	; 0x6bc <phySetRxState>
#else	// No energy detection request in progress
  phySetRxState();
#endif
// Clear the request flags
  phyIb.request = PHY_REQ_NONE;
     804:	10 92 01 02 	sts	0x0201, r1
}
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	08 95       	ret

00000816 <phyTrxSetState>:

/*****************************************************************************
	Sets the radio to the state provided, then waits for the state to take effect
*****************************************************************************/
static inline void phyTrxSetState(uint8_t state)
{
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	0f 92       	push	r0
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	89 83       	std	Y+1, r24	; 0x01
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
     822:	82 e4       	ldi	r24, 0x42	; 66
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	23 e0       	ldi	r18, 0x03	; 3
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
  TRX_STATE_REG = state;
     82c:	82 e4       	ldi	r24, 0x42	; 66
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	29 81       	ldd	r18, Y+1	; 0x01
     832:	fc 01       	movw	r30, r24
     834:	20 83       	st	Z, r18
  while (state != TRX_STATUS_REG_s.trxStatus);
     836:	00 00       	nop
     838:	81 e4       	ldi	r24, 0x41	; 65
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	fc 01       	movw	r30, r24
     83e:	80 81       	ld	r24, Z
     840:	8f 71       	andi	r24, 0x1F	; 31
     842:	98 2f       	mov	r25, r24
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	98 17       	cp	r25, r24
     848:	b9 f7       	brne	.-18     	; 0x838 <phyTrxSetState+0x22>
}
     84a:	0f 90       	pop	r0
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <PHY_TaskHandler>:

/*****************************************************************************
*****************************************************************************/
void PHY_TaskHandler(void)
{
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	00 d0       	rcall	.+0      	; 0x858 <PHY_TaskHandler+0x6>
     858:	00 d0       	rcall	.+0      	; 0x85a <PHY_TaskHandler+0x8>
     85a:	00 d0       	rcall	.+0      	; 0x85c <PHY_TaskHandler+0xa>
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
  switch (phyState)
     860:	80 91 0c 02 	lds	r24, 0x020C
     864:	88 2f       	mov	r24, r24
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	84 30       	cpi	r24, 0x04	; 4
     86a:	91 05       	cpc	r25, r1
     86c:	b9 f0       	breq	.+46     	; 0x89c <PHY_TaskHandler+0x4a>
     86e:	85 30       	cpi	r24, 0x05	; 5
     870:	91 05       	cpc	r25, r1
     872:	24 f4       	brge	.+8      	; 0x87c <PHY_TaskHandler+0x2a>
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	91 05       	cpc	r25, r1
     878:	49 f0       	breq	.+18     	; 0x88c <PHY_TaskHandler+0x3a>
     87a:	8c c0       	rjmp	.+280    	; 0x994 <PHY_TaskHandler+0x142>
     87c:	85 30       	cpi	r24, 0x05	; 5
     87e:	91 05       	cpc	r25, r1
     880:	f9 f0       	breq	.+62     	; 0x8c0 <PHY_TaskHandler+0x6e>
     882:	87 30       	cpi	r24, 0x07	; 7
     884:	91 05       	cpc	r25, r1
     886:	09 f4       	brne	.+2      	; 0x88a <PHY_TaskHandler+0x38>
     888:	60 c0       	rjmp	.+192    	; 0x94a <PHY_TaskHandler+0xf8>
     88a:	84 c0       	rjmp	.+264    	; 0x994 <PHY_TaskHandler+0x142>
  {
//	If in the idle state, can process the accumulated requests
    case PHY_STATE_IDLE:
    {
      if (phyIb.request)
     88c:	80 91 01 02 	lds	r24, 0x0201
     890:	88 23       	and	r24, r24
     892:	09 f4       	brne	.+2      	; 0x896 <PHY_TaskHandler+0x44>
     894:	81 c0       	rjmp	.+258    	; 0x998 <PHY_TaskHandler+0x146>
        phyHandleSetRequests();
     896:	0e 94 70 03 	call	0x6e0	; 0x6e0 <phyHandleSetRequests>
    } break;
     89a:	7e c0       	rjmp	.+252    	; 0x998 <PHY_TaskHandler+0x146>
//	Invoke the callback to notify the application
    case PHY_STATE_TX_CONFIRM:
    {
      PHY_DataConf(phyTxStatus);
     89c:	80 91 0d 02 	lds	r24, 0x020D
     8a0:	0e 94 79 14 	call	0x28f2	; 0x28f2 <PHY_DataConf>

      while (TRX_CMD_PLL_ON != TRX_STATUS_REG_s.trxStatus);
     8a4:	00 00       	nop
     8a6:	81 e4       	ldi	r24, 0x41	; 65
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	fc 01       	movw	r30, r24
     8ac:	80 81       	ld	r24, Z
     8ae:	8f 71       	andi	r24, 0x1F	; 31
     8b0:	89 30       	cpi	r24, 0x09	; 9
     8b2:	c9 f7       	brne	.-14     	; 0x8a6 <PHY_TaskHandler+0x54>
      phyState = PHY_STATE_IDLE;
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	80 93 0c 02 	sts	0x020C, r24
      phySetRxState();
     8ba:	0e 94 5e 03 	call	0x6bc	; 0x6bc <phySetRxState>
    } break;
     8be:	6d c0       	rjmp	.+218    	; 0x99a <PHY_TaskHandler+0x148>
//	Message was received, so transfer the radio buffer data and process it
    case PHY_STATE_RX_IND:
    {
      PHY_DataInd_t ind;

      for (uint8_t i = 0; i < phyRxSize + 1/*lqi*/; i++)
     8c0:	19 82       	std	Y+1, r1	; 0x01
     8c2:	11 c0       	rjmp	.+34     	; 0x8e6 <PHY_TaskHandler+0x94>
        phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	88 2f       	mov	r24, r24
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	29 81       	ldd	r18, Y+1	; 0x01
     8cc:	22 2f       	mov	r18, r18
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	20 58       	subi	r18, 0x80	; 128
     8d2:	3e 4f       	sbci	r19, 0xFE	; 254
     8d4:	f9 01       	movw	r30, r18
     8d6:	20 81       	ld	r18, Z
     8d8:	80 5f       	subi	r24, 0xF0	; 240
     8da:	9d 4f       	sbci	r25, 0xFD	; 253
     8dc:	fc 01       	movw	r30, r24
     8de:	20 83       	st	Z, r18
//	Message was received, so transfer the radio buffer data and process it
    case PHY_STATE_RX_IND:
    {
      PHY_DataInd_t ind;

      for (uint8_t i = 0; i < phyRxSize + 1/*lqi*/; i++)
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	8f 5f       	subi	r24, 0xFF	; 255
     8e4:	89 83       	std	Y+1, r24	; 0x01
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	28 2f       	mov	r18, r24
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	80 91 0f 02 	lds	r24, 0x020F
     8f0:	88 2f       	mov	r24, r24
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	01 96       	adiw	r24, 0x01	; 1
     8f6:	28 17       	cp	r18, r24
     8f8:	39 07       	cpc	r19, r25
     8fa:	24 f3       	brlt	.-56     	; 0x8c4 <PHY_TaskHandler+0x72>
        phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

      ind.data = phyRxBuffer;
     8fc:	80 e1       	ldi	r24, 0x10	; 16
     8fe:	92 e0       	ldi	r25, 0x02	; 2
     900:	9b 83       	std	Y+3, r25	; 0x03
     902:	8a 83       	std	Y+2, r24	; 0x02
      ind.size = phyRxSize - 2/*crc*/;
     904:	80 91 0f 02 	lds	r24, 0x020F
     908:	82 50       	subi	r24, 0x02	; 2
     90a:	8c 83       	std	Y+4, r24	; 0x04
      ind.lqi  = phyRxBuffer[phyRxSize];
     90c:	80 91 0f 02 	lds	r24, 0x020F
     910:	88 2f       	mov	r24, r24
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	80 5f       	subi	r24, 0xF0	; 240
     916:	9d 4f       	sbci	r25, 0xFD	; 253
     918:	fc 01       	movw	r30, r24
     91a:	80 81       	ld	r24, Z
     91c:	8d 83       	std	Y+5, r24	; 0x05
      ind.rssi = phyRxRssi + PHY_RSSI_BASE_VAL;
     91e:	80 91 0e 02 	lds	r24, 0x020E
     922:	8a 55       	subi	r24, 0x5A	; 90
     924:	8e 83       	std	Y+6, r24	; 0x06
      PHY_DataInd(&ind);
     926:	ce 01       	movw	r24, r28
     928:	02 96       	adiw	r24, 0x02	; 2
     92a:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <PHY_DataInd>

      while (TRX_CMD_PLL_ON != TRX_STATUS_REG_s.trxStatus);
     92e:	00 00       	nop
     930:	81 e4       	ldi	r24, 0x41	; 65
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	fc 01       	movw	r30, r24
     936:	80 81       	ld	r24, Z
     938:	8f 71       	andi	r24, 0x1F	; 31
     93a:	89 30       	cpi	r24, 0x09	; 9
     93c:	c9 f7       	brne	.-14     	; 0x930 <PHY_TaskHandler+0xde>
      phyState = PHY_STATE_IDLE;
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	80 93 0c 02 	sts	0x020C, r24
      phySetRxState();
     944:	0e 94 5e 03 	call	0x6bc	; 0x6bc <phySetRxState>
    } break;
     948:	28 c0       	rjmp	.+80     	; 0x99a <PHY_TaskHandler+0x148>

#ifdef PHY_ENABLE_ENERGY_DETECTION		// Add in the energy detection feature if needed
    case PHY_STATE_ED_DONE:
    {
      PHY_EdConf(phyRxRssi + PHY_RSSI_BASE_VAL);		// Note that this is a signed value
     94a:	80 91 0e 02 	lds	r24, 0x020E
     94e:	8a 55       	subi	r24, 0x5A	; 90
     950:	0e 94 90 1b 	call	0x3720	; 0x3720 <PHY_EdConf>

      IRQ_STATUS_REG = IRQ_STATUS_CLEAR_VALUE;
     954:	8f e4       	ldi	r24, 0x4F	; 79
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	2f ef       	ldi	r18, 0xFF	; 255
     95a:	fc 01       	movw	r30, r24
     95c:	20 83       	st	Z, r18
      IRQ_MASK_REG_s.rxEndEn = 1;
     95e:	8e e4       	ldi	r24, 0x4E	; 78
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	fc 01       	movw	r30, r24
     964:	20 81       	ld	r18, Z
     966:	28 60       	ori	r18, 0x08	; 8
     968:	fc 01       	movw	r30, r24
     96a:	20 83       	st	Z, r18
      IRQ_MASK_REG_s.txEndEn = 1;
     96c:	8e e4       	ldi	r24, 0x4E	; 78
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	fc 01       	movw	r30, r24
     972:	20 81       	ld	r18, Z
     974:	20 64       	ori	r18, 0x40	; 64
     976:	fc 01       	movw	r30, r24
     978:	20 83       	st	Z, r18
      IRQ_MASK_REG_s.ccaEdReadyEn = 0;
     97a:	8e e4       	ldi	r24, 0x4E	; 78
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	fc 01       	movw	r30, r24
     980:	20 81       	ld	r18, Z
     982:	2f 7e       	andi	r18, 0xEF	; 239
     984:	fc 01       	movw	r30, r24
     986:	20 83       	st	Z, r18

      phyState = PHY_STATE_IDLE;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	80 93 0c 02 	sts	0x020C, r24
      phySetRxState();
     98e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <phySetRxState>
    } break;
     992:	03 c0       	rjmp	.+6      	; 0x99a <PHY_TaskHandler+0x148>
#endif

    default:
      break;
     994:	00 00       	nop
     996:	01 c0       	rjmp	.+2      	; 0x99a <PHY_TaskHandler+0x148>
//	If in the idle state, can process the accumulated requests
    case PHY_STATE_IDLE:
    {
      if (phyIb.request)
        phyHandleSetRequests();
    } break;
     998:	00 00       	nop
#endif

    default:
      break;
  }
}
     99a:	26 96       	adiw	r28, 0x06	; 6
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <__vector_13>:
}

/*****************************************************************************
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     9ac:	1f 92       	push	r1
     9ae:	0f 92       	push	r0
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	0f 92       	push	r0
     9b4:	11 24       	eor	r1, r1
     9b6:	8f 93       	push	r24
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
  halSleepTimerEvent = true;
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	80 93 90 02 	sts	0x0290, r24
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	8f 91       	pop	r24
     9cc:	0f 90       	pop	r0
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	0f 90       	pop	r0
     9d2:	1f 90       	pop	r1
     9d4:	18 95       	reti

000009d6 <NWK_Init>:
NwkIb_t nwkIb;

/*****************************************************************************
*****************************************************************************/
void NWK_Init(void)
{
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	0f 92       	push	r0
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
  nwkIb.nwkSeqNum = 0;
     9e0:	10 92 1a 08 	sts	0x081A, r1
  nwkIb.macSeqNum = 0;
     9e4:	10 92 1b 08 	sts	0x081B, r1
  nwkIb.addr = 0;
     9e8:	10 92 17 08 	sts	0x0817, r1
     9ec:	10 92 16 08 	sts	0x0816, r1

  for (uint8_t i = 0; i < NWK_MAX_ENDPOINTS_AMOUNT; i++)
     9f0:	19 82       	std	Y+1, r1	; 0x01
     9f2:	0e c0       	rjmp	.+28     	; 0xa10 <NWK_Init+0x3a>
    nwkIb.endpoint[i] = NULL;
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	88 2f       	mov	r24, r24
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	03 96       	adiw	r24, 0x03	; 3
     9fc:	88 0f       	add	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	8a 5e       	subi	r24, 0xEA	; 234
     a02:	97 4f       	sbci	r25, 0xF7	; 247
     a04:	fc 01       	movw	r30, r24
     a06:	11 82       	std	Z+1, r1	; 0x01
     a08:	10 82       	st	Z, r1
{
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;

  for (uint8_t i = 0; i < NWK_MAX_ENDPOINTS_AMOUNT; i++)
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	8f 5f       	subi	r24, 0xFF	; 255
     a0e:	89 83       	std	Y+1, r24	; 0x01
     a10:	89 81       	ldd	r24, Y+1	; 0x01
     a12:	84 30       	cpi	r24, 0x04	; 4
     a14:	78 f3       	brcs	.-34     	; 0x9f4 <NWK_Init+0x1e>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
     a16:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <nwkTxInit>
  nwkRxInit();
     a1a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <nwkRxInit>
  nwkFrameInit();
     a1e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <nwkFrameInit>
  nwkDataReqInit();
     a22:	0e 94 72 05 	call	0xae4	; 0xae4 <nwkDataReqInit>

#ifdef NWK_ENABLE_ROUTING
  nwkRouteInit();
     a26:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <nwkRouteInit>
#endif

#ifdef NWK_ENABLE_SECURITY
  nwkSecurityInit();
     a2a:	0e 94 7e 07 	call	0xefc	; 0xefc <nwkSecurityInit>
#endif
}
     a2e:	0f 90       	pop	r0
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <NWK_SetAddr>:

/*****************************************************************************
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <NWK_SetAddr+0x6>
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	9a 83       	std	Y+2, r25	; 0x02
     a42:	89 83       	std	Y+1, r24	; 0x01
  nwkIb.addr = addr;
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	90 93 17 08 	sts	0x0817, r25
     a4c:	80 93 16 08 	sts	0x0816, r24
  PHY_SetShortAddr(addr);
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	0e 94 c3 01 	call	0x386	; 0x386 <PHY_SetShortAddr>
}
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <NWK_SetPanId>:

/*****************************************************************************
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	00 d0       	rcall	.+0      	; 0xa68 <NWK_SetPanId+0x6>
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	9a 83       	std	Y+2, r25	; 0x02
     a6e:	89 83       	std	Y+1, r24	; 0x01
  nwkIb.panId = panId;
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	9a 81       	ldd	r25, Y+2	; 0x02
     a74:	90 93 19 08 	sts	0x0819, r25
     a78:	80 93 18 08 	sts	0x0818, r24
  PHY_SetPanId(panId);
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	9a 81       	ldd	r25, Y+2	; 0x02
     a80:	0e 94 ac 01 	call	0x358	; 0x358 <PHY_SetPanId>
}
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <NWK_OpenEndpoint>:

/*****************************************************************************
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	00 d0       	rcall	.+0      	; 0xa94 <NWK_OpenEndpoint+0x6>
     a94:	0f 92       	push	r0
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	89 83       	std	Y+1, r24	; 0x01
     a9c:	7b 83       	std	Y+3, r23	; 0x03
     a9e:	6a 83       	std	Y+2, r22	; 0x02
  nwkIb.endpoint[id] = handler;
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	88 2f       	mov	r24, r24
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	03 96       	adiw	r24, 0x03	; 3
     aa8:	88 0f       	add	r24, r24
     aaa:	99 1f       	adc	r25, r25
     aac:	8a 5e       	subi	r24, 0xEA	; 234
     aae:	97 4f       	sbci	r25, 0xF7	; 247
     ab0:	2a 81       	ldd	r18, Y+2	; 0x02
     ab2:	3b 81       	ldd	r19, Y+3	; 0x03
     ab4:	fc 01       	movw	r30, r24
     ab6:	31 83       	std	Z+1, r19	; 0x01
     ab8:	20 83       	st	Z, r18
}
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	08 95       	ret

00000ac6 <NWK_TaskHandler>:
}

/*****************************************************************************
*****************************************************************************/
void NWK_TaskHandler(void)
{
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62
  nwkRxTaskHandler();
     ace:	0e 94 b4 11 	call	0x2368	; 0x2368 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     ad2:	0e 94 9f 14 	call	0x293e	; 0x293e <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     ad6:	0e 94 48 07 	call	0xe90	; 0xe90 <nwkDataReqTaskHandler>
#ifdef NWK_ENABLE_SECURITY
  nwkSecurityTaskHandler();
     ada:	0e 94 71 09 	call	0x12e2	; 0x12e2 <nwkSecurityTaskHandler>
#endif
}
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <nwkDataReqInit>:
static NWK_DataReq_t *nwkDataReqQueue;

/*****************************************************************************
*****************************************************************************/
void nwkDataReqInit(void)
{
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
  nwkDataReqQueue = NULL;
     aec:	10 92 92 02 	sts	0x0292, r1
     af0:	10 92 91 02 	sts	0x0291, r1
}
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	08 95       	ret

00000afa <NWK_DataReq>:

/*****************************************************************************
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	00 d0       	rcall	.+0      	; 0xb00 <NWK_DataReq+0x6>
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	9a 83       	std	Y+2, r25	; 0x02
     b06:	89 83       	std	Y+1, r24	; 0x01
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	9a 81       	ldd	r25, Y+2	; 0x02
     b0c:	fc 01       	movw	r30, r24
     b0e:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	9a 81       	ldd	r25, Y+2	; 0x02
     b14:	fc 01       	movw	r30, r24
     b16:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	9a 81       	ldd	r25, Y+2	; 0x02
     b1c:	fc 01       	movw	r30, r24
     b1e:	13 82       	std	Z+3, r1	; 0x03
     b20:	12 82       	std	Z+2, r1	; 0x02

  if (NULL == nwkDataReqQueue)
     b22:	80 91 91 02 	lds	r24, 0x0291
     b26:	90 91 92 02 	lds	r25, 0x0292
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	61 f4       	brne	.+24     	; 0xb46 <NWK_DataReq+0x4c>
  {
    req->next = NULL;
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	9a 81       	ldd	r25, Y+2	; 0x02
     b32:	fc 01       	movw	r30, r24
     b34:	11 82       	std	Z+1, r1	; 0x01
     b36:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	9a 81       	ldd	r25, Y+2	; 0x02
     b3c:	90 93 92 02 	sts	0x0292, r25
     b40:	80 93 91 02 	sts	0x0291, r24
     b44:	0f c0       	rjmp	.+30     	; 0xb64 <NWK_DataReq+0x6a>
  }
  else
  {
    req->next = nwkDataReqQueue;
     b46:	20 91 91 02 	lds	r18, 0x0291
     b4a:	30 91 92 02 	lds	r19, 0x0292
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	9a 81       	ldd	r25, Y+2	; 0x02
     b52:	fc 01       	movw	r30, r24
     b54:	31 83       	std	Z+1, r19	; 0x01
     b56:	20 83       	st	Z, r18
    nwkDataReqQueue = req;
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	9a 81       	ldd	r25, Y+2	; 0x02
     b5c:	90 93 92 02 	sts	0x0292, r25
     b60:	80 93 91 02 	sts	0x0291, r24
  }
}
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <nwkDataReqSendFrame>:

/*****************************************************************************
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	00 d0       	rcall	.+0      	; 0xb74 <nwkDataReqSendFrame+0x6>
     b74:	00 d0       	rcall	.+0      	; 0xb76 <nwkDataReqSendFrame+0x8>
     b76:	0f 92       	push	r0
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	9d 83       	std	Y+5, r25	; 0x05
     b7e:	8c 83       	std	Y+4, r24	; 0x04
  NwkFrame_t *frame;
  uint8_t size = req->size;
     b80:	8c 81       	ldd	r24, Y+4	; 0x04
     b82:	9d 81       	ldd	r25, Y+5	; 0x05
     b84:	fc 01       	movw	r30, r24
     b86:	84 85       	ldd	r24, Z+12	; 0x0c
     b88:	89 83       	std	Y+1, r24	; 0x01

#ifdef NWK_ENABLE_SECURITY
  if (req->options & NWK_OPT_ENABLE_SECURITY)
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	fc 01       	movw	r30, r24
     b90:	81 85       	ldd	r24, Z+9	; 0x09
     b92:	88 2f       	mov	r24, r24
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	82 70       	andi	r24, 0x02	; 2
     b98:	90 70       	andi	r25, 0x00	; 0
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	19 f0       	breq	.+6      	; 0xba4 <nwkDataReqSendFrame+0x36>
    size += NWK_SECURITY_MIC_SIZE;
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	8c 5f       	subi	r24, 0xFC	; 252
     ba2:	89 83       	std	Y+1, r24	; 0x01
#endif

  if (NULL == (frame = nwkFrameAlloc(size)))
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <nwkFrameAlloc>
     baa:	9b 83       	std	Y+3, r25	; 0x03
     bac:	8a 83       	std	Y+2, r24	; 0x02
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	9b 81       	ldd	r25, Y+3	; 0x03
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	59 f4       	brne	.+22     	; 0xbcc <nwkDataReqSendFrame+0x5e>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     bb6:	8c 81       	ldd	r24, Y+4	; 0x04
     bb8:	9d 81       	ldd	r25, Y+5	; 0x05
     bba:	22 e0       	ldi	r18, 0x02	; 2
     bbc:	fc 01       	movw	r30, r24
     bbe:	24 83       	std	Z+4, r18	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     bc0:	8c 81       	ldd	r24, Y+4	; 0x04
     bc2:	9d 81       	ldd	r25, Y+5	; 0x05
     bc4:	22 e0       	ldi	r18, 0x02	; 2
     bc6:	fc 01       	movw	r30, r24
     bc8:	27 87       	std	Z+15, r18	; 0x0f
    return;
     bca:	bf c0       	rjmp	.+382    	; 0xd4a <nwkDataReqSendFrame+0x1dc>
  }

  req->frame = frame;
     bcc:	8c 81       	ldd	r24, Y+4	; 0x04
     bce:	9d 81       	ldd	r25, Y+5	; 0x05
     bd0:	2a 81       	ldd	r18, Y+2	; 0x02
     bd2:	3b 81       	ldd	r19, Y+3	; 0x03
     bd4:	fc 01       	movw	r30, r24
     bd6:	33 83       	std	Z+3, r19	; 0x03
     bd8:	22 83       	std	Z+2, r18	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     bda:	8c 81       	ldd	r24, Y+4	; 0x04
     bdc:	9d 81       	ldd	r25, Y+5	; 0x05
     bde:	21 e0       	ldi	r18, 0x01	; 1
     be0:	fc 01       	movw	r30, r24
     be2:	24 83       	std	Z+4, r18	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	9b 81       	ldd	r25, Y+3	; 0x03
     be8:	8d 57       	subi	r24, 0x7D	; 125
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	2d ea       	ldi	r18, 0xAD	; 173
     bee:	36 e0       	ldi	r19, 0x06	; 6
     bf0:	fc 01       	movw	r30, r24
     bf2:	31 83       	std	Z+1, r19	; 0x01
     bf4:	20 83       	st	Z, r18
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     bf6:	8c 81       	ldd	r24, Y+4	; 0x04
     bf8:	9d 81       	ldd	r25, Y+5	; 0x05
     bfa:	fc 01       	movw	r30, r24
     bfc:	81 85       	ldd	r24, Z+9	; 0x09
     bfe:	88 2f       	mov	r24, r24
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	84 70       	andi	r24, 0x04	; 4
     c04:	90 70       	andi	r25, 0x00	; 0
     c06:	21 e0       	ldi	r18, 0x01	; 1
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	09 f4       	brne	.+2      	; 0xc0e <nwkDataReqSendFrame+0xa0>
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	8a 81       	ldd	r24, Y+2	; 0x02
     c10:	9b 81       	ldd	r25, Y+3	; 0x03
     c12:	8e 57       	subi	r24, 0x7E	; 126
     c14:	9f 4f       	sbci	r25, 0xFF	; 255
     c16:	fc 01       	movw	r30, r24
     c18:	20 83       	st	Z, r18

  frame->data.header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     c1a:	8c 81       	ldd	r24, Y+4	; 0x04
     c1c:	9d 81       	ldd	r25, Y+5	; 0x05
     c1e:	fc 01       	movw	r30, r24
     c20:	81 85       	ldd	r24, Z+9	; 0x09
     c22:	81 70       	andi	r24, 0x01	; 1
     c24:	28 2f       	mov	r18, r24
     c26:	21 70       	andi	r18, 0x01	; 1
     c28:	21 70       	andi	r18, 0x01	; 1
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	9b 81       	ldd	r25, Y+3	; 0x03
     c2e:	21 70       	andi	r18, 0x01	; 1
     c30:	fc 01       	movw	r30, r24
     c32:	33 85       	ldd	r19, Z+11	; 0x0b
     c34:	3e 7f       	andi	r19, 0xFE	; 254
     c36:	23 2b       	or	r18, r19
     c38:	fc 01       	movw	r30, r24
     c3a:	23 87       	std	Z+11, r18	; 0x0b
#ifdef NWK_ENABLE_SECURITY
  frame->data.header.nwkFcf.securityEnabled = req->options & NWK_OPT_ENABLE_SECURITY ? 1 : 0;
     c3c:	8c 81       	ldd	r24, Y+4	; 0x04
     c3e:	9d 81       	ldd	r25, Y+5	; 0x05
     c40:	fc 01       	movw	r30, r24
     c42:	81 85       	ldd	r24, Z+9	; 0x09
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	82 70       	andi	r24, 0x02	; 2
     c4a:	90 70       	andi	r25, 0x00	; 0
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	09 f4       	brne	.+2      	; 0xc54 <nwkDataReqSendFrame+0xe6>
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	9b 81       	ldd	r25, Y+3	; 0x03
     c58:	21 70       	andi	r18, 0x01	; 1
     c5a:	22 0f       	add	r18, r18
     c5c:	fc 01       	movw	r30, r24
     c5e:	33 85       	ldd	r19, Z+11	; 0x0b
     c60:	3d 7f       	andi	r19, 0xFD	; 253
     c62:	23 2b       	or	r18, r19
     c64:	fc 01       	movw	r30, r24
     c66:	23 87       	std	Z+11, r18	; 0x0b
#endif
  frame->data.header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	9d 81       	ldd	r25, Y+5	; 0x05
     c6c:	fc 01       	movw	r30, r24
     c6e:	81 85       	ldd	r24, Z+9	; 0x09
     c70:	88 2f       	mov	r24, r24
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	88 70       	andi	r24, 0x08	; 8
     c76:	90 70       	andi	r25, 0x00	; 0
     c78:	21 e0       	ldi	r18, 0x01	; 1
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	09 f4       	brne	.+2      	; 0xc80 <nwkDataReqSendFrame+0x112>
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	9b 81       	ldd	r25, Y+3	; 0x03
     c84:	21 70       	andi	r18, 0x01	; 1
     c86:	22 0f       	add	r18, r18
     c88:	22 0f       	add	r18, r18
     c8a:	fc 01       	movw	r30, r24
     c8c:	33 85       	ldd	r19, Z+11	; 0x0b
     c8e:	3b 7f       	andi	r19, 0xFB	; 251
     c90:	23 2b       	or	r18, r19
     c92:	fc 01       	movw	r30, r24
     c94:	23 87       	std	Z+11, r18	; 0x0b
  frame->data.header.nwkFcf.reserved = 0;
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	9b 81       	ldd	r25, Y+3	; 0x03
     c9a:	fc 01       	movw	r30, r24
     c9c:	23 85       	ldd	r18, Z+11	; 0x0b
     c9e:	27 70       	andi	r18, 0x07	; 7
     ca0:	fc 01       	movw	r30, r24
     ca2:	23 87       	std	Z+11, r18	; 0x0b
  frame->data.header.nwkSeq = ++nwkIb.nwkSeqNum;
     ca4:	80 91 1a 08 	lds	r24, 0x081A
     ca8:	8f 5f       	subi	r24, 0xFF	; 255
     caa:	80 93 1a 08 	sts	0x081A, r24
     cae:	20 91 1a 08 	lds	r18, 0x081A
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	fc 01       	movw	r30, r24
     cb8:	24 87       	std	Z+12, r18	; 0x0c
  frame->data.header.nwkSrcAddr = nwkIb.addr;
     cba:	20 91 16 08 	lds	r18, 0x0816
     cbe:	30 91 17 08 	lds	r19, 0x0817
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	9b 81       	ldd	r25, Y+3	; 0x03
     cc6:	fc 01       	movw	r30, r24
     cc8:	36 87       	std	Z+14, r19	; 0x0e
     cca:	25 87       	std	Z+13, r18	; 0x0d
  frame->data.header.nwkDstAddr = req->dstAddr;
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	fc 01       	movw	r30, r24
     cd2:	25 81       	ldd	r18, Z+5	; 0x05
     cd4:	36 81       	ldd	r19, Z+6	; 0x06
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	9b 81       	ldd	r25, Y+3	; 0x03
     cda:	fc 01       	movw	r30, r24
     cdc:	30 8b       	std	Z+16, r19	; 0x10
     cde:	27 87       	std	Z+15, r18	; 0x0f
  frame->data.header.nwkSrcEndpoint = req->srcEndpoint;
     ce0:	8c 81       	ldd	r24, Y+4	; 0x04
     ce2:	9d 81       	ldd	r25, Y+5	; 0x05
     ce4:	fc 01       	movw	r30, r24
     ce6:	80 85       	ldd	r24, Z+8	; 0x08
     ce8:	28 2f       	mov	r18, r24
     cea:	2f 70       	andi	r18, 0x0F	; 15
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	9b 81       	ldd	r25, Y+3	; 0x03
     cf0:	2f 70       	andi	r18, 0x0F	; 15
     cf2:	fc 01       	movw	r30, r24
     cf4:	31 89       	ldd	r19, Z+17	; 0x11
     cf6:	30 7f       	andi	r19, 0xF0	; 240
     cf8:	23 2b       	or	r18, r19
     cfa:	fc 01       	movw	r30, r24
     cfc:	21 8b       	std	Z+17, r18	; 0x11
  frame->data.header.nwkDstEndpoint = req->dstEndpoint;
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	9d 81       	ldd	r25, Y+5	; 0x05
     d02:	fc 01       	movw	r30, r24
     d04:	87 81       	ldd	r24, Z+7	; 0x07
     d06:	28 2f       	mov	r18, r24
     d08:	2f 70       	andi	r18, 0x0F	; 15
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	9b 81       	ldd	r25, Y+3	; 0x03
     d0e:	22 95       	swap	r18
     d10:	20 7f       	andi	r18, 0xF0	; 240
     d12:	fc 01       	movw	r30, r24
     d14:	31 89       	ldd	r19, Z+17	; 0x11
     d16:	3f 70       	andi	r19, 0x0F	; 15
     d18:	23 2b       	or	r18, r19
     d1a:	fc 01       	movw	r30, r24
     d1c:	21 8b       	std	Z+17, r18	; 0x11

  memcpy(frame->data.payload, req->data, req->size);
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	9b 81       	ldd	r25, Y+3	; 0x03
     d22:	42 96       	adiw	r24, 0x12	; 18
     d24:	2c 81       	ldd	r18, Y+4	; 0x04
     d26:	3d 81       	ldd	r19, Y+5	; 0x05
     d28:	f9 01       	movw	r30, r18
     d2a:	42 85       	ldd	r20, Z+10	; 0x0a
     d2c:	53 85       	ldd	r21, Z+11	; 0x0b
     d2e:	2c 81       	ldd	r18, Y+4	; 0x04
     d30:	3d 81       	ldd	r19, Y+5	; 0x05
     d32:	f9 01       	movw	r30, r18
     d34:	24 85       	ldd	r18, Z+12	; 0x0c
     d36:	22 2f       	mov	r18, r18
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	ba 01       	movw	r22, r20
     d3c:	a9 01       	movw	r20, r18
     d3e:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <memcpy>

  nwkTxFrame(frame);
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	9b 81       	ldd	r25, Y+3	; 0x03
     d46:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <nwkTxFrame>
}
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <nwkDataReqTxConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <nwkDataReqTxConf+0x6>
     d60:	00 d0       	rcall	.+0      	; 0xd62 <nwkDataReqTxConf+0x8>
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	9c 83       	std	Y+4, r25	; 0x04
     d68:	8b 83       	std	Y+3, r24	; 0x03
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     d6a:	80 91 91 02 	lds	r24, 0x0291
     d6e:	90 91 92 02 	lds	r25, 0x0292
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	89 83       	std	Y+1, r24	; 0x01
     d76:	2b c0       	rjmp	.+86     	; 0xdce <nwkDataReqTxConf+0x74>
  {
    if (req->frame == frame)
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	fc 01       	movw	r30, r24
     d7e:	22 81       	ldd	r18, Z+2	; 0x02
     d80:	33 81       	ldd	r19, Z+3	; 0x03
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	28 17       	cp	r18, r24
     d88:	39 07       	cpc	r19, r25
     d8a:	d1 f4       	brne	.+52     	; 0xdc0 <nwkDataReqTxConf+0x66>
    {
      req->status = frame->tx.status;
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	9c 81       	ldd	r25, Y+4	; 0x04
     d90:	81 58       	subi	r24, 0x81	; 129
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	fc 01       	movw	r30, r24
     d96:	20 81       	ld	r18, Z
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	9a 81       	ldd	r25, Y+2	; 0x02
     d9c:	fc 01       	movw	r30, r24
     d9e:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	9c 81       	ldd	r25, Y+4	; 0x04
     da4:	8e 57       	subi	r24, 0x7E	; 126
     da6:	9f 4f       	sbci	r25, 0xFF	; 255
     da8:	fc 01       	movw	r30, r24
     daa:	20 81       	ld	r18, Z
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	9a 81       	ldd	r25, Y+2	; 0x02
     db0:	fc 01       	movw	r30, r24
     db2:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	9a 81       	ldd	r25, Y+2	; 0x02
     db8:	22 e0       	ldi	r18, 0x02	; 2
     dba:	fc 01       	movw	r30, r24
     dbc:	24 83       	std	Z+4, r18	; 0x04
      break;
     dbe:	0b c0       	rjmp	.+22     	; 0xdd6 <nwkDataReqTxConf+0x7c>

/*****************************************************************************
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	9a 81       	ldd	r25, Y+2	; 0x02
     dc4:	fc 01       	movw	r30, r24
     dc6:	80 81       	ld	r24, Z
     dc8:	91 81       	ldd	r25, Z+1	; 0x01
     dca:	9a 83       	std	Y+2, r25	; 0x02
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	89 f6       	brne	.-94     	; 0xd78 <nwkDataReqTxConf+0x1e>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	9c 81       	ldd	r25, Y+4	; 0x04
     dda:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <nwkFrameFree>
}
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <nwkDataReqConfirm>:

/*****************************************************************************
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <nwkDataReqConfirm+0x6>
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <nwkDataReqConfirm+0x8>
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	9c 83       	std	Y+4, r25	; 0x04
     dfa:	8b 83       	std	Y+3, r24	; 0x03
  if (nwkDataReqQueue == req)
     dfc:	20 91 91 02 	lds	r18, 0x0291
     e00:	30 91 92 02 	lds	r19, 0x0292
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	9c 81       	ldd	r25, Y+4	; 0x04
     e08:	28 17       	cp	r18, r24
     e0a:	39 07       	cpc	r19, r25
     e0c:	61 f4       	brne	.+24     	; 0xe26 <nwkDataReqConfirm+0x3a>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     e0e:	80 91 91 02 	lds	r24, 0x0291
     e12:	90 91 92 02 	lds	r25, 0x0292
     e16:	fc 01       	movw	r30, r24
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	90 93 92 02 	sts	0x0292, r25
     e20:	80 93 91 02 	sts	0x0291, r24
     e24:	25 c0       	rjmp	.+74     	; 0xe70 <nwkDataReqConfirm+0x84>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
     e26:	80 91 91 02 	lds	r24, 0x0291
     e2a:	90 91 92 02 	lds	r25, 0x0292
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
    while (prev->next != req)
     e32:	07 c0       	rjmp	.+14     	; 0xe42 <nwkDataReqConfirm+0x56>
      prev = prev->next;
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	fc 01       	movw	r30, r24
     e3a:	80 81       	ld	r24, Z
     e3c:	91 81       	ldd	r25, Z+1	; 0x01
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	fc 01       	movw	r30, r24
     e48:	20 81       	ld	r18, Z
     e4a:	31 81       	ldd	r19, Z+1	; 0x01
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	9c 81       	ldd	r25, Y+4	; 0x04
     e50:	28 17       	cp	r18, r24
     e52:	39 07       	cpc	r19, r25
     e54:	79 f7       	brne	.-34     	; 0xe34 <nwkDataReqConfirm+0x48>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	fc 01       	movw	r30, r24
     e5c:	80 81       	ld	r24, Z
     e5e:	91 81       	ldd	r25, Z+1	; 0x01
     e60:	fc 01       	movw	r30, r24
     e62:	20 81       	ld	r18, Z
     e64:	31 81       	ldd	r19, Z+1	; 0x01
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	fc 01       	movw	r30, r24
     e6c:	31 83       	std	Z+1, r19	; 0x01
     e6e:	20 83       	st	Z, r18
  }

  req->confirm(req);
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	9c 81       	ldd	r25, Y+4	; 0x04
     e74:	fc 01       	movw	r30, r24
     e76:	25 85       	ldd	r18, Z+13	; 0x0d
     e78:	36 85       	ldd	r19, Z+14	; 0x0e
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	9c 81       	ldd	r25, Y+4	; 0x04
     e7e:	f9 01       	movw	r30, r18
     e80:	09 95       	icall
}
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	08 95       	ret

00000e90 <nwkDataReqTaskHandler>:
}

/*****************************************************************************
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	00 d0       	rcall	.+0      	; 0xe96 <nwkDataReqTaskHandler+0x6>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     e9a:	80 91 91 02 	lds	r24, 0x0291
     e9e:	90 91 92 02 	lds	r25, 0x0292
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	21 c0       	rjmp	.+66     	; 0xeea <nwkDataReqTaskHandler+0x5a>
  {
    switch (req->state)
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	fc 01       	movw	r30, r24
     eae:	84 81       	ldd	r24, Z+4	; 0x04
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	91 05       	cpc	r25, r1
     eb8:	81 f0       	breq	.+32     	; 0xeda <nwkDataReqTaskHandler+0x4a>
     eba:	82 30       	cpi	r24, 0x02	; 2
     ebc:	91 05       	cpc	r25, r1
     ebe:	39 f0       	breq	.+14     	; 0xece <nwkDataReqTaskHandler+0x3e>
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	51 f4       	brne	.+20     	; 0xed8 <nwkDataReqTaskHandler+0x48>
    {
      case NWK_DATA_REQ_STATE_INITIAL:
      {
        nwkDataReqSendFrame(req);
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <nwkDataReqSendFrame>
        return;
     ecc:	12 c0       	rjmp	.+36     	; 0xef2 <nwkDataReqTaskHandler+0x62>
      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;

      case NWK_DATA_REQ_STATE_CONFIRM:
      {
        nwkDataReqConfirm(req);
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02
     ed2:	0e 94 f6 06 	call	0xdec	; 0xdec <nwkDataReqConfirm>
        return;
     ed6:	0d c0       	rjmp	.+26     	; 0xef2 <nwkDataReqTaskHandler+0x62>
      } break;

      default:
        break;
     ed8:	01 c0       	rjmp	.+2      	; 0xedc <nwkDataReqTaskHandler+0x4c>
        nwkDataReqSendFrame(req);
        return;
      } break;

      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;
     eda:	00 00       	nop

/*****************************************************************************
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	fc 01       	movw	r30, r24
     ee2:	80 81       	ld	r24, Z
     ee4:	91 81       	ldd	r25, Z+1	; 0x01
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	9a 81       	ldd	r25, Y+2	; 0x02
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	d9 f6       	brne	.-74     	; 0xea8 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <nwkSecurityInit>:
static uint32_t nwkSecurityVector[4];

/*****************************************************************************
*****************************************************************************/
void nwkSecurityInit(void)
{
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
  nwkSecurityActiveFrames = 0;
     f04:	10 92 93 02 	sts	0x0293, r1
  nwkSecurityActiveFrame = NULL;
     f08:	10 92 95 02 	sts	0x0295, r1
     f0c:	10 92 94 02 	sts	0x0294, r1
}
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	08 95       	ret

00000f16 <nwkSecurityProcess>:

/*****************************************************************************
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <nwkSecurityProcess+0x6>
     f1c:	0f 92       	push	r0
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	6b 83       	std	Y+3, r22	; 0x03
  if (encrypt)
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	88 23       	and	r24, r24
     f2c:	31 f0       	breq	.+12     	; 0xf3a <nwkSecurityProcess+0x24>
    frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	20 e3       	ldi	r18, 0x30	; 48
     f34:	fc 01       	movw	r30, r24
     f36:	20 83       	st	Z, r18
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <nwkSecurityProcess+0x2e>
  else
    frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	9a 81       	ldd	r25, Y+2	; 0x02
     f3e:	21 e3       	ldi	r18, 0x31	; 49
     f40:	fc 01       	movw	r30, r24
     f42:	20 83       	st	Z, r18
  ++nwkSecurityActiveFrames;
     f44:	80 91 93 02 	lds	r24, 0x0293
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	80 93 93 02 	sts	0x0293, r24
}
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <nwkSecurityStart>:

/*****************************************************************************
*****************************************************************************/
static void nwkSecurityStart(void)
{
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <nwkSecurityStart+0x6>
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
  NwkFrameHeader_t *header = &nwkSecurityActiveFrame->data.header;
     f64:	80 91 94 02 	lds	r24, 0x0294
     f68:	90 91 95 02 	lds	r25, 0x0295
     f6c:	02 96       	adiw	r24, 0x02	; 2
     f6e:	9a 83       	std	Y+2, r25	; 0x02
     f70:	89 83       	std	Y+1, r24	; 0x01

  nwkSecurityVector[0] = header->nwkSeq;
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	fc 01       	movw	r30, r24
     f78:	82 85       	ldd	r24, Z+10	; 0x0a
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a0 e0       	ldi	r26, 0x00	; 0
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	80 93 99 02 	sts	0x0299, r24
     f86:	90 93 9a 02 	sts	0x029A, r25
     f8a:	a0 93 9b 02 	sts	0x029B, r26
     f8e:	b0 93 9c 02 	sts	0x029C, r27
  nwkSecurityVector[1] = ((uint32_t)header->nwkDstAddr << 16) | header->nwkDstEndpoint;
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	fc 01       	movw	r30, r24
     f98:	85 85       	ldd	r24, Z+13	; 0x0d
     f9a:	96 85       	ldd	r25, Z+14	; 0x0e
     f9c:	cc 01       	movw	r24, r24
     f9e:	a0 e0       	ldi	r26, 0x00	; 0
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	ac 01       	movw	r20, r24
     fa4:	33 27       	eor	r19, r19
     fa6:	22 27       	eor	r18, r18
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	fc 01       	movw	r30, r24
     fae:	87 85       	ldd	r24, Z+15	; 0x0f
     fb0:	82 95       	swap	r24
     fb2:	8f 70       	andi	r24, 0x0F	; 15
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a0 e0       	ldi	r26, 0x00	; 0
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	82 2b       	or	r24, r18
     fbe:	93 2b       	or	r25, r19
     fc0:	a4 2b       	or	r26, r20
     fc2:	b5 2b       	or	r27, r21
     fc4:	80 93 9d 02 	sts	0x029D, r24
     fc8:	90 93 9e 02 	sts	0x029E, r25
     fcc:	a0 93 9f 02 	sts	0x029F, r26
     fd0:	b0 93 a0 02 	sts	0x02A0, r27
  nwkSecurityVector[2] = ((uint32_t)header->nwkSrcAddr << 16) | header->nwkSrcEndpoint;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	fc 01       	movw	r30, r24
     fda:	83 85       	ldd	r24, Z+11	; 0x0b
     fdc:	94 85       	ldd	r25, Z+12	; 0x0c
     fde:	cc 01       	movw	r24, r24
     fe0:	a0 e0       	ldi	r26, 0x00	; 0
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ac 01       	movw	r20, r24
     fe6:	33 27       	eor	r19, r19
     fe8:	22 27       	eor	r18, r18
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	9a 81       	ldd	r25, Y+2	; 0x02
     fee:	fc 01       	movw	r30, r24
     ff0:	87 85       	ldd	r24, Z+15	; 0x0f
     ff2:	8f 70       	andi	r24, 0x0F	; 15
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a0 e0       	ldi	r26, 0x00	; 0
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	82 2b       	or	r24, r18
     ffe:	93 2b       	or	r25, r19
    1000:	a4 2b       	or	r26, r20
    1002:	b5 2b       	or	r27, r21
    1004:	80 93 a1 02 	sts	0x02A1, r24
    1008:	90 93 a2 02 	sts	0x02A2, r25
    100c:	a0 93 a3 02 	sts	0x02A3, r26
    1010:	b0 93 a4 02 	sts	0x02A4, r27
  nwkSecurityVector[3] = ((uint32_t)header->macDstPanId << 16) | *(uint8_t *)&header->nwkFcf;
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	9a 81       	ldd	r25, Y+2	; 0x02
    1018:	fc 01       	movw	r30, r24
    101a:	83 81       	ldd	r24, Z+3	; 0x03
    101c:	94 81       	ldd	r25, Z+4	; 0x04
    101e:	cc 01       	movw	r24, r24
    1020:	a0 e0       	ldi	r26, 0x00	; 0
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ac 01       	movw	r20, r24
    1026:	33 27       	eor	r19, r19
    1028:	22 27       	eor	r18, r18
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	09 96       	adiw	r24, 0x09	; 9
    1030:	fc 01       	movw	r30, r24
    1032:	80 81       	ld	r24, Z
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	a0 e0       	ldi	r26, 0x00	; 0
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	82 2b       	or	r24, r18
    103e:	93 2b       	or	r25, r19
    1040:	a4 2b       	or	r26, r20
    1042:	b5 2b       	or	r27, r21
    1044:	80 93 a5 02 	sts	0x02A5, r24
    1048:	90 93 a6 02 	sts	0x02A6, r25
    104c:	a0 93 a7 02 	sts	0x02A7, r26
    1050:	b0 93 a8 02 	sts	0x02A8, r27

  nwkSecuritySize = nwkSecurityActiveFrame->size - sizeof(NwkFrameHeader_t) - NWK_SECURITY_MIC_SIZE;
    1054:	80 91 94 02 	lds	r24, 0x0294
    1058:	90 91 95 02 	lds	r25, 0x0295
    105c:	fc 01       	movw	r30, r24
    105e:	81 81       	ldd	r24, Z+1	; 0x01
    1060:	84 51       	subi	r24, 0x14	; 20
    1062:	80 93 96 02 	sts	0x0296, r24
  nwkSecurityOffset = 0;
    1066:	10 92 97 02 	sts	0x0297, r1
  nwkSecurityEncrypt = (NWK_SECURITY_STATE_ENCRYPT_PENDING == nwkSecurityActiveFrame->state);
    106a:	80 91 94 02 	lds	r24, 0x0294
    106e:	90 91 95 02 	lds	r25, 0x0295
    1072:	fc 01       	movw	r30, r24
    1074:	90 81       	ld	r25, Z
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 33       	cpi	r25, 0x30	; 48
    107a:	09 f0       	breq	.+2      	; 0x107e <nwkSecurityStart+0x124>
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	80 93 98 02 	sts	0x0298, r24

  nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    1082:	80 91 94 02 	lds	r24, 0x0294
    1086:	90 91 95 02 	lds	r25, 0x0295
    108a:	22 e3       	ldi	r18, 0x32	; 50
    108c:	fc 01       	movw	r30, r24
    108e:	20 83       	st	Z, r18
}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	08 95       	ret

0000109a <SYS_EncryptConf>:

/*****************************************************************************
*****************************************************************************/
void SYS_EncryptConf(void)
{
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <SYS_EncryptConf+0x6>
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <SYS_EncryptConf+0x8>
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <SYS_EncryptConf+0xa>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
  uint8_t *vector = (uint8_t *)nwkSecurityVector;
    10a8:	89 e9       	ldi	r24, 0x99	; 153
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	9b 83       	std	Y+3, r25	; 0x03
    10ae:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t *text = &nwkSecurityActiveFrame->data.payload[nwkSecurityOffset];
    10b0:	80 91 94 02 	lds	r24, 0x0294
    10b4:	90 91 95 02 	lds	r25, 0x0295
    10b8:	9c 01       	movw	r18, r24
    10ba:	2e 5e       	subi	r18, 0xEE	; 238
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	80 91 97 02 	lds	r24, 0x0297
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	82 0f       	add	r24, r18
    10c8:	93 1f       	adc	r25, r19
    10ca:	9d 83       	std	Y+5, r25	; 0x05
    10cc:	8c 83       	std	Y+4, r24	; 0x04
  uint8_t block;

  block = (nwkSecuritySize < NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize : NWK_SECURITY_BLOCK_SIZE;
    10ce:	80 91 96 02 	lds	r24, 0x0296
    10d2:	81 31       	cpi	r24, 0x11	; 17
    10d4:	08 f0       	brcs	.+2      	; 0x10d8 <SYS_EncryptConf+0x3e>
    10d6:	80 e1       	ldi	r24, 0x10	; 16
    10d8:	8e 83       	std	Y+6, r24	; 0x06

  for (uint8_t i = 0; i < block; i++)
    10da:	19 82       	std	Y+1, r1	; 0x01
    10dc:	52 c0       	rjmp	.+164    	; 0x1182 <SYS_EncryptConf+0xe8>
  {
    text[i] ^= vector[i];
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	2c 81       	ldd	r18, Y+4	; 0x04
    10e6:	3d 81       	ldd	r19, Y+5	; 0x05
    10e8:	82 0f       	add	r24, r18
    10ea:	93 1f       	adc	r25, r19
    10ec:	29 81       	ldd	r18, Y+1	; 0x01
    10ee:	22 2f       	mov	r18, r18
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	4c 81       	ldd	r20, Y+4	; 0x04
    10f4:	5d 81       	ldd	r21, Y+5	; 0x05
    10f6:	24 0f       	add	r18, r20
    10f8:	35 1f       	adc	r19, r21
    10fa:	f9 01       	movw	r30, r18
    10fc:	60 81       	ld	r22, Z
    10fe:	29 81       	ldd	r18, Y+1	; 0x01
    1100:	22 2f       	mov	r18, r18
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	4a 81       	ldd	r20, Y+2	; 0x02
    1106:	5b 81       	ldd	r21, Y+3	; 0x03
    1108:	24 0f       	add	r18, r20
    110a:	35 1f       	adc	r19, r21
    110c:	f9 01       	movw	r30, r18
    110e:	20 81       	ld	r18, Z
    1110:	26 27       	eor	r18, r22
    1112:	fc 01       	movw	r30, r24
    1114:	20 83       	st	Z, r18

    if (nwkSecurityEncrypt)
    1116:	80 91 98 02 	lds	r24, 0x0298
    111a:	88 23       	and	r24, r24
    111c:	99 f0       	breq	.+38     	; 0x1144 <SYS_EncryptConf+0xaa>
      vector[i] = text[i];
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	2a 81       	ldd	r18, Y+2	; 0x02
    1126:	3b 81       	ldd	r19, Y+3	; 0x03
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	29 81       	ldd	r18, Y+1	; 0x01
    112e:	22 2f       	mov	r18, r18
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	4c 81       	ldd	r20, Y+4	; 0x04
    1134:	5d 81       	ldd	r21, Y+5	; 0x05
    1136:	24 0f       	add	r18, r20
    1138:	35 1f       	adc	r19, r21
    113a:	f9 01       	movw	r30, r18
    113c:	20 81       	ld	r18, Z
    113e:	fc 01       	movw	r30, r24
    1140:	20 83       	st	Z, r18
    1142:	1c c0       	rjmp	.+56     	; 0x117c <SYS_EncryptConf+0xe2>
    else
      vector[i] ^= text[i];
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	2a 81       	ldd	r18, Y+2	; 0x02
    114c:	3b 81       	ldd	r19, Y+3	; 0x03
    114e:	82 0f       	add	r24, r18
    1150:	93 1f       	adc	r25, r19
    1152:	29 81       	ldd	r18, Y+1	; 0x01
    1154:	22 2f       	mov	r18, r18
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	4a 81       	ldd	r20, Y+2	; 0x02
    115a:	5b 81       	ldd	r21, Y+3	; 0x03
    115c:	24 0f       	add	r18, r20
    115e:	35 1f       	adc	r19, r21
    1160:	f9 01       	movw	r30, r18
    1162:	60 81       	ld	r22, Z
    1164:	29 81       	ldd	r18, Y+1	; 0x01
    1166:	22 2f       	mov	r18, r18
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	4c 81       	ldd	r20, Y+4	; 0x04
    116c:	5d 81       	ldd	r21, Y+5	; 0x05
    116e:	24 0f       	add	r18, r20
    1170:	35 1f       	adc	r19, r21
    1172:	f9 01       	movw	r30, r18
    1174:	20 81       	ld	r18, Z
    1176:	26 27       	eor	r18, r22
    1178:	fc 01       	movw	r30, r24
    117a:	20 83       	st	Z, r18
  uint8_t *text = &nwkSecurityActiveFrame->data.payload[nwkSecurityOffset];
  uint8_t block;

  block = (nwkSecuritySize < NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize : NWK_SECURITY_BLOCK_SIZE;

  for (uint8_t i = 0; i < block; i++)
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	8f 5f       	subi	r24, 0xFF	; 255
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	99 81       	ldd	r25, Y+1	; 0x01
    1184:	8e 81       	ldd	r24, Y+6	; 0x06
    1186:	98 17       	cp	r25, r24
    1188:	08 f4       	brcc	.+2      	; 0x118c <SYS_EncryptConf+0xf2>
    118a:	a9 cf       	rjmp	.-174    	; 0x10de <SYS_EncryptConf+0x44>
      vector[i] = text[i];
    else
      vector[i] ^= text[i];
  }

  nwkSecurityOffset += block;
    118c:	90 91 97 02 	lds	r25, 0x0297
    1190:	8e 81       	ldd	r24, Y+6	; 0x06
    1192:	89 0f       	add	r24, r25
    1194:	80 93 97 02 	sts	0x0297, r24
  nwkSecuritySize -= block;
    1198:	90 91 96 02 	lds	r25, 0x0296
    119c:	8e 81       	ldd	r24, Y+6	; 0x06
    119e:	f9 2f       	mov	r31, r25
    11a0:	f8 1b       	sub	r31, r24
    11a2:	8f 2f       	mov	r24, r31
    11a4:	80 93 96 02 	sts	0x0296, r24

  if (nwkSecuritySize > 0)
    11a8:	80 91 96 02 	lds	r24, 0x0296
    11ac:	88 23       	and	r24, r24
    11ae:	41 f0       	breq	.+16     	; 0x11c0 <SYS_EncryptConf+0x126>
    nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    11b0:	80 91 94 02 	lds	r24, 0x0294
    11b4:	90 91 95 02 	lds	r25, 0x0295
    11b8:	22 e3       	ldi	r18, 0x32	; 50
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 83       	st	Z, r18
    11be:	07 c0       	rjmp	.+14     	; 0x11ce <SYS_EncryptConf+0x134>
  else
    nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    11c0:	80 91 94 02 	lds	r24, 0x0294
    11c4:	90 91 95 02 	lds	r25, 0x0295
    11c8:	24 e3       	ldi	r18, 0x34	; 52
    11ca:	fc 01       	movw	r30, r24
    11cc:	20 83       	st	Z, r18
}
    11ce:	26 96       	adiw	r28, 0x06	; 6
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret

000011e0 <nwkSecurityProcessMic>:

/*****************************************************************************
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	2a 97       	sbiw	r28, 0x0a	; 10
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
  uint8_t *mic = &nwkSecurityActiveFrame->data.payload[nwkSecurityOffset];
    11f4:	80 91 94 02 	lds	r24, 0x0294
    11f8:	90 91 95 02 	lds	r25, 0x0295
    11fc:	9c 01       	movw	r18, r24
    11fe:	2e 5e       	subi	r18, 0xEE	; 238
    1200:	3f 4f       	sbci	r19, 0xFF	; 255
    1202:	80 91 97 02 	lds	r24, 0x0297
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	82 0f       	add	r24, r18
    120c:	93 1f       	adc	r25, r19
    120e:	9a 83       	std	Y+2, r25	; 0x02
    1210:	89 83       	std	Y+1, r24	; 0x01
  uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    1212:	20 91 99 02 	lds	r18, 0x0299
    1216:	30 91 9a 02 	lds	r19, 0x029A
    121a:	40 91 9b 02 	lds	r20, 0x029B
    121e:	50 91 9c 02 	lds	r21, 0x029C
    1222:	80 91 9d 02 	lds	r24, 0x029D
    1226:	90 91 9e 02 	lds	r25, 0x029E
    122a:	a0 91 9f 02 	lds	r26, 0x029F
    122e:	b0 91 a0 02 	lds	r27, 0x02A0
    1232:	28 27       	eor	r18, r24
    1234:	39 27       	eor	r19, r25
    1236:	4a 27       	eor	r20, r26
    1238:	5b 27       	eor	r21, r27
                  nwkSecurityVector[2] ^ nwkSecurityVector[3];
    123a:	80 91 a1 02 	lds	r24, 0x02A1
    123e:	90 91 a2 02 	lds	r25, 0x02A2
    1242:	a0 91 a3 02 	lds	r26, 0x02A3
    1246:	b0 91 a4 02 	lds	r27, 0x02A4
/*****************************************************************************
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
  uint8_t *mic = &nwkSecurityActiveFrame->data.payload[nwkSecurityOffset];
  uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    124a:	28 27       	eor	r18, r24
    124c:	39 27       	eor	r19, r25
    124e:	4a 27       	eor	r20, r26
    1250:	5b 27       	eor	r21, r27
                  nwkSecurityVector[2] ^ nwkSecurityVector[3];
    1252:	80 91 a5 02 	lds	r24, 0x02A5
    1256:	90 91 a6 02 	lds	r25, 0x02A6
    125a:	a0 91 a7 02 	lds	r26, 0x02A7
    125e:	b0 91 a8 02 	lds	r27, 0x02A8
    1262:	82 27       	eor	r24, r18
    1264:	93 27       	eor	r25, r19
    1266:	a4 27       	eor	r26, r20
    1268:	b5 27       	eor	r27, r21
/*****************************************************************************
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
  uint8_t *mic = &nwkSecurityActiveFrame->data.payload[nwkSecurityOffset];
  uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    126a:	8b 83       	std	Y+3, r24	; 0x03
    126c:	9c 83       	std	Y+4, r25	; 0x04
    126e:	ad 83       	std	Y+5, r26	; 0x05
    1270:	be 83       	std	Y+6, r27	; 0x06
                  nwkSecurityVector[2] ^ nwkSecurityVector[3];
  uint32_t tmic;

  if (nwkSecurityEncrypt)
    1272:	80 91 98 02 	lds	r24, 0x0298
    1276:	88 23       	and	r24, r24
    1278:	81 f0       	breq	.+32     	; 0x129a <nwkSecurityProcessMic+0xba>
  {
    memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    127a:	ce 01       	movw	r24, r28
    127c:	03 96       	adiw	r24, 0x03	; 3
    127e:	fc 01       	movw	r30, r24
    1280:	80 81       	ld	r24, Z
    1282:	91 81       	ldd	r25, Z+1	; 0x01
    1284:	a2 81       	ldd	r26, Z+2	; 0x02
    1286:	b3 81       	ldd	r27, Z+3	; 0x03
    1288:	29 81       	ldd	r18, Y+1	; 0x01
    128a:	3a 81       	ldd	r19, Y+2	; 0x02
    128c:	f9 01       	movw	r30, r18
    128e:	80 83       	st	Z, r24
    1290:	91 83       	std	Z+1, r25	; 0x01
    1292:	a2 83       	std	Z+2, r26	; 0x02
    1294:	b3 83       	std	Z+3, r27	; 0x03
    return true;
    1296:	61 e0       	ldi	r22, 0x01	; 1
    1298:	1a c0       	rjmp	.+52     	; 0x12ce <nwkSecurityProcessMic+0xee>
  }
  else
  {
    memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	fc 01       	movw	r30, r24
    12a0:	80 81       	ld	r24, Z
    12a2:	91 81       	ldd	r25, Z+1	; 0x01
    12a4:	a2 81       	ldd	r26, Z+2	; 0x02
    12a6:	b3 81       	ldd	r27, Z+3	; 0x03
    12a8:	8f 83       	std	Y+7, r24	; 0x07
    12aa:	98 87       	std	Y+8, r25	; 0x08
    12ac:	a9 87       	std	Y+9, r26	; 0x09
    12ae:	ba 87       	std	Y+10, r27	; 0x0a
    return vmic == tmic;
    12b0:	2b 81       	ldd	r18, Y+3	; 0x03
    12b2:	3c 81       	ldd	r19, Y+4	; 0x04
    12b4:	4d 81       	ldd	r20, Y+5	; 0x05
    12b6:	5e 81       	ldd	r21, Y+6	; 0x06
    12b8:	8f 81       	ldd	r24, Y+7	; 0x07
    12ba:	98 85       	ldd	r25, Y+8	; 0x08
    12bc:	a9 85       	ldd	r26, Y+9	; 0x09
    12be:	ba 85       	ldd	r27, Y+10	; 0x0a
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	28 17       	cp	r18, r24
    12c4:	39 07       	cpc	r19, r25
    12c6:	4a 07       	cpc	r20, r26
    12c8:	5b 07       	cpc	r21, r27
    12ca:	09 f0       	breq	.+2      	; 0x12ce <nwkSecurityProcessMic+0xee>
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	86 2f       	mov	r24, r22
  }
}
    12d0:	2a 96       	adiw	r28, 0x0a	; 10
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	08 95       	ret

000012e2 <nwkSecurityTaskHandler>:

/*****************************************************************************
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <nwkSecurityTaskHandler+0x6>
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <nwkSecurityTaskHandler+0x8>
    12ea:	0f 92       	push	r0
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
  if (0 == nwkSecurityActiveFrames)
    12f0:	80 91 93 02 	lds	r24, 0x0293
    12f4:	88 23       	and	r24, r24
    12f6:	09 f4       	brne	.+2      	; 0x12fa <nwkSecurityTaskHandler+0x18>
    12f8:	6d c0       	rjmp	.+218    	; 0x13d4 <nwkSecurityTaskHandler+0xf2>
    return;

  if (nwkSecurityActiveFrame)
    12fa:	80 91 94 02 	lds	r24, 0x0294
    12fe:	90 91 95 02 	lds	r25, 0x0295
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	09 f4       	brne	.+2      	; 0x1308 <nwkSecurityTaskHandler+0x26>
    1306:	3e c0       	rjmp	.+124    	; 0x1384 <nwkSecurityTaskHandler+0xa2>
  {
    if (NWK_SECURITY_STATE_CONFIRM == nwkSecurityActiveFrame->state)
    1308:	80 91 94 02 	lds	r24, 0x0294
    130c:	90 91 95 02 	lds	r25, 0x0295
    1310:	fc 01       	movw	r30, r24
    1312:	80 81       	ld	r24, Z
    1314:	84 33       	cpi	r24, 0x34	; 52
    1316:	f9 f4       	brne	.+62     	; 0x1356 <nwkSecurityTaskHandler+0x74>
    {
      bool micStatus = nwkSecurityProcessMic();
    1318:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <nwkSecurityProcessMic>
    131c:	8b 83       	std	Y+3, r24	; 0x03

      if (nwkSecurityEncrypt)
    131e:	80 91 98 02 	lds	r24, 0x0298
    1322:	88 23       	and	r24, r24
    1324:	39 f0       	breq	.+14     	; 0x1334 <nwkSecurityTaskHandler+0x52>
        nwkTxEncryptConf(nwkSecurityActiveFrame);
    1326:	80 91 94 02 	lds	r24, 0x0294
    132a:	90 91 95 02 	lds	r25, 0x0295
    132e:	0e 94 48 14 	call	0x2890	; 0x2890 <nwkTxEncryptConf>
    1332:	07 c0       	rjmp	.+14     	; 0x1342 <nwkSecurityTaskHandler+0x60>
      else
        nwkRxDecryptConf(nwkSecurityActiveFrame, micStatus);
    1334:	80 91 94 02 	lds	r24, 0x0294
    1338:	90 91 95 02 	lds	r25, 0x0295
    133c:	6b 81       	ldd	r22, Y+3	; 0x03
    133e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <nwkRxDecryptConf>

      nwkSecurityActiveFrame = NULL;
    1342:	10 92 95 02 	sts	0x0295, r1
    1346:	10 92 94 02 	sts	0x0294, r1
      --nwkSecurityActiveFrames;
    134a:	80 91 93 02 	lds	r24, 0x0293
    134e:	81 50       	subi	r24, 0x01	; 1
    1350:	80 93 93 02 	sts	0x0293, r24
    {
      nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
      SYS_EncryptReq((uint8_t *)nwkSecurityVector, (uint8_t *)nwkIb.key);
    }

    return;
    1354:	41 c0       	rjmp	.+130    	; 0x13d8 <nwkSecurityTaskHandler+0xf6>
        nwkRxDecryptConf(nwkSecurityActiveFrame, micStatus);

      nwkSecurityActiveFrame = NULL;
      --nwkSecurityActiveFrames;
    }
    else if (NWK_SECURITY_STATE_PROCESS == nwkSecurityActiveFrame->state)
    1356:	80 91 94 02 	lds	r24, 0x0294
    135a:	90 91 95 02 	lds	r25, 0x0295
    135e:	fc 01       	movw	r30, r24
    1360:	80 81       	ld	r24, Z
    1362:	82 33       	cpi	r24, 0x32	; 50
    1364:	c9 f5       	brne	.+114    	; 0x13d8 <nwkSecurityTaskHandler+0xf6>
    {
      nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    1366:	80 91 94 02 	lds	r24, 0x0294
    136a:	90 91 95 02 	lds	r25, 0x0295
    136e:	23 e3       	ldi	r18, 0x33	; 51
    1370:	fc 01       	movw	r30, r24
    1372:	20 83       	st	Z, r18
      SYS_EncryptReq((uint8_t *)nwkSecurityVector, (uint8_t *)nwkIb.key);
    1374:	89 e9       	ldi	r24, 0x99	; 153
    1376:	92 e0       	ldi	r25, 0x02	; 2
    1378:	24 e2       	ldi	r18, 0x24	; 36
    137a:	38 e0       	ldi	r19, 0x08	; 8
    137c:	b9 01       	movw	r22, r18
    137e:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <SYS_EncryptReq>
    }

    return;
    1382:	2a c0       	rjmp	.+84     	; 0x13d8 <nwkSecurityTaskHandler+0xf6>
  }

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1384:	1a 82       	std	Y+2, r1	; 0x02
    1386:	19 82       	std	Y+1, r1	; 0x01
    1388:	1f c0       	rjmp	.+62     	; 0x13c8 <nwkSecurityTaskHandler+0xe6>
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <nwkFrameByIndex>
    1390:	9d 83       	std	Y+5, r25	; 0x05
    1392:	8c 83       	std	Y+4, r24	; 0x04

    if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	9d 81       	ldd	r25, Y+5	; 0x05
    1398:	fc 01       	movw	r30, r24
    139a:	80 81       	ld	r24, Z
    139c:	80 33       	cpi	r24, 0x30	; 48
    139e:	31 f0       	breq	.+12     	; 0x13ac <nwkSecurityTaskHandler+0xca>
        NWK_SECURITY_STATE_DECRYPT_PENDING == frame->state)
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	9d 81       	ldd	r25, Y+5	; 0x05
    13a4:	fc 01       	movw	r30, r24
    13a6:	80 81       	ld	r24, Z

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);

    if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    13a8:	81 33       	cpi	r24, 0x31	; 49
    13aa:	49 f4       	brne	.+18     	; 0x13be <nwkSecurityTaskHandler+0xdc>
        NWK_SECURITY_STATE_DECRYPT_PENDING == frame->state)
    {
      nwkSecurityActiveFrame = frame;
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	90 93 95 02 	sts	0x0295, r25
    13b4:	80 93 94 02 	sts	0x0294, r24
      nwkSecurityStart();
    13b8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <nwkSecurityStart>
      return;
    13bc:	0e c0       	rjmp	.+28     	; 0x13da <nwkSecurityTaskHandler+0xf8>
    }

    return;
  }

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	9a 81       	ldd	r25, Y+2	; 0x02
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	9a 83       	std	Y+2, r25	; 0x02
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	9a 81       	ldd	r25, Y+2	; 0x02
    13cc:	83 30       	cpi	r24, 0x03	; 3
    13ce:	91 05       	cpc	r25, r1
    13d0:	e4 f2       	brlt	.-72     	; 0x138a <nwkSecurityTaskHandler+0xa8>
    13d2:	03 c0       	rjmp	.+6      	; 0x13da <nwkSecurityTaskHandler+0xf8>
/*****************************************************************************
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
  if (0 == nwkSecurityActiveFrames)
    return;
    13d4:	00 00       	nop
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <nwkSecurityTaskHandler+0xf8>
    {
      nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
      SYS_EncryptReq((uint8_t *)nwkSecurityVector, (uint8_t *)nwkIb.key);
    }

    return;
    13d8:	00 00       	nop
      nwkSecurityActiveFrame = frame;
      nwkSecurityStart();
      return;
    }
  }
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

000013ea <nwkFrameInit>:
static NwkFrame_t nwkFrameFrames[NWK_BUFFERS_AMOUNT];

/*****************************************************************************
*****************************************************************************/
void nwkFrameInit(void)
{
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <nwkFrameInit+0x6>
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    13f4:	1a 82       	std	Y+2, r1	; 0x02
    13f6:	19 82       	std	Y+1, r1	; 0x01
    13f8:	14 c0       	rjmp	.+40     	; 0x1422 <nwkFrameInit+0x38>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    13fa:	49 81       	ldd	r20, Y+1	; 0x01
    13fc:	5a 81       	ldd	r21, Y+2	; 0x02
    13fe:	25 e8       	ldi	r18, 0x85	; 133
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	42 9f       	mul	r20, r18
    1404:	c0 01       	movw	r24, r0
    1406:	43 9f       	mul	r20, r19
    1408:	90 0d       	add	r25, r0
    140a:	52 9f       	mul	r21, r18
    140c:	90 0d       	add	r25, r0
    140e:	11 24       	eor	r1, r1
    1410:	87 55       	subi	r24, 0x57	; 87
    1412:	9d 4f       	sbci	r25, 0xFD	; 253
    1414:	fc 01       	movw	r30, r24
    1416:	10 82       	st	Z, r1

/*****************************************************************************
*****************************************************************************/
void nwkFrameInit(void)
{
  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	91 05       	cpc	r25, r1
    142a:	3c f3       	brlt	.-50     	; 0x13fa <nwkFrameInit+0x10>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	08 95       	ret

00001436 <nwkFrameAlloc>:
/*****************************************************************************
	Allocate a buffer, if one is available.  Returns a pointer to the frame, if
	one is available, or NULL otherwise.
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(uint8_t size)
{
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	00 d0       	rcall	.+0      	; 0x143c <nwkFrameAlloc+0x6>
    143c:	0f 92       	push	r0
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	8b 83       	std	Y+3, r24	; 0x03
  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1444:	1a 82       	std	Y+2, r1	; 0x02
    1446:	19 82       	std	Y+1, r1	; 0x01
    1448:	36 c0       	rjmp	.+108    	; 0x14b6 <nwkFrameAlloc+0x80>
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    144a:	49 81       	ldd	r20, Y+1	; 0x01
    144c:	5a 81       	ldd	r21, Y+2	; 0x02
    144e:	25 e8       	ldi	r18, 0x85	; 133
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	42 9f       	mul	r20, r18
    1454:	c0 01       	movw	r24, r0
    1456:	43 9f       	mul	r20, r19
    1458:	90 0d       	add	r25, r0
    145a:	52 9f       	mul	r21, r18
    145c:	90 0d       	add	r25, r0
    145e:	11 24       	eor	r1, r1
    1460:	87 55       	subi	r24, 0x57	; 87
    1462:	9d 4f       	sbci	r25, 0xFD	; 253
    1464:	fc 01       	movw	r30, r24
    1466:	80 81       	ld	r24, Z
    1468:	88 23       	and	r24, r24
    146a:	01 f5       	brne	.+64     	; 0x14ac <nwkFrameAlloc+0x76>
    {
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t) + size;
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	68 2f       	mov	r22, r24
    1470:	60 5f       	subi	r22, 0xF0	; 240
    1472:	49 81       	ldd	r20, Y+1	; 0x01
    1474:	5a 81       	ldd	r21, Y+2	; 0x02
    1476:	25 e8       	ldi	r18, 0x85	; 133
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	42 9f       	mul	r20, r18
    147c:	c0 01       	movw	r24, r0
    147e:	43 9f       	mul	r20, r19
    1480:	90 0d       	add	r25, r0
    1482:	52 9f       	mul	r21, r18
    1484:	90 0d       	add	r25, r0
    1486:	11 24       	eor	r1, r1
    1488:	86 55       	subi	r24, 0x56	; 86
    148a:	9d 4f       	sbci	r25, 0xFD	; 253
    148c:	fc 01       	movw	r30, r24
    148e:	60 83       	st	Z, r22
      return &nwkFrameFrames[i];
    1490:	49 81       	ldd	r20, Y+1	; 0x01
    1492:	5a 81       	ldd	r21, Y+2	; 0x02
    1494:	25 e8       	ldi	r18, 0x85	; 133
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	42 9f       	mul	r20, r18
    149a:	c0 01       	movw	r24, r0
    149c:	43 9f       	mul	r20, r19
    149e:	90 0d       	add	r25, r0
    14a0:	52 9f       	mul	r21, r18
    14a2:	90 0d       	add	r25, r0
    14a4:	11 24       	eor	r1, r1
    14a6:	87 55       	subi	r24, 0x57	; 87
    14a8:	9d 4f       	sbci	r25, 0xFD	; 253
    14aa:	0c c0       	rjmp	.+24     	; 0x14c4 <nwkFrameAlloc+0x8e>
	Allocate a buffer, if one is available.  Returns a pointer to the frame, if
	one is available, or NULL otherwise.
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(uint8_t size)
{
  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	9a 83       	std	Y+2, r25	; 0x02
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	83 30       	cpi	r24, 0x03	; 3
    14bc:	91 05       	cpc	r25, r1
    14be:	2c f2       	brlt	.-118    	; 0x144a <nwkFrameAlloc+0x14>
    {
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t) + size;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
}
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	08 95       	ret

000014d0 <nwkFrameFree>:

/*****************************************************************************
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <nwkFrameFree+0x6>
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01
  frame->state = NWK_FRAME_STATE_FREE;
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	9a 81       	ldd	r25, Y+2	; 0x02
    14e2:	fc 01       	movw	r30, r24
    14e4:	10 82       	st	Z, r1
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	08 95       	ret

000014f0 <nwkFrameByIndex>:

/*****************************************************************************
*****************************************************************************/
NwkFrame_t *nwkFrameByIndex(uint8_t i)
{
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	0f 92       	push	r0
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	89 83       	std	Y+1, r24	; 0x01
  return &nwkFrameFrames[i];
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	48 2f       	mov	r20, r24
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	25 e8       	ldi	r18, 0x85	; 133
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	42 9f       	mul	r20, r18
    1508:	c0 01       	movw	r24, r0
    150a:	43 9f       	mul	r20, r19
    150c:	90 0d       	add	r25, r0
    150e:	52 9f       	mul	r21, r18
    1510:	90 0d       	add	r25, r0
    1512:	11 24       	eor	r1, r1
    1514:	87 55       	subi	r24, 0x57	; 87
    1516:	9d 4f       	sbci	r25, 0xFD	; 253
}
    1518:	0f 90       	pop	r0
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <nwkFrameCommandInit>:

/*****************************************************************************
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	00 d0       	rcall	.+0      	; 0x1526 <nwkFrameCommandInit+0x6>
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	9a 83       	std	Y+2, r25	; 0x02
    152c:	89 83       	std	Y+1, r24	; 0x01
  frame->tx.status = NWK_SUCCESS_STATUS;
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	9a 81       	ldd	r25, Y+2	; 0x02
    1532:	81 58       	subi	r24, 0x81	; 129
    1534:	9f 4f       	sbci	r25, 0xFF	; 255
    1536:	fc 01       	movw	r30, r24
    1538:	10 82       	st	Z, r1
  frame->tx.timeout = 0;
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	80 58       	subi	r24, 0x80	; 128
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	fc 01       	movw	r30, r24
    1544:	11 82       	std	Z+1, r1	; 0x01
    1546:	10 82       	st	Z, r1
  frame->tx.control = 0;
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	8e 57       	subi	r24, 0x7E	; 126
    154e:	9f 4f       	sbci	r25, 0xFF	; 255
    1550:	fc 01       	movw	r30, r24
    1552:	10 82       	st	Z, r1
  frame->tx.confirm = NULL;
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	8d 57       	subi	r24, 0x7D	; 125
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	fc 01       	movw	r30, r24
    155e:	11 82       	std	Z+1, r1	; 0x01
    1560:	10 82       	st	Z, r1

  frame->data.header.nwkFcf.ackRequest = 0;
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	9a 81       	ldd	r25, Y+2	; 0x02
    1566:	fc 01       	movw	r30, r24
    1568:	23 85       	ldd	r18, Z+11	; 0x0b
    156a:	2e 7f       	andi	r18, 0xFE	; 254
    156c:	fc 01       	movw	r30, r24
    156e:	23 87       	std	Z+11, r18	; 0x0b
  frame->data.header.nwkFcf.securityEnabled = 0;
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	9a 81       	ldd	r25, Y+2	; 0x02
    1574:	fc 01       	movw	r30, r24
    1576:	23 85       	ldd	r18, Z+11	; 0x0b
    1578:	2d 7f       	andi	r18, 0xFD	; 253
    157a:	fc 01       	movw	r30, r24
    157c:	23 87       	std	Z+11, r18	; 0x0b
  frame->data.header.nwkFcf.linkLocal = 0;
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	9a 81       	ldd	r25, Y+2	; 0x02
    1582:	fc 01       	movw	r30, r24
    1584:	23 85       	ldd	r18, Z+11	; 0x0b
    1586:	2b 7f       	andi	r18, 0xFB	; 251
    1588:	fc 01       	movw	r30, r24
    158a:	23 87       	std	Z+11, r18	; 0x0b
  frame->data.header.nwkFcf.reserved = 0;
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	fc 01       	movw	r30, r24
    1592:	23 85       	ldd	r18, Z+11	; 0x0b
    1594:	27 70       	andi	r18, 0x07	; 7
    1596:	fc 01       	movw	r30, r24
    1598:	23 87       	std	Z+11, r18	; 0x0b
  frame->data.header.nwkSeq = ++nwkIb.nwkSeqNum;
    159a:	80 91 1a 08 	lds	r24, 0x081A
    159e:	8f 5f       	subi	r24, 0xFF	; 255
    15a0:	80 93 1a 08 	sts	0x081A, r24
    15a4:	20 91 1a 08 	lds	r18, 0x081A
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	9a 81       	ldd	r25, Y+2	; 0x02
    15ac:	fc 01       	movw	r30, r24
    15ae:	24 87       	std	Z+12, r18	; 0x0c
  frame->data.header.nwkSrcAddr = nwkIb.addr;
    15b0:	20 91 16 08 	lds	r18, 0x0816
    15b4:	30 91 17 08 	lds	r19, 0x0817
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	fc 01       	movw	r30, r24
    15be:	36 87       	std	Z+14, r19	; 0x0e
    15c0:	25 87       	std	Z+13, r18	; 0x0d
  frame->data.header.nwkDstAddr = 0;
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	fc 01       	movw	r30, r24
    15c8:	10 8a       	std	Z+16, r1	; 0x10
    15ca:	17 86       	std	Z+15, r1	; 0x0f
  frame->data.header.nwkSrcEndpoint = 0;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	fc 01       	movw	r30, r24
    15d2:	21 89       	ldd	r18, Z+17	; 0x11
    15d4:	20 7f       	andi	r18, 0xF0	; 240
    15d6:	fc 01       	movw	r30, r24
    15d8:	21 8b       	std	Z+17, r18	; 0x11
  frame->data.header.nwkDstEndpoint = 0;
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	fc 01       	movw	r30, r24
    15e0:	21 89       	ldd	r18, Z+17	; 0x11
    15e2:	2f 70       	andi	r18, 0x0F	; 15
    15e4:	fc 01       	movw	r30, r24
    15e6:	21 8b       	std	Z+17, r18	; 0x11
}
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	08 95       	ret

000015f2 <nwkRouteInit>:
static NwkRouteTableRecord_t nwkRouteTable[NWK_ROUTE_TABLE_SIZE];

/*****************************************************************************
*****************************************************************************/
void nwkRouteInit(void)
{
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	0f 92       	push	r0
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    15fc:	19 82       	std	Y+1, r1	; 0x01
    15fe:	14 c0       	rjmp	.+40     	; 0x1628 <nwkRouteInit+0x36>
    nwkRouteTable[i].dst = NWK_ROUTE_UNKNOWN;
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	c9 01       	movw	r24, r18
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	82 0f       	add	r24, r18
    160e:	93 1f       	adc	r25, r19
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	88 5c       	subi	r24, 0xC8	; 200
    1616:	9b 4f       	sbci	r25, 0xFB	; 251
    1618:	2f ef       	ldi	r18, 0xFF	; 255
    161a:	3f ef       	ldi	r19, 0xFF	; 255
    161c:	fc 01       	movw	r30, r24
    161e:	31 83       	std	Z+1, r19	; 0x01
    1620:	20 83       	st	Z, r18

/*****************************************************************************
*****************************************************************************/
void nwkRouteInit(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	8f 5f       	subi	r24, 0xFF	; 255
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	84 36       	cpi	r24, 0x64	; 100
    162c:	48 f3       	brcs	.-46     	; 0x1600 <nwkRouteInit+0xe>
    nwkRouteTable[i].dst = NWK_ROUTE_UNKNOWN;
}
    162e:	0f 90       	pop	r0
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	08 95       	ret

00001636 <nwkRouteFindRecord>:

/*****************************************************************************
*****************************************************************************/
static NwkRouteTableRecord_t *nwkRouteFindRecord(uint16_t dst)
{
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	00 d0       	rcall	.+0      	; 0x163c <nwkRouteFindRecord+0x6>
    163c:	0f 92       	push	r0
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	9b 83       	std	Y+3, r25	; 0x03
    1644:	8a 83       	std	Y+2, r24	; 0x02
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1646:	19 82       	std	Y+1, r1	; 0x01
    1648:	24 c0       	rjmp	.+72     	; 0x1692 <nwkRouteFindRecord+0x5c>
    if (nwkRouteTable[i].dst == dst)
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	c9 01       	movw	r24, r18
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	82 0f       	add	r24, r18
    1658:	93 1f       	adc	r25, r19
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	88 5c       	subi	r24, 0xC8	; 200
    1660:	9b 4f       	sbci	r25, 0xFB	; 251
    1662:	fc 01       	movw	r30, r24
    1664:	20 81       	ld	r18, Z
    1666:	31 81       	ldd	r19, Z+1	; 0x01
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	9b 81       	ldd	r25, Y+3	; 0x03
    166c:	28 17       	cp	r18, r24
    166e:	39 07       	cpc	r19, r25
    1670:	69 f4       	brne	.+26     	; 0x168c <nwkRouteFindRecord+0x56>
      return &nwkRouteTable[i];
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	c9 01       	movw	r24, r18
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	82 0f       	add	r24, r18
    1680:	93 1f       	adc	r25, r19
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	88 5c       	subi	r24, 0xC8	; 200
    1688:	9b 4f       	sbci	r25, 0xFB	; 251
    168a:	11 c0       	rjmp	.+34     	; 0x16ae <nwkRouteFindRecord+0x78>

/*****************************************************************************
*****************************************************************************/
static NwkRouteTableRecord_t *nwkRouteFindRecord(uint16_t dst)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	84 36       	cpi	r24, 0x64	; 100
    1696:	c8 f2       	brcs	.-78     	; 0x164a <nwkRouteFindRecord+0x14>
    if (nwkRouteTable[i].dst == dst)
      return &nwkRouteTable[i];

  if (NWK_ROUTE_UNKNOWN == dst)
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	9b 81       	ldd	r25, Y+3	; 0x03
    169c:	ff ef       	ldi	r31, 0xFF	; 255
    169e:	8f 3f       	cpi	r24, 0xFF	; 255
    16a0:	9f 07       	cpc	r25, r31
    16a2:	19 f4       	brne	.+6      	; 0x16aa <nwkRouteFindRecord+0x74>
    return &nwkRouteTable[NWK_ROUTE_TABLE_SIZE - 1];
    16a4:	8a e8       	ldi	r24, 0x8A	; 138
    16a6:	96 e0       	ldi	r25, 0x06	; 6
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <nwkRouteFindRecord+0x78>

  return NULL;
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
}
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <nwkRouteRemove>:

/*****************************************************************************
*****************************************************************************/
void nwkRouteRemove(uint16_t dst)
{
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <nwkRouteRemove+0x6>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <nwkRouteRemove+0x8>
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	9c 83       	std	Y+4, r25	; 0x04
    16c8:	8b 83       	std	Y+3, r24	; 0x03
  NwkRouteTableRecord_t *rec;

  rec = nwkRouteFindRecord(dst);
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	0e 94 1b 0b 	call	0x1636	; 0x1636 <nwkRouteFindRecord>
    16d2:	9a 83       	std	Y+2, r25	; 0x02
    16d4:	89 83       	std	Y+1, r24	; 0x01
  if (rec)
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	39 f0       	breq	.+14     	; 0x16ec <nwkRouteRemove+0x32>
    rec->dst = NWK_ROUTE_UNKNOWN;
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	2f ef       	ldi	r18, 0xFF	; 255
    16e4:	3f ef       	ldi	r19, 0xFF	; 255
    16e6:	fc 01       	movw	r30, r24
    16e8:	31 83       	std	Z+1, r19	; 0x01
    16ea:	20 83       	st	Z, r18
}
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <nwkRouteFrameReceived>:

/*****************************************************************************
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <nwkRouteFrameReceived+0x6>
    1700:	00 d0       	rcall	.+0      	; 0x1702 <nwkRouteFrameReceived+0x8>
    1702:	00 d0       	rcall	.+0      	; 0x1704 <nwkRouteFrameReceived+0xa>
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
  NwkRouteTableRecord_t *rec;
  NwkFrameHeader_t *header = &frame->data.header;
    170c:	8d 81       	ldd	r24, Y+5	; 0x05
    170e:	9e 81       	ldd	r25, Y+6	; 0x06
    1710:	02 96       	adiw	r24, 0x02	; 2
    1712:	9c 83       	std	Y+4, r25	; 0x04
    1714:	8b 83       	std	Y+3, r24	; 0x03

  if ((header->macSrcAddr & NWK_ROUTE_TRANSIT_MASK) &&
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	9c 81       	ldd	r25, Y+4	; 0x04
    171a:	fc 01       	movw	r30, r24
    171c:	87 81       	ldd	r24, Z+7	; 0x07
    171e:	90 85       	ldd	r25, Z+8	; 0x08
    1720:	99 23       	and	r25, r25
    1722:	74 f4       	brge	.+28     	; 0x1740 <nwkRouteFrameReceived+0x46>
      (header->macSrcAddr != header->nwkSrcAddr))
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	fc 01       	movw	r30, r24
    172a:	27 81       	ldd	r18, Z+7	; 0x07
    172c:	30 85       	ldd	r19, Z+8	; 0x08
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	fc 01       	movw	r30, r24
    1734:	83 85       	ldd	r24, Z+11	; 0x0b
    1736:	94 85       	ldd	r25, Z+12	; 0x0c
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
  NwkRouteTableRecord_t *rec;
  NwkFrameHeader_t *header = &frame->data.header;

  if ((header->macSrcAddr & NWK_ROUTE_TRANSIT_MASK) &&
    1738:	28 17       	cp	r18, r24
    173a:	39 07       	cpc	r19, r25
    173c:	09 f0       	breq	.+2      	; 0x1740 <nwkRouteFrameReceived+0x46>
    173e:	6a c0       	rjmp	.+212    	; 0x1814 <nwkRouteFrameReceived+0x11a>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (0xffff == header->macDstPanId)
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	fc 01       	movw	r30, r24
    1746:	83 81       	ldd	r24, Z+3	; 0x03
    1748:	94 81       	ldd	r25, Z+4	; 0x04
    174a:	ff ef       	ldi	r31, 0xFF	; 255
    174c:	8f 3f       	cpi	r24, 0xFF	; 255
    174e:	9f 07       	cpc	r25, r31
    1750:	09 f4       	brne	.+2      	; 0x1754 <nwkRouteFrameReceived+0x5a>
    1752:	62 c0       	rjmp	.+196    	; 0x1818 <nwkRouteFrameReceived+0x11e>
    return;

  rec = nwkRouteFindRecord(header->nwkSrcAddr);
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	9c 81       	ldd	r25, Y+4	; 0x04
    1758:	fc 01       	movw	r30, r24
    175a:	83 85       	ldd	r24, Z+11	; 0x0b
    175c:	94 85       	ldd	r25, Z+12	; 0x0c
    175e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <nwkRouteFindRecord>
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
  if (rec)
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	9a 81       	ldd	r25, Y+2	; 0x02
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	49 f1       	breq	.+82     	; 0x17c0 <nwkRouteFrameReceived+0xc6>
  {
    if (rec->nextHop != header->macSrcAddr && frame->rx.lqi > rec->lqi)
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	9a 81       	ldd	r25, Y+2	; 0x02
    1772:	fc 01       	movw	r30, r24
    1774:	22 81       	ldd	r18, Z+2	; 0x02
    1776:	33 81       	ldd	r19, Z+3	; 0x03
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	9c 81       	ldd	r25, Y+4	; 0x04
    177c:	fc 01       	movw	r30, r24
    177e:	87 81       	ldd	r24, Z+7	; 0x07
    1780:	90 85       	ldd	r25, Z+8	; 0x08
    1782:	28 17       	cp	r18, r24
    1784:	39 07       	cpc	r19, r25
    1786:	d9 f1       	breq	.+118    	; 0x17fe <nwkRouteFrameReceived+0x104>
    1788:	8d 81       	ldd	r24, Y+5	; 0x05
    178a:	9e 81       	ldd	r25, Y+6	; 0x06
    178c:	81 58       	subi	r24, 0x81	; 129
    178e:	9f 4f       	sbci	r25, 0xFF	; 255
    1790:	fc 01       	movw	r30, r24
    1792:	20 81       	ld	r18, Z
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	fc 01       	movw	r30, r24
    179a:	85 81       	ldd	r24, Z+5	; 0x05
    179c:	82 17       	cp	r24, r18
    179e:	78 f5       	brcc	.+94     	; 0x17fe <nwkRouteFrameReceived+0x104>
    {
      rec->nextHop = header->macSrcAddr;
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	fc 01       	movw	r30, r24
    17a6:	27 81       	ldd	r18, Z+7	; 0x07
    17a8:	30 85       	ldd	r19, Z+8	; 0x08
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	9a 81       	ldd	r25, Y+2	; 0x02
    17ae:	fc 01       	movw	r30, r24
    17b0:	33 83       	std	Z+3, r19	; 0x03
    17b2:	22 83       	std	Z+2, r18	; 0x02
      rec->score = NWK_ROUTE_DEFAULT_SCORE;
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	9a 81       	ldd	r25, Y+2	; 0x02
    17b8:	23 e0       	ldi	r18, 0x03	; 3
    17ba:	fc 01       	movw	r30, r24
    17bc:	24 83       	std	Z+4, r18	; 0x04
    17be:	1f c0       	rjmp	.+62     	; 0x17fe <nwkRouteFrameReceived+0x104>
    }
  }
  else
  {
    rec = nwkRouteFindRecord(NWK_ROUTE_UNKNOWN);
    17c0:	8f ef       	ldi	r24, 0xFF	; 255
    17c2:	9f ef       	ldi	r25, 0xFF	; 255
    17c4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <nwkRouteFindRecord>
    17c8:	9a 83       	std	Y+2, r25	; 0x02
    17ca:	89 83       	std	Y+1, r24	; 0x01

    rec->dst = header->nwkSrcAddr;
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	9c 81       	ldd	r25, Y+4	; 0x04
    17d0:	fc 01       	movw	r30, r24
    17d2:	23 85       	ldd	r18, Z+11	; 0x0b
    17d4:	34 85       	ldd	r19, Z+12	; 0x0c
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	fc 01       	movw	r30, r24
    17dc:	31 83       	std	Z+1, r19	; 0x01
    17de:	20 83       	st	Z, r18
    rec->nextHop = header->macSrcAddr;
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	fc 01       	movw	r30, r24
    17e6:	27 81       	ldd	r18, Z+7	; 0x07
    17e8:	30 85       	ldd	r19, Z+8	; 0x08
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	fc 01       	movw	r30, r24
    17f0:	33 83       	std	Z+3, r19	; 0x03
    17f2:	22 83       	std	Z+2, r18	; 0x02
    rec->score = NWK_ROUTE_DEFAULT_SCORE;
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	23 e0       	ldi	r18, 0x03	; 3
    17fa:	fc 01       	movw	r30, r24
    17fc:	24 83       	std	Z+4, r18	; 0x04
  }

  rec->lqi = frame->rx.lqi;
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	9e 81       	ldd	r25, Y+6	; 0x06
    1802:	81 58       	subi	r24, 0x81	; 129
    1804:	9f 4f       	sbci	r25, 0xFF	; 255
    1806:	fc 01       	movw	r30, r24
    1808:	20 81       	ld	r18, Z
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	9a 81       	ldd	r25, Y+2	; 0x02
    180e:	fc 01       	movw	r30, r24
    1810:	25 83       	std	Z+5, r18	; 0x05
    1812:	03 c0       	rjmp	.+6      	; 0x181a <nwkRouteFrameReceived+0x120>
  NwkRouteTableRecord_t *rec;
  NwkFrameHeader_t *header = &frame->data.header;

  if ((header->macSrcAddr & NWK_ROUTE_TRANSIT_MASK) &&
      (header->macSrcAddr != header->nwkSrcAddr))
    return;
    1814:	00 00       	nop
    1816:	01 c0       	rjmp	.+2      	; 0x181a <nwkRouteFrameReceived+0x120>

  if (0xffff == header->macDstPanId)
    return;
    1818:	00 00       	nop
    rec->nextHop = header->macSrcAddr;
    rec->score = NWK_ROUTE_DEFAULT_SCORE;
  }

  rec->lqi = frame->rx.lqi;
}
    181a:	26 96       	adiw	r28, 0x06	; 6
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <nwkRouteFrameSent>:

/*****************************************************************************
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	2c 97       	sbiw	r28, 0x0c	; 12
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
    1840:	9c 87       	std	Y+12, r25	; 0x0c
    1842:	8b 87       	std	Y+11, r24	; 0x0b
  NwkRouteTableRecord_t *rec;

  rec = nwkRouteFindRecord(frame->data.header.nwkDstAddr);
    1844:	8b 85       	ldd	r24, Y+11	; 0x0b
    1846:	9c 85       	ldd	r25, Y+12	; 0x0c
    1848:	fc 01       	movw	r30, r24
    184a:	87 85       	ldd	r24, Z+15	; 0x0f
    184c:	90 89       	ldd	r25, Z+16	; 0x10
    184e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <nwkRouteFindRecord>
    1852:	9a 83       	std	Y+2, r25	; 0x02
    1854:	89 83       	std	Y+1, r24	; 0x01
  if (NULL == rec)
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	9a 81       	ldd	r25, Y+2	; 0x02
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	09 f4       	brne	.+2      	; 0x1860 <nwkRouteFrameSent+0x34>
    185e:	65 c0       	rjmp	.+202    	; 0x192a <nwkRouteFrameSent+0xfe>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    1860:	8b 85       	ldd	r24, Y+11	; 0x0b
    1862:	9c 85       	ldd	r25, Y+12	; 0x0c
    1864:	81 58       	subi	r24, 0x81	; 129
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	fc 01       	movw	r30, r24
    186a:	80 81       	ld	r24, Z
    186c:	88 23       	and	r24, r24
    186e:	31 f4       	brne	.+12     	; 0x187c <nwkRouteFrameSent+0x50>
  {
    rec->score = NWK_ROUTE_DEFAULT_SCORE;
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	9a 81       	ldd	r25, Y+2	; 0x02
    1874:	23 e0       	ldi	r18, 0x03	; 3
    1876:	fc 01       	movw	r30, r24
    1878:	24 83       	std	Z+4, r18	; 0x04
    187a:	18 c0       	rjmp	.+48     	; 0x18ac <nwkRouteFrameSent+0x80>
  }
  else
  {
    rec->score--;
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	fc 01       	movw	r30, r24
    1882:	84 81       	ldd	r24, Z+4	; 0x04
    1884:	28 2f       	mov	r18, r24
    1886:	21 50       	subi	r18, 0x01	; 1
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	9a 81       	ldd	r25, Y+2	; 0x02
    188c:	fc 01       	movw	r30, r24
    188e:	24 83       	std	Z+4, r18	; 0x04
    if (0 == rec->score)
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	fc 01       	movw	r30, r24
    1896:	84 81       	ldd	r24, Z+4	; 0x04
    1898:	88 23       	and	r24, r24
    189a:	41 f4       	brne	.+16     	; 0x18ac <nwkRouteFrameSent+0x80>
    {
      rec->dst = NWK_ROUTE_UNKNOWN;
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
    18a0:	2f ef       	ldi	r18, 0xFF	; 255
    18a2:	3f ef       	ldi	r19, 0xFF	; 255
    18a4:	fc 01       	movw	r30, r24
    18a6:	31 83       	std	Z+1, r19	; 0x01
    18a8:	20 83       	st	Z, r18
      return;
    18aa:	40 c0       	rjmp	.+128    	; 0x192c <nwkRouteFrameSent+0x100>
    }
  }

  if ((rec - &nwkRouteTable[0]) > 0)
    18ac:	29 81       	ldd	r18, Y+1	; 0x01
    18ae:	3a 81       	ldd	r19, Y+2	; 0x02
    18b0:	88 e3       	ldi	r24, 0x38	; 56
    18b2:	94 e0       	ldi	r25, 0x04	; 4
    18b4:	a9 01       	movw	r20, r18
    18b6:	48 1b       	sub	r20, r24
    18b8:	59 0b       	sbc	r21, r25
    18ba:	ca 01       	movw	r24, r20
    18bc:	86 30       	cpi	r24, 0x06	; 6
    18be:	91 05       	cpc	r25, r1
    18c0:	ac f1       	brlt	.+106    	; 0x192c <nwkRouteFrameSent+0x100>
  {
    NwkRouteTableRecord_t *prev = rec - 1;
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	9a 81       	ldd	r25, Y+2	; 0x02
    18c6:	06 97       	sbiw	r24, 0x06	; 6
    18c8:	9c 83       	std	Y+4, r25	; 0x04
    18ca:	8b 83       	std	Y+3, r24	; 0x03
    NwkRouteTableRecord_t tmp;

    tmp = *prev;
    18cc:	2b 81       	ldd	r18, Y+3	; 0x03
    18ce:	3c 81       	ldd	r19, Y+4	; 0x04
    18d0:	ce 01       	movw	r24, r28
    18d2:	05 96       	adiw	r24, 0x05	; 5
    18d4:	46 e0       	ldi	r20, 0x06	; 6
    18d6:	f9 01       	movw	r30, r18
    18d8:	00 80       	ld	r0, Z
    18da:	2f 5f       	subi	r18, 0xFF	; 255
    18dc:	3f 4f       	sbci	r19, 0xFF	; 255
    18de:	fc 01       	movw	r30, r24
    18e0:	00 82       	st	Z, r0
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	41 50       	subi	r20, 0x01	; 1
    18e6:	44 23       	and	r20, r20
    18e8:	b1 f7       	brne	.-20     	; 0x18d6 <nwkRouteFrameSent+0xaa>
    *prev = *rec;
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	29 81       	ldd	r18, Y+1	; 0x01
    18f0:	3a 81       	ldd	r19, Y+2	; 0x02
    18f2:	46 e0       	ldi	r20, 0x06	; 6
    18f4:	f9 01       	movw	r30, r18
    18f6:	00 80       	ld	r0, Z
    18f8:	2f 5f       	subi	r18, 0xFF	; 255
    18fa:	3f 4f       	sbci	r19, 0xFF	; 255
    18fc:	fc 01       	movw	r30, r24
    18fe:	00 82       	st	Z, r0
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	41 50       	subi	r20, 0x01	; 1
    1904:	44 23       	and	r20, r20
    1906:	b1 f7       	brne	.-20     	; 0x18f4 <nwkRouteFrameSent+0xc8>
    *rec = tmp;
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	9e 01       	movw	r18, r28
    190e:	2b 5f       	subi	r18, 0xFB	; 251
    1910:	3f 4f       	sbci	r19, 0xFF	; 255
    1912:	46 e0       	ldi	r20, 0x06	; 6
    1914:	f9 01       	movw	r30, r18
    1916:	00 80       	ld	r0, Z
    1918:	2f 5f       	subi	r18, 0xFF	; 255
    191a:	3f 4f       	sbci	r19, 0xFF	; 255
    191c:	fc 01       	movw	r30, r24
    191e:	00 82       	st	Z, r0
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	41 50       	subi	r20, 0x01	; 1
    1924:	44 23       	and	r20, r20
    1926:	b1 f7       	brne	.-20     	; 0x1914 <nwkRouteFrameSent+0xe8>
    1928:	01 c0       	rjmp	.+2      	; 0x192c <nwkRouteFrameSent+0x100>
{
  NwkRouteTableRecord_t *rec;

  rec = nwkRouteFindRecord(frame->data.header.nwkDstAddr);
  if (NULL == rec)
    return;
    192a:	00 00       	nop

    tmp = *prev;
    *prev = *rec;
    *rec = tmp;
  }
}
    192c:	2c 96       	adiw	r28, 0x0c	; 12
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	08 95       	ret

0000193e <nwkRouteNextHop>:

/*****************************************************************************
*****************************************************************************/
uint16_t nwkRouteNextHop(uint16_t dst)
{
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	00 d0       	rcall	.+0      	; 0x1944 <nwkRouteNextHop+0x6>
    1944:	0f 92       	push	r0
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	9b 83       	std	Y+3, r25	; 0x03
    194c:	8a 83       	std	Y+2, r24	; 0x02
  if (0xffff == dst)
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	9b 81       	ldd	r25, Y+3	; 0x03
    1952:	2f ef       	ldi	r18, 0xFF	; 255
    1954:	8f 3f       	cpi	r24, 0xFF	; 255
    1956:	92 07       	cpc	r25, r18
    1958:	19 f4       	brne	.+6      	; 0x1960 <nwkRouteNextHop+0x22>
    return NWK_ROUTE_UNKNOWN;
    195a:	8f ef       	ldi	r24, 0xFF	; 255
    195c:	9f ef       	ldi	r25, 0xFF	; 255
    195e:	2e c0       	rjmp	.+92     	; 0x19bc <nwkRouteNextHop+0x7e>

  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1960:	19 82       	std	Y+1, r1	; 0x01
    1962:	27 c0       	rjmp	.+78     	; 0x19b2 <nwkRouteNextHop+0x74>
    if (nwkRouteTable[i].dst == dst)
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	c9 01       	movw	r24, r18
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	82 0f       	add	r24, r18
    1972:	93 1f       	adc	r25, r19
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	88 5c       	subi	r24, 0xC8	; 200
    197a:	9b 4f       	sbci	r25, 0xFB	; 251
    197c:	fc 01       	movw	r30, r24
    197e:	20 81       	ld	r18, Z
    1980:	31 81       	ldd	r19, Z+1	; 0x01
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	9b 81       	ldd	r25, Y+3	; 0x03
    1986:	28 17       	cp	r18, r24
    1988:	39 07       	cpc	r19, r25
    198a:	81 f4       	brne	.+32     	; 0x19ac <nwkRouteNextHop+0x6e>
      return nwkRouteTable[i].nextHop;
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	c9 01       	movw	r24, r18
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	82 0f       	add	r24, r18
    199a:	93 1f       	adc	r25, r19
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	86 5c       	subi	r24, 0xC6	; 198
    19a2:	9b 4f       	sbci	r25, 0xFB	; 251
    19a4:	fc 01       	movw	r30, r24
    19a6:	80 81       	ld	r24, Z
    19a8:	91 81       	ldd	r25, Z+1	; 0x01
    19aa:	08 c0       	rjmp	.+16     	; 0x19bc <nwkRouteNextHop+0x7e>
uint16_t nwkRouteNextHop(uint16_t dst)
{
  if (0xffff == dst)
    return NWK_ROUTE_UNKNOWN;

  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	8f 5f       	subi	r24, 0xFF	; 255
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	84 36       	cpi	r24, 0x64	; 100
    19b6:	b0 f2       	brcs	.-84     	; 0x1964 <nwkRouteNextHop+0x26>
    if (nwkRouteTable[i].dst == dst)
      return nwkRouteTable[i].nextHop;

  return NWK_ROUTE_UNKNOWN;
    19b8:	8f ef       	ldi	r24, 0xFF	; 255
    19ba:	9f ef       	ldi	r25, 0xFF	; 255
}
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	08 95       	ret

000019c8 <nwkRouteFrame>:

/*****************************************************************************
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <nwkRouteFrame+0x6>
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
  if (NWK_ROUTE_UNKNOWN != nwkRouteNextHop(frame->data.header.nwkDstAddr))
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	fc 01       	movw	r30, r24
    19dc:	87 85       	ldd	r24, Z+15	; 0x0f
    19de:	90 89       	ldd	r25, Z+16	; 0x10
    19e0:	0e 94 9f 0c 	call	0x193e	; 0x193e <nwkRouteNextHop>
    19e4:	ff ef       	ldi	r31, 0xFF	; 255
    19e6:	8f 3f       	cpi	r24, 0xFF	; 255
    19e8:	9f 07       	cpc	r25, r31
    19ea:	a9 f0       	breq	.+42     	; 0x1a16 <nwkRouteFrame+0x4e>
  {
    frame->tx.confirm = nwkRouteTxFrameConf;
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	8d 57       	subi	r24, 0x7D	; 125
    19f2:	9f 4f       	sbci	r25, 0xFF	; 255
    19f4:	21 e2       	ldi	r18, 0x21	; 33
    19f6:	3d e0       	ldi	r19, 0x0D	; 13
    19f8:	fc 01       	movw	r30, r24
    19fa:	31 83       	std	Z+1, r19	; 0x01
    19fc:	20 83       	st	Z, r18
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	8e 57       	subi	r24, 0x7E	; 126
    1a04:	9f 4f       	sbci	r25, 0xFF	; 255
    1a06:	22 e0       	ldi	r18, 0x02	; 2
    1a08:	fc 01       	movw	r30, r24
    1a0a:	20 83       	st	Z, r18
    nwkTxFrame(frame);
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <nwkTxFrame>
    1a14:	11 c0       	rjmp	.+34     	; 0x1a38 <nwkRouteFrame+0x70>
  }
  else
  {
    nwkRouteSendRouteError(frame->data.header.nwkSrcAddr, frame->data.header.nwkDstAddr);
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	85 85       	ldd	r24, Z+13	; 0x0d
    1a1e:	96 85       	ldd	r25, Z+14	; 0x0e
    1a20:	29 81       	ldd	r18, Y+1	; 0x01
    1a22:	3a 81       	ldd	r19, Y+2	; 0x02
    1a24:	f9 01       	movw	r30, r18
    1a26:	27 85       	ldd	r18, Z+15	; 0x0f
    1a28:	30 89       	ldd	r19, Z+16	; 0x10
    1a2a:	b9 01       	movw	r22, r18
    1a2c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <nwkRouteSendRouteError>
    nwkFrameFree(frame);
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	9a 81       	ldd	r25, Y+2	; 0x02
    1a34:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <nwkFrameFree>
  }
}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	08 95       	ret

00001a42 <nwkRouteTxFrameConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkRouteTxFrameConf(NwkFrame_t *frame)
{
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <nwkRouteTxFrameConf+0x6>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	9a 83       	std	Y+2, r25	; 0x02
    1a4e:	89 83       	std	Y+1, r24	; 0x01
  nwkFrameFree(frame);
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	9a 81       	ldd	r25, Y+2	; 0x02
    1a54:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <nwkFrameFree>
}
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <nwkRouteSendRouteError>:

/*****************************************************************************
*****************************************************************************/
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst)
{
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	28 97       	sbiw	r28, 0x08	; 8
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	9e 83       	std	Y+6, r25	; 0x06
    1a78:	8d 83       	std	Y+5, r24	; 0x05
    1a7a:	78 87       	std	Y+8, r23	; 0x08
    1a7c:	6f 83       	std	Y+7, r22	; 0x07
  NwkFrame_t *frame;
  NwkRouteErrorCommand_t *command;

  if (NULL == (frame = nwkFrameAlloc(sizeof(NwkRouteErrorCommand_t))))
    1a7e:	85 e0       	ldi	r24, 0x05	; 5
    1a80:	0e 94 1b 0a 	call	0x1436	; 0x1436 <nwkFrameAlloc>
    1a84:	9a 83       	std	Y+2, r25	; 0x02
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	89 f1       	breq	.+98     	; 0x1af2 <nwkRouteSendRouteError+0x90>
    return;

  nwkFrameCommandInit(frame);
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	0e 94 90 0a 	call	0x1520	; 0x1520 <nwkFrameCommandInit>

  frame->tx.confirm = nwkRouteErrorConf;
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9c:	8d 57       	subi	r24, 0x7D	; 125
    1a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa0:	23 e8       	ldi	r18, 0x83	; 131
    1aa2:	3d e0       	ldi	r19, 0x0D	; 13
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	31 83       	std	Z+1, r19	; 0x01
    1aa8:	20 83       	st	Z, r18

  frame->data.header.nwkDstAddr = src;
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	2d 81       	ldd	r18, Y+5	; 0x05
    1ab0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	30 8b       	std	Z+16, r19	; 0x10
    1ab6:	27 87       	std	Z+15, r18	; 0x0f

  command = (NwkRouteErrorCommand_t *)frame->data.payload;
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	9a 81       	ldd	r25, Y+2	; 0x02
    1abc:	42 96       	adiw	r24, 0x12	; 18
    1abe:	9c 83       	std	Y+4, r25	; 0x04
    1ac0:	8b 83       	std	Y+3, r24	; 0x03

  command->id = NWK_COMMAND_ROUTE_ERROR;
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	21 e0       	ldi	r18, 0x01	; 1
    1ac8:	fc 01       	movw	r30, r24
    1aca:	20 83       	st	Z, r18
  command->srcAddr = src;
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ad2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	32 83       	std	Z+2, r19	; 0x02
    1ad8:	21 83       	std	Z+1, r18	; 0x01
  command->dstAddr = dst;
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ade:	2f 81       	ldd	r18, Y+7	; 0x07
    1ae0:	38 85       	ldd	r19, Y+8	; 0x08
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	34 83       	std	Z+4, r19	; 0x04
    1ae6:	23 83       	std	Z+3, r18	; 0x03

  nwkTxFrame(frame);
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	9a 81       	ldd	r25, Y+2	; 0x02
    1aec:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <nwkTxFrame>
    1af0:	01 c0       	rjmp	.+2      	; 0x1af4 <nwkRouteSendRouteError+0x92>
{
  NwkFrame_t *frame;
  NwkRouteErrorCommand_t *command;

  if (NULL == (frame = nwkFrameAlloc(sizeof(NwkRouteErrorCommand_t))))
    return;
    1af2:	00 00       	nop
  command->id = NWK_COMMAND_ROUTE_ERROR;
  command->srcAddr = src;
  command->dstAddr = dst;

  nwkTxFrame(frame);
}
    1af4:	28 96       	adiw	r28, 0x08	; 8
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	08 95       	ret

00001b06 <nwkRouteErrorConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkRouteErrorConf(NwkFrame_t *frame)
{
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <nwkRouteErrorConf+0x6>
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	9a 83       	std	Y+2, r25	; 0x02
    1b12:	89 83       	std	Y+1, r24	; 0x01
  nwkFrameFree(frame);
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <nwkFrameFree>
}
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	08 95       	ret

00001b26 <nwkRouteErrorReceived>:

/*****************************************************************************
*****************************************************************************/
void nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <nwkRouteErrorReceived+0x6>
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <nwkRouteErrorReceived+0x8>
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	9c 83       	std	Y+4, r25	; 0x04
    1b34:	8b 83       	std	Y+3, r24	; 0x03
  NwkRouteErrorCommand_t *command = (NwkRouteErrorCommand_t *)ind->data;
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	85 81       	ldd	r24, Z+5	; 0x05
    1b3e:	96 81       	ldd	r25, Z+6	; 0x06
    1b40:	9a 83       	std	Y+2, r25	; 0x02
    1b42:	89 83       	std	Y+1, r24	; 0x01

  nwkRouteRemove(command->dstAddr);
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	fc 01       	movw	r30, r24
    1b4a:	83 81       	ldd	r24, Z+3	; 0x03
    1b4c:	94 81       	ldd	r25, Z+4	; 0x04
    1b4e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <nwkRouteRemove>
}
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	08 95       	ret

00001b60 <nwkRxInit>:
}

/*****************************************************************************
*****************************************************************************/
void nwkRxInit(void)
{
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	0f 92       	push	r0
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1b6a:	19 82       	std	Y+1, r1	; 0x01
    1b6c:	12 c0       	rjmp	.+36     	; 0x1b92 <nwkRxInit+0x32>
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	c9 01       	movw	r24, r18
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	82 0f       	add	r24, r18
    1b80:	93 1f       	adc	r25, r19
    1b82:	8d 56       	subi	r24, 0x6D	; 109
    1b84:	99 4f       	sbci	r25, 0xF9	; 249
    1b86:	fc 01       	movw	r30, r24
    1b88:	11 82       	std	Z+1, r1	; 0x01
    1b8a:	10 82       	st	Z, r1

/*****************************************************************************
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	8f 5f       	subi	r24, 0xFF	; 255
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	8a 30       	cpi	r24, 0x0A	; 10
    1b96:	58 f3       	brcs	.-42     	; 0x1b6e <nwkRxInit+0xe>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxActiveFrames = 0;
    1b98:	10 92 c2 06 	sts	0x06C2, r1

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    1b9c:	84 e1       	ldi	r24, 0x14	; 20
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	80 93 ca 06 	sts	0x06CA, r24
    1ba8:	90 93 cb 06 	sts	0x06CB, r25
    1bac:	a0 93 cc 06 	sts	0x06CC, r26
    1bb0:	b0 93 cd 06 	sts	0x06CD, r27
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1bb4:	10 92 ce 06 	sts	0x06CE, r1
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    1bb8:	8d ed       	ldi	r24, 0xDD	; 221
    1bba:	9e e0       	ldi	r25, 0x0E	; 14
    1bbc:	90 93 d0 06 	sts	0x06D0, r25
    1bc0:	80 93 cf 06 	sts	0x06CF, r24

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    1bc4:	2f e0       	ldi	r18, 0x0F	; 15
    1bc6:	30 e1       	ldi	r19, 0x10	; 16
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	b9 01       	movw	r22, r18
    1bcc:	0e 94 47 05 	call	0xa8e	; 0xa8e <NWK_OpenEndpoint>
}
    1bd0:	0f 90       	pop	r0
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	08 95       	ret

00001bd8 <PHY_DataInd>:

/*****************************************************************************
	Process a received frame during system task processing
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <PHY_DataInd+0x6>
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <PHY_DataInd+0x8>
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	9c 83       	std	Y+4, r25	; 0x04
    1be6:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrame_t *frame;
// Frame Control = 0x8841 (broadcast frame) or 0x8861 (unicast frame)
// Means: short addresses; intra-PAN; no-ack/ack; data frame
// low byte first
  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	9c 81       	ldd	r25, Y+4	; 0x04
    1bec:	fc 01       	movw	r30, r24
    1bee:	80 81       	ld	r24, Z
    1bf0:	91 81       	ldd	r25, Z+1	; 0x01
    1bf2:	01 96       	adiw	r24, 0x01	; 1
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	80 81       	ld	r24, Z
    1bf8:	88 38       	cpi	r24, 0x88	; 136
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <PHY_DataInd+0x26>
    1bfc:	58 c0       	rjmp	.+176    	; 0x1cae <PHY_DataInd+0xd6>
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	fc 01       	movw	r30, r24
    1c04:	80 81       	ld	r24, Z
    1c06:	91 81       	ldd	r25, Z+1	; 0x01
    1c08:	fc 01       	movw	r30, r24
    1c0a:	80 81       	ld	r24, Z
    1c0c:	81 36       	cpi	r24, 0x61	; 97
    1c0e:	51 f0       	breq	.+20     	; 0x1c24 <PHY_DataInd+0x4c>
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	9c 81       	ldd	r25, Y+4	; 0x04
    1c14:	fc 01       	movw	r30, r24
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	80 81       	ld	r24, Z
    1c1e:	81 34       	cpi	r24, 0x41	; 65
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <PHY_DataInd+0x4c>
    1c22:	45 c0       	rjmp	.+138    	; 0x1cae <PHY_DataInd+0xd6>
      ind->size < sizeof(NwkFrameHeader_t))
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	9c 81       	ldd	r25, Y+4	; 0x04
    1c28:	fc 01       	movw	r30, r24
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
{
  NwkFrame_t *frame;
// Frame Control = 0x8841 (broadcast frame) or 0x8861 (unicast frame)
// Means: short addresses; intra-PAN; no-ack/ack; data frame
// low byte first
  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    1c2c:	80 31       	cpi	r24, 0x10	; 16
    1c2e:	08 f4       	brcc	.+2      	; 0x1c32 <PHY_DataInd+0x5a>
    1c30:	3e c0       	rjmp	.+124    	; 0x1cae <PHY_DataInd+0xd6>
      ind->size < sizeof(NwkFrameHeader_t))
    return;

  if (NULL == (frame = nwkFrameAlloc(ind->size - sizeof(NwkFrameHeader_t))))
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	fc 01       	movw	r30, r24
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	80 51       	subi	r24, 0x10	; 16
    1c3c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <nwkFrameAlloc>
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	9a 81       	ldd	r25, Y+2	; 0x02
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	99 f1       	breq	.+102    	; 0x1cb2 <PHY_DataInd+0xda>
    return;

  frame->state = NWK_RX_STATE_RECEIVED;
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c50:	20 e2       	ldi	r18, 0x20	; 32
    1c52:	fc 01       	movw	r30, r24
    1c54:	20 83       	st	Z, r18
  frame->rx.lqi = ind->lqi;
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	23 81       	ldd	r18, Z+3	; 0x03
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	81 58       	subi	r24, 0x81	; 129
    1c64:	9f 4f       	sbci	r25, 0xFF	; 255
    1c66:	fc 01       	movw	r30, r24
    1c68:	20 83       	st	Z, r18
  frame->rx.rssi = ind->rssi;
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	fc 01       	movw	r30, r24
    1c70:	24 81       	ldd	r18, Z+4	; 0x04
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	80 58       	subi	r24, 0x80	; 128
    1c78:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	20 83       	st	Z, r18

  memcpy((uint8_t *)&frame->data, ind->data, ind->size);
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	02 96       	adiw	r24, 0x02	; 2
    1c84:	2b 81       	ldd	r18, Y+3	; 0x03
    1c86:	3c 81       	ldd	r19, Y+4	; 0x04
    1c88:	f9 01       	movw	r30, r18
    1c8a:	40 81       	ld	r20, Z
    1c8c:	51 81       	ldd	r21, Z+1	; 0x01
    1c8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c90:	3c 81       	ldd	r19, Y+4	; 0x04
    1c92:	f9 01       	movw	r30, r18
    1c94:	22 81       	ldd	r18, Z+2	; 0x02
    1c96:	22 2f       	mov	r18, r18
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	ba 01       	movw	r22, r20
    1c9c:	a9 01       	movw	r20, r18
    1c9e:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <memcpy>

  ++nwkRxActiveFrames;
    1ca2:	80 91 c2 06 	lds	r24, 0x06C2
    1ca6:	8f 5f       	subi	r24, 0xFF	; 255
    1ca8:	80 93 c2 06 	sts	0x06C2, r24
    1cac:	03 c0       	rjmp	.+6      	; 0x1cb4 <PHY_DataInd+0xdc>
// Frame Control = 0x8841 (broadcast frame) or 0x8861 (unicast frame)
// Means: short addresses; intra-PAN; no-ack/ack; data frame
// low byte first
  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
      ind->size < sizeof(NwkFrameHeader_t))
    return;
    1cae:	00 00       	nop
    1cb0:	01 c0       	rjmp	.+2      	; 0x1cb4 <PHY_DataInd+0xdc>

  if (NULL == (frame = nwkFrameAlloc(ind->size - sizeof(NwkFrameHeader_t))))
    return;
    1cb2:	00 00       	nop
  frame->rx.rssi = ind->rssi;

  memcpy((uint8_t *)&frame->data, ind->data, ind->size);

  ++nwkRxActiveFrames;
}
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	08 95       	ret

00001cc2 <nwkRxSendAck>:

/*****************************************************************************
*****************************************************************************/
static void nwkRxSendAck(NwkFrame_t *frame)
{
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <nwkRxSendAck+0x6>
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <nwkRxSendAck+0x8>
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <nwkRxSendAck+0xa>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	9e 83       	std	Y+6, r25	; 0x06
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
  NwkFrame_t *ack;
  NwkAckCommand_t *command;

  if (NULL == (ack = nwkFrameAlloc(sizeof(NwkAckCommand_t))))
    1cd4:	83 e0       	ldi	r24, 0x03	; 3
    1cd6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <nwkFrameAlloc>
    1cda:	9a 83       	std	Y+2, r25	; 0x02
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	99 f1       	breq	.+102    	; 0x1d4c <nwkRxSendAck+0x8a>
    return;

  nwkFrameCommandInit(ack);
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cea:	0e 94 90 0a 	call	0x1520	; 0x1520 <nwkFrameCommandInit>

  ack->tx.confirm = nwkRxSendAckConf;
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf2:	8d 57       	subi	r24, 0x7D	; 125
    1cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf6:	20 eb       	ldi	r18, 0xB0	; 176
    1cf8:	3e e0       	ldi	r19, 0x0E	; 14
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	31 83       	std	Z+1, r19	; 0x01
    1cfe:	20 83       	st	Z, r18

  ack->data.header.nwkDstAddr = frame->data.header.nwkSrcAddr;
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	9e 81       	ldd	r25, Y+6	; 0x06
    1d04:	fc 01       	movw	r30, r24
    1d06:	25 85       	ldd	r18, Z+13	; 0x0d
    1d08:	36 85       	ldd	r19, Z+14	; 0x0e
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0e:	fc 01       	movw	r30, r24
    1d10:	30 8b       	std	Z+16, r19	; 0x10
    1d12:	27 87       	std	Z+15, r18	; 0x0f

  command = (NwkAckCommand_t *)ack->data.payload;
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	9a 81       	ldd	r25, Y+2	; 0x02
    1d18:	42 96       	adiw	r24, 0x12	; 18
    1d1a:	9c 83       	std	Y+4, r25	; 0x04
    1d1c:	8b 83       	std	Y+3, r24	; 0x03

  command->id = NWK_COMMAND_ACK;
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	fc 01       	movw	r30, r24
    1d24:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    1d26:	20 91 c3 06 	lds	r18, 0x06C3
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	fc 01       	movw	r30, r24
    1d30:	22 83       	std	Z+2, r18	; 0x02
  command->seq = frame->data.header.nwkSeq;
    1d32:	8d 81       	ldd	r24, Y+5	; 0x05
    1d34:	9e 81       	ldd	r25, Y+6	; 0x06
    1d36:	fc 01       	movw	r30, r24
    1d38:	24 85       	ldd	r18, Z+12	; 0x0c
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3e:	fc 01       	movw	r30, r24
    1d40:	21 83       	std	Z+1, r18	; 0x01

  nwkTxFrame(ack);
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	9a 81       	ldd	r25, Y+2	; 0x02
    1d46:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <nwkTxFrame>
    1d4a:	01 c0       	rjmp	.+2      	; 0x1d4e <nwkRxSendAck+0x8c>
{
  NwkFrame_t *ack;
  NwkAckCommand_t *command;

  if (NULL == (ack = nwkFrameAlloc(sizeof(NwkAckCommand_t))))
    return;
    1d4c:	00 00       	nop
  command->id = NWK_COMMAND_ACK;
  command->control = nwkRxAckControl;
  command->seq = frame->data.header.nwkSeq;

  nwkTxFrame(ack);
}
    1d4e:	26 96       	adiw	r28, 0x06	; 6
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	08 95       	ret

00001d60 <nwkRxSendAckConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkRxSendAckConf(NwkFrame_t *frame)
{
    1d60:	cf 93       	push	r28
    1d62:	df 93       	push	r29
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <nwkRxSendAckConf+0x6>
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	9a 83       	std	Y+2, r25	; 0x02
    1d6c:	89 83       	std	Y+1, r24	; 0x01
  nwkFrameFree(frame);
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <nwkFrameFree>
}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	08 95       	ret

00001d80 <nwkRxDecryptConf>:

#ifdef NWK_ENABLE_SECURITY
/*****************************************************************************
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <nwkRxDecryptConf+0x6>
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	6b 83       	std	Y+3, r22	; 0x03
  if (status)
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	88 23       	and	r24, r24
    1d96:	31 f0       	breq	.+12     	; 0x1da4 <nwkRxDecryptConf+0x24>
    frame->state = NWK_RX_STATE_INDICATE;
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9c:	22 e2       	ldi	r18, 0x22	; 34
    1d9e:	fc 01       	movw	r30, r24
    1da0:	20 83       	st	Z, r18
    1da2:	05 c0       	rjmp	.+10     	; 0x1dae <nwkRxDecryptConf+0x2e>
  else
    frame->state = NWK_RX_STATE_FINISH;
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	9a 81       	ldd	r25, Y+2	; 0x02
    1da8:	24 e2       	ldi	r18, 0x24	; 36
    1daa:	fc 01       	movw	r30, r24
    1dac:	20 83       	st	Z, r18
}
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	08 95       	ret

00001dba <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*****************************************************************************
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    1dba:	cf 93       	push	r28
    1dbc:	df 93       	push	r29
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <nwkRxDuplicateRejectionTimerHandler+0x6>
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <nwkRxDuplicateRejectionTimerHandler+0x8>
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
  bool restart = false;
    1dca:	19 82       	std	Y+1, r1	; 0x01

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1dcc:	1a 82       	std	Y+2, r1	; 0x02
    1dce:	34 c0       	rjmp	.+104    	; 0x1e38 <nwkRxDuplicateRejectionTimerHandler+0x7e>
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	c9 01       	movw	r24, r18
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	82 0f       	add	r24, r18
    1de2:	93 1f       	adc	r25, r19
    1de4:	8d 56       	subi	r24, 0x6D	; 109
    1de6:	99 4f       	sbci	r25, 0xF9	; 249
    1de8:	fc 01       	movw	r30, r24
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	01 f1       	breq	.+64     	; 0x1e32 <nwkRxDuplicateRejectionTimerHandler+0x78>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	c9 01       	movw	r24, r18
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	82 0f       	add	r24, r18
    1e04:	93 1f       	adc	r25, r19
    1e06:	8d 56       	subi	r24, 0x6D	; 109
    1e08:	99 4f       	sbci	r25, 0xF9	; 249
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	ac 01       	movw	r20, r24
    1e12:	41 50       	subi	r20, 0x01	; 1
    1e14:	50 40       	sbci	r21, 0x00	; 0
    1e16:	c9 01       	movw	r24, r18
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	82 0f       	add	r24, r18
    1e22:	93 1f       	adc	r25, r19
    1e24:	8d 56       	subi	r24, 0x6D	; 109
    1e26:	99 4f       	sbci	r25, 0xF9	; 249
    1e28:	fc 01       	movw	r30, r24
    1e2a:	51 83       	std	Z+1, r21	; 0x01
    1e2c:	40 83       	st	Z, r20
      restart = true;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	89 83       	std	Y+1, r24	; 0x01
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	8f 5f       	subi	r24, 0xFF	; 255
    1e36:	8a 83       	std	Y+2, r24	; 0x02
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	8a 30       	cpi	r24, 0x0A	; 10
    1e3c:	48 f2       	brcs	.-110    	; 0x1dd0 <nwkRxDuplicateRejectionTimerHandler+0x16>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	88 23       	and	r24, r24
    1e42:	21 f0       	breq	.+8      	; 0x1e4c <nwkRxDuplicateRejectionTimerHandler+0x92>
    SYS_TimerStart(timer);
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <SYS_TimerStart>
}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	08 95       	ret

00001e5a <nwkRxRejectDuplicate>:

/*****************************************************************************
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <nwkRxRejectDuplicate+0x6>
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <nwkRxRejectDuplicate+0x8>
    1e62:	0f 92       	push	r0
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	9d 83       	std	Y+5, r25	; 0x05
    1e6a:	8c 83       	std	Y+4, r24	; 0x04
  int8_t free = -1;
    1e6c:	8f ef       	ldi	r24, 0xFF	; 255
    1e6e:	89 83       	std	Y+1, r24	; 0x01

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1e70:	1a 82       	std	Y+2, r1	; 0x02
    1e72:	82 c0       	rjmp	.+260    	; 0x1f78 <nwkRxRejectDuplicate+0x11e>
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	c9 01       	movw	r24, r18
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	82 0f       	add	r24, r18
    1e86:	93 1f       	adc	r25, r19
    1e88:	8d 56       	subi	r24, 0x6D	; 109
    1e8a:	99 4f       	sbci	r25, 0xF9	; 249
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	80 81       	ld	r24, Z
    1e90:	91 81       	ldd	r25, Z+1	; 0x01
    1e92:	00 97       	sbiw	r24, 0x00	; 0
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <nwkRxRejectDuplicate+0x3e>
    1e96:	6b c0       	rjmp	.+214    	; 0x1f6e <nwkRxRejectDuplicate+0x114>
    {
      if (header->nwkSrcAddr == nwkRxDuplicateRejectionTable[i].src)
    1e98:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	43 85       	ldd	r20, Z+11	; 0x0b
    1ea0:	54 85       	ldd	r21, Z+12	; 0x0c
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	c9 01       	movw	r24, r18
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	82 0f       	add	r24, r18
    1eb4:	93 1f       	adc	r25, r19
    1eb6:	80 57       	subi	r24, 0x70	; 112
    1eb8:	99 4f       	sbci	r25, 0xF9	; 249
    1eba:	fc 01       	movw	r30, r24
    1ebc:	80 81       	ld	r24, Z
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	48 17       	cp	r20, r24
    1ec2:	59 07       	cpc	r21, r25
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <nwkRxRejectDuplicate+0x6e>
    1ec6:	55 c0       	rjmp	.+170    	; 0x1f72 <nwkRxRejectDuplicate+0x118>
      {
        int8_t diff = (int8_t)header->nwkSeq - nwkRxDuplicateRejectionTable[i].seq;
    1ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ecc:	fc 01       	movw	r30, r24
    1ece:	42 85       	ldd	r20, Z+10	; 0x0a
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	c9 01       	movw	r24, r18
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	82 0f       	add	r24, r18
    1ee2:	93 1f       	adc	r25, r19
    1ee4:	8e 56       	subi	r24, 0x6E	; 110
    1ee6:	99 4f       	sbci	r25, 0xF9	; 249
    1ee8:	fc 01       	movw	r30, r24
    1eea:	80 81       	ld	r24, Z
    1eec:	f4 2f       	mov	r31, r20
    1eee:	f8 1b       	sub	r31, r24
    1ef0:	8f 2f       	mov	r24, r31
    1ef2:	8b 83       	std	Y+3, r24	; 0x03

        if (diff > 0)
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	18 16       	cp	r1, r24
    1ef8:	2c f5       	brge	.+74     	; 0x1f44 <nwkRxRejectDuplicate+0xea>
        {
          nwkRxDuplicateRejectionTable[i].seq = header->nwkSeq;
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	8c 81       	ldd	r24, Y+4	; 0x04
    1f02:	9d 81       	ldd	r25, Y+5	; 0x05
    1f04:	fc 01       	movw	r30, r24
    1f06:	42 85       	ldd	r20, Z+10	; 0x0a
    1f08:	c9 01       	movw	r24, r18
    1f0a:	88 0f       	add	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	82 0f       	add	r24, r18
    1f14:	93 1f       	adc	r25, r19
    1f16:	8e 56       	subi	r24, 0x6E	; 110
    1f18:	99 4f       	sbci	r25, 0xF9	; 249
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	40 83       	st	Z, r20
          nwkRxDuplicateRejectionTable[i].ttl = DUPLICATE_REJECTION_TTL;
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	c9 01       	movw	r24, r18
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	82 0f       	add	r24, r18
    1f30:	93 1f       	adc	r25, r19
    1f32:	8d 56       	subi	r24, 0x6D	; 109
    1f34:	99 4f       	sbci	r25, 0xF9	; 249
    1f36:	25 e6       	ldi	r18, 0x65	; 101
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	31 83       	std	Z+1, r19	; 0x01
    1f3e:	20 83       	st	Z, r18
          return false;
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	65 c0       	rjmp	.+202    	; 0x200e <nwkRxRejectDuplicate+0x1b4>
        }
        else
        {
#ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    1f44:	20 91 16 08 	lds	r18, 0x0816
    1f48:	30 91 17 08 	lds	r19, 0x0817
    1f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f50:	fc 01       	movw	r30, r24
    1f52:	85 81       	ldd	r24, Z+5	; 0x05
    1f54:	96 81       	ldd	r25, Z+6	; 0x06
    1f56:	28 17       	cp	r18, r24
    1f58:	39 07       	cpc	r19, r25
    1f5a:	39 f4       	brne	.+14     	; 0x1f6a <nwkRxRejectDuplicate+0x110>
            nwkRouteRemove(header->nwkDstAddr);
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f60:	fc 01       	movw	r30, r24
    1f62:	85 85       	ldd	r24, Z+13	; 0x0d
    1f64:	96 85       	ldd	r25, Z+14	; 0x0e
    1f66:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <nwkRouteRemove>
#endif
          return true;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	50 c0       	rjmp	.+160    	; 0x200e <nwkRxRejectDuplicate+0x1b4>
        }
      }
    }
    else // ttl == 0
    {
      free = i;
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	89 83       	std	Y+1, r24	; 0x01
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  int8_t free = -1;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	8f 5f       	subi	r24, 0xFF	; 255
    1f76:	8a 83       	std	Y+2, r24	; 0x02
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	8a 30       	cpi	r24, 0x0A	; 10
    1f7c:	08 f4       	brcc	.+2      	; 0x1f80 <nwkRxRejectDuplicate+0x126>
    1f7e:	7a cf       	rjmp	.-268    	; 0x1e74 <nwkRxRejectDuplicate+0x1a>
    {
      free = i;
    }
  }

  if (-1 == free)
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	8f 3f       	cpi	r24, 0xFF	; 255
    1f84:	11 f4       	brne	.+4      	; 0x1f8a <nwkRxRejectDuplicate+0x130>
    return true;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	42 c0       	rjmp	.+132    	; 0x200e <nwkRxRejectDuplicate+0x1b4>

  nwkRxDuplicateRejectionTable[free].src = header->nwkSrcAddr;
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	33 27       	eor	r19, r19
    1f90:	27 fd       	sbrc	r18, 7
    1f92:	30 95       	com	r19
    1f94:	8c 81       	ldd	r24, Y+4	; 0x04
    1f96:	9d 81       	ldd	r25, Y+5	; 0x05
    1f98:	fc 01       	movw	r30, r24
    1f9a:	43 85       	ldd	r20, Z+11	; 0x0b
    1f9c:	54 85       	ldd	r21, Z+12	; 0x0c
    1f9e:	c9 01       	movw	r24, r18
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	82 0f       	add	r24, r18
    1faa:	93 1f       	adc	r25, r19
    1fac:	80 57       	subi	r24, 0x70	; 112
    1fae:	99 4f       	sbci	r25, 0xF9	; 249
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	51 83       	std	Z+1, r21	; 0x01
    1fb4:	40 83       	st	Z, r20
  nwkRxDuplicateRejectionTable[free].seq = header->nwkSeq;
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	28 2f       	mov	r18, r24
    1fba:	33 27       	eor	r19, r19
    1fbc:	27 fd       	sbrc	r18, 7
    1fbe:	30 95       	com	r19
    1fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	42 85       	ldd	r20, Z+10	; 0x0a
    1fc8:	c9 01       	movw	r24, r18
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	88 0f       	add	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	82 0f       	add	r24, r18
    1fd4:	93 1f       	adc	r25, r19
    1fd6:	8e 56       	subi	r24, 0x6E	; 110
    1fd8:	99 4f       	sbci	r25, 0xF9	; 249
    1fda:	fc 01       	movw	r30, r24
    1fdc:	40 83       	st	Z, r20
  nwkRxDuplicateRejectionTable[free].ttl = DUPLICATE_REJECTION_TTL;
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	33 27       	eor	r19, r19
    1fe4:	27 fd       	sbrc	r18, 7
    1fe6:	30 95       	com	r19
    1fe8:	c9 01       	movw	r24, r18
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	88 0f       	add	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	82 0f       	add	r24, r18
    1ff4:	93 1f       	adc	r25, r19
    1ff6:	8d 56       	subi	r24, 0x6D	; 109
    1ff8:	99 4f       	sbci	r25, 0xF9	; 249
    1ffa:	25 e6       	ldi	r18, 0x65	; 101
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	fc 01       	movw	r30, r24
    2000:	31 83       	std	Z+1, r19	; 0x01
    2002:	20 83       	st	Z, r18

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    2004:	84 ec       	ldi	r24, 0xC4	; 196
    2006:	96 e0       	ldi	r25, 0x06	; 6
    2008:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <SYS_TimerStart>

  return false;
    200c:	80 e0       	ldi	r24, 0x00	; 0
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	08 95       	ret

0000201e <nwkRxSeriveDataInd>:

/*****************************************************************************
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	00 d0       	rcall	.+0      	; 0x2024 <nwkRxSeriveDataInd+0x6>
    2024:	0f 92       	push	r0
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	9b 83       	std	Y+3, r25	; 0x03
    202c:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t cmd = ind->data[0];
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	9b 81       	ldd	r25, Y+3	; 0x03
    2032:	fc 01       	movw	r30, r24
    2034:	85 81       	ldd	r24, Z+5	; 0x05
    2036:	96 81       	ldd	r25, Z+6	; 0x06
    2038:	fc 01       	movw	r30, r24
    203a:	80 81       	ld	r24, Z
    203c:	89 83       	std	Y+1, r24	; 0x01

  if (NWK_COMMAND_ACK == cmd)
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	88 23       	and	r24, r24
    2042:	29 f4       	brne	.+10     	; 0x204e <nwkRxSeriveDataInd+0x30>
    nwkTxAckReceived(ind);
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	9b 81       	ldd	r25, Y+3	; 0x03
    2048:	0e 94 99 13 	call	0x2732	; 0x2732 <nwkTxAckReceived>
    204c:	0a c0       	rjmp	.+20     	; 0x2062 <nwkRxSeriveDataInd+0x44>
#ifdef NWK_ENABLE_ROUTING
  else if (NWK_COMMAND_ROUTE_ERROR == cmd)
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	81 30       	cpi	r24, 0x01	; 1
    2052:	29 f4       	brne	.+10     	; 0x205e <nwkRxSeriveDataInd+0x40>
    nwkRouteErrorReceived(ind);
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	9b 81       	ldd	r25, Y+3	; 0x03
    2058:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <nwkRouteErrorReceived>
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <nwkRxSeriveDataInd+0x44>
#endif
  else
    return false;
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <nwkRxSeriveDataInd+0x46>

  return true;
    2062:	81 e0       	ldi	r24, 0x01	; 1
}
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	08 95       	ret

00002070 <nwkRxIndicateFrame>:

/*****************************************************************************
*****************************************************************************/
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
    2070:	cf 93       	push	r28
    2072:	df 93       	push	r29
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	2e 97       	sbiw	r28, 0x0e	; 14
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	9e 87       	std	Y+14, r25	; 0x0e
    2086:	8d 87       	std	Y+13, r24	; 0x0d
  NwkFrameHeader_t *header = &frame->data.header;
    2088:	8d 85       	ldd	r24, Y+13	; 0x0d
    208a:	9e 85       	ldd	r25, Y+14	; 0x0e
    208c:	02 96       	adiw	r24, 0x02	; 2
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	89 83       	std	Y+1, r24	; 0x01
  NWK_DataInd_t ind;

  if (header->nwkDstEndpoint > NWK_MAX_ENDPOINTS_AMOUNT || 
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	9a 81       	ldd	r25, Y+2	; 0x02
    2096:	fc 01       	movw	r30, r24
    2098:	87 85       	ldd	r24, Z+15	; 0x0f
    209a:	82 95       	swap	r24
    209c:	8f 70       	andi	r24, 0x0F	; 15
    209e:	88 2f       	mov	r24, r24
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	85 30       	cpi	r24, 0x05	; 5
    20a4:	91 05       	cpc	r25, r1
    20a6:	94 f4       	brge	.+36     	; 0x20cc <nwkRxIndicateFrame+0x5c>
      NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	9a 81       	ldd	r25, Y+2	; 0x02
    20ac:	fc 01       	movw	r30, r24
    20ae:	87 85       	ldd	r24, Z+15	; 0x0f
    20b0:	82 95       	swap	r24
    20b2:	8f 70       	andi	r24, 0x0F	; 15
    20b4:	88 2f       	mov	r24, r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	03 96       	adiw	r24, 0x03	; 3
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	8a 5e       	subi	r24, 0xEA	; 234
    20c0:	97 4f       	sbci	r25, 0xF7	; 247
    20c2:	fc 01       	movw	r30, r24
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->data.header;
  NWK_DataInd_t ind;

  if (header->nwkDstEndpoint > NWK_MAX_ENDPOINTS_AMOUNT || 
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	11 f4       	brne	.+4      	; 0x20d0 <nwkRxIndicateFrame+0x60>
      NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	92 c0       	rjmp	.+292    	; 0x21f4 <nwkRxIndicateFrame+0x184>

  ind.srcAddr = header->nwkSrcAddr;
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	9a 81       	ldd	r25, Y+2	; 0x02
    20d4:	fc 01       	movw	r30, r24
    20d6:	83 85       	ldd	r24, Z+11	; 0x0b
    20d8:	94 85       	ldd	r25, Z+12	; 0x0c
    20da:	9c 83       	std	Y+4, r25	; 0x04
    20dc:	8b 83       	std	Y+3, r24	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
    20e2:	fc 01       	movw	r30, r24
    20e4:	87 85       	ldd	r24, Z+15	; 0x0f
    20e6:	8f 70       	andi	r24, 0x0F	; 15
    20e8:	8d 83       	std	Y+5, r24	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	9a 81       	ldd	r25, Y+2	; 0x02
    20ee:	fc 01       	movw	r30, r24
    20f0:	87 85       	ldd	r24, Z+15	; 0x0f
    20f2:	82 95       	swap	r24
    20f4:	8f 70       	andi	r24, 0x0F	; 15
    20f6:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->data.payload;
    20f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fc:	42 96       	adiw	r24, 0x12	; 18
    20fe:	99 87       	std	Y+9, r25	; 0x09
    2100:	88 87       	std	Y+8, r24	; 0x08
  ind.size = frame->size - sizeof(NwkFrameHeader_t);
    2102:	8d 85       	ldd	r24, Y+13	; 0x0d
    2104:	9e 85       	ldd	r25, Y+14	; 0x0e
    2106:	fc 01       	movw	r30, r24
    2108:	81 81       	ldd	r24, Z+1	; 0x01
    210a:	80 51       	subi	r24, 0x10	; 16
    210c:	8a 87       	std	Y+10, r24	; 0x0a
  ind.lqi = frame->rx.lqi;
    210e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2110:	9e 85       	ldd	r25, Y+14	; 0x0e
    2112:	81 58       	subi	r24, 0x81	; 129
    2114:	9f 4f       	sbci	r25, 0xFF	; 255
    2116:	fc 01       	movw	r30, r24
    2118:	80 81       	ld	r24, Z
    211a:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    211c:	8d 85       	ldd	r24, Y+13	; 0x0d
    211e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2120:	80 58       	subi	r24, 0x80	; 128
    2122:	9f 4f       	sbci	r25, 0xFF	; 255
    2124:	fc 01       	movw	r30, r24
    2126:	80 81       	ld	r24, Z
    2128:	8c 87       	std	Y+12, r24	; 0x0c
// Setup the options bits
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	fc 01       	movw	r30, r24
    2130:	81 85       	ldd	r24, Z+9	; 0x09
    2132:	81 70       	andi	r24, 0x01	; 1
    2134:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (header->nwkFcf.securityEnabled) ? NWK_IND_OPT_SECURED : 0;
    2136:	8f 81       	ldd	r24, Y+7	; 0x07
    2138:	28 2f       	mov	r18, r24
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	fc 01       	movw	r30, r24
    2140:	81 85       	ldd	r24, Z+9	; 0x09
    2142:	82 70       	andi	r24, 0x02	; 2
    2144:	82 2b       	or	r24, r18
    2146:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    2148:	8f 81       	ldd	r24, Y+7	; 0x07
    214a:	28 2f       	mov	r18, r24
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	9a 81       	ldd	r25, Y+2	; 0x02
    2150:	fc 01       	movw	r30, r24
    2152:	81 85       	ldd	r24, Z+9	; 0x09
    2154:	84 70       	andi	r24, 0x04	; 4
    2156:	88 23       	and	r24, r24
    2158:	11 f0       	breq	.+4      	; 0x215e <nwkRxIndicateFrame+0xee>
    215a:	80 e2       	ldi	r24, 0x20	; 32
    215c:	01 c0       	rjmp	.+2      	; 0x2160 <nwkRxIndicateFrame+0xf0>
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	82 2b       	or	r24, r18
    2162:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (0xffff == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    2164:	8f 81       	ldd	r24, Y+7	; 0x07
    2166:	28 2f       	mov	r18, r24
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	9a 81       	ldd	r25, Y+2	; 0x02
    216c:	fc 01       	movw	r30, r24
    216e:	85 85       	ldd	r24, Z+13	; 0x0d
    2170:	96 85       	ldd	r25, Z+14	; 0x0e
    2172:	ff ef       	ldi	r31, 0xFF	; 255
    2174:	8f 3f       	cpi	r24, 0xFF	; 255
    2176:	9f 07       	cpc	r25, r31
    2178:	11 f4       	brne	.+4      	; 0x217e <nwkRxIndicateFrame+0x10e>
    217a:	84 e0       	ldi	r24, 0x04	; 4
    217c:	01 c0       	rjmp	.+2      	; 0x2180 <nwkRxIndicateFrame+0x110>
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	82 2b       	or	r24, r18
    2182:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    2184:	8f 81       	ldd	r24, Y+7	; 0x07
    2186:	48 2f       	mov	r20, r24
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	9a 81       	ldd	r25, Y+2	; 0x02
    218c:	fc 01       	movw	r30, r24
    218e:	23 85       	ldd	r18, Z+11	; 0x0b
    2190:	34 85       	ldd	r19, Z+12	; 0x0c
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	fc 01       	movw	r30, r24
    2198:	87 81       	ldd	r24, Z+7	; 0x07
    219a:	90 85       	ldd	r25, Z+8	; 0x08
    219c:	28 17       	cp	r18, r24
    219e:	39 07       	cpc	r19, r25
    21a0:	11 f4       	brne	.+4      	; 0x21a6 <nwkRxIndicateFrame+0x136>
    21a2:	88 e0       	ldi	r24, 0x08	; 8
    21a4:	01 c0       	rjmp	.+2      	; 0x21a8 <nwkRxIndicateFrame+0x138>
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	84 2b       	or	r24, r20
    21aa:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (0xffff == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    21ac:	8f 81       	ldd	r24, Y+7	; 0x07
    21ae:	28 2f       	mov	r18, r24
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	9a 81       	ldd	r25, Y+2	; 0x02
    21b4:	fc 01       	movw	r30, r24
    21b6:	83 81       	ldd	r24, Z+3	; 0x03
    21b8:	94 81       	ldd	r25, Z+4	; 0x04
    21ba:	ff ef       	ldi	r31, 0xFF	; 255
    21bc:	8f 3f       	cpi	r24, 0xFF	; 255
    21be:	9f 07       	cpc	r25, r31
    21c0:	11 f4       	brne	.+4      	; 0x21c6 <nwkRxIndicateFrame+0x156>
    21c2:	80 e1       	ldi	r24, 0x10	; 16
    21c4:	01 c0       	rjmp	.+2      	; 0x21c8 <nwkRxIndicateFrame+0x158>
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	82 2b       	or	r24, r18
    21ca:	8f 83       	std	Y+7, r24	; 0x07
// Invokes the callback function and returns its return value to the caller of this function
// i.e., whether or not to acknowledge the message
  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	9a 81       	ldd	r25, Y+2	; 0x02
    21d0:	fc 01       	movw	r30, r24
    21d2:	87 85       	ldd	r24, Z+15	; 0x0f
    21d4:	82 95       	swap	r24
    21d6:	8f 70       	andi	r24, 0x0F	; 15
    21d8:	88 2f       	mov	r24, r24
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	03 96       	adiw	r24, 0x03	; 3
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	8a 5e       	subi	r24, 0xEA	; 234
    21e4:	97 4f       	sbci	r25, 0xF7	; 247
    21e6:	fc 01       	movw	r30, r24
    21e8:	20 81       	ld	r18, Z
    21ea:	31 81       	ldd	r19, Z+1	; 0x01
    21ec:	ce 01       	movw	r24, r28
    21ee:	03 96       	adiw	r24, 0x03	; 3
    21f0:	f9 01       	movw	r30, r18
    21f2:	09 95       	icall
}
    21f4:	2e 96       	adiw	r28, 0x0e	; 14
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	08 95       	ret

00002206 <nwkRxHandleReceivedFrame>:

/*****************************************************************************
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	00 d0       	rcall	.+0      	; 0x220c <nwkRxHandleReceivedFrame+0x6>
    220c:	00 d0       	rcall	.+0      	; 0x220e <nwkRxHandleReceivedFrame+0x8>
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	9c 83       	std	Y+4, r25	; 0x04
    2214:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->data.header;
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	9c 81       	ldd	r25, Y+4	; 0x04
    221a:	02 96       	adiw	r24, 0x02	; 2
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01

  frame->state = NWK_RX_STATE_FINISH;
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	9c 81       	ldd	r25, Y+4	; 0x04
    2224:	24 e2       	ldi	r18, 0x24	; 36
    2226:	fc 01       	movw	r30, r24
    2228:	20 83       	st	Z, r18
// Skip if this is an ack to broadcast addr, or if this node is the one that sent it
  if ((0xffff == header->nwkDstAddr && header->nwkFcf.ackRequest) ||
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	9a 81       	ldd	r25, Y+2	; 0x02
    222e:	fc 01       	movw	r30, r24
    2230:	85 85       	ldd	r24, Z+13	; 0x0d
    2232:	96 85       	ldd	r25, Z+14	; 0x0e
    2234:	ff ef       	ldi	r31, 0xFF	; 255
    2236:	8f 3f       	cpi	r24, 0xFF	; 255
    2238:	9f 07       	cpc	r25, r31
    223a:	41 f4       	brne	.+16     	; 0x224c <nwkRxHandleReceivedFrame+0x46>
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	9a 81       	ldd	r25, Y+2	; 0x02
    2240:	fc 01       	movw	r30, r24
    2242:	81 85       	ldd	r24, Z+9	; 0x09
    2244:	81 70       	andi	r24, 0x01	; 1
    2246:	88 23       	and	r24, r24
    2248:	09 f0       	breq	.+2      	; 0x224c <nwkRxHandleReceivedFrame+0x46>
    224a:	84 c0       	rjmp	.+264    	; 0x2354 <nwkRxHandleReceivedFrame+0x14e>
      (nwkIb.addr == header->nwkSrcAddr))
    224c:	20 91 16 08 	lds	r18, 0x0816
    2250:	30 91 17 08 	lds	r19, 0x0817
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	9a 81       	ldd	r25, Y+2	; 0x02
    2258:	fc 01       	movw	r30, r24
    225a:	83 85       	ldd	r24, Z+11	; 0x0b
    225c:	94 85       	ldd	r25, Z+12	; 0x0c
{
  NwkFrameHeader_t *header = &frame->data.header;

  frame->state = NWK_RX_STATE_FINISH;
// Skip if this is an ack to broadcast addr, or if this node is the one that sent it
  if ((0xffff == header->nwkDstAddr && header->nwkFcf.ackRequest) ||
    225e:	28 17       	cp	r18, r24
    2260:	39 07       	cpc	r19, r25
    2262:	09 f4       	brne	.+2      	; 0x2266 <nwkRxHandleReceivedFrame+0x60>
    2264:	77 c0       	rjmp	.+238    	; 0x2354 <nwkRxHandleReceivedFrame+0x14e>
  if (header->nwkFcf.securityEnabled)
    return;
#endif

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <nwkRouteFrameReceived>
#endif

  if (nwkRxRejectDuplicate(header))
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	9a 81       	ldd	r25, Y+2	; 0x02
    2272:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <nwkRxRejectDuplicate>
    2276:	88 23       	and	r24, r24
    2278:	09 f0       	breq	.+2      	; 0x227c <nwkRxHandleReceivedFrame+0x76>
    227a:	6e c0       	rjmp	.+220    	; 0x2358 <nwkRxHandleReceivedFrame+0x152>
    return;

  if (0xffff == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	9a 81       	ldd	r25, Y+2	; 0x02
    2280:	fc 01       	movw	r30, r24
    2282:	85 81       	ldd	r24, Z+5	; 0x05
    2284:	96 81       	ldd	r25, Z+6	; 0x06
    2286:	ff ef       	ldi	r31, 0xFF	; 255
    2288:	8f 3f       	cpi	r24, 0xFF	; 255
    228a:	9f 07       	cpc	r25, r31
    228c:	01 f5       	brne	.+64     	; 0x22ce <nwkRxHandleReceivedFrame+0xc8>
    228e:	20 91 16 08 	lds	r18, 0x0816
    2292:	30 91 17 08 	lds	r19, 0x0817
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	9a 81       	ldd	r25, Y+2	; 0x02
    229a:	fc 01       	movw	r30, r24
    229c:	85 85       	ldd	r24, Z+13	; 0x0d
    229e:	96 85       	ldd	r25, Z+14	; 0x0e
    22a0:	28 17       	cp	r18, r24
    22a2:	39 07       	cpc	r19, r25
    22a4:	a1 f0       	breq	.+40     	; 0x22ce <nwkRxHandleReceivedFrame+0xc8>
      0xffff != header->macDstPanId && 0 == header->nwkFcf.linkLocal)
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	9a 81       	ldd	r25, Y+2	; 0x02
    22aa:	fc 01       	movw	r30, r24
    22ac:	83 81       	ldd	r24, Z+3	; 0x03
    22ae:	94 81       	ldd	r25, Z+4	; 0x04
#endif

  if (nwkRxRejectDuplicate(header))
    return;

  if (0xffff == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    22b0:	ff ef       	ldi	r31, 0xFF	; 255
    22b2:	8f 3f       	cpi	r24, 0xFF	; 255
    22b4:	9f 07       	cpc	r25, r31
    22b6:	59 f0       	breq	.+22     	; 0x22ce <nwkRxHandleReceivedFrame+0xc8>
      0xffff != header->macDstPanId && 0 == header->nwkFcf.linkLocal)
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	9a 81       	ldd	r25, Y+2	; 0x02
    22bc:	fc 01       	movw	r30, r24
    22be:	81 85       	ldd	r24, Z+9	; 0x09
    22c0:	84 70       	andi	r24, 0x04	; 4
    22c2:	88 23       	and	r24, r24
    22c4:	21 f4       	brne	.+8      	; 0x22ce <nwkRxHandleReceivedFrame+0xc8>
    nwkTxBroadcastFrame(frame);
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ca:	0e 94 14 13 	call	0x2628	; 0x2628 <nwkTxBroadcastFrame>
// If this is the destination, or it's a broadcast frame, then process it
  if (nwkIb.addr == header->nwkDstAddr || 0xffff == header->nwkDstAddr)
    22ce:	20 91 16 08 	lds	r18, 0x0816
    22d2:	30 91 17 08 	lds	r19, 0x0817
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	fc 01       	movw	r30, r24
    22dc:	85 85       	ldd	r24, Z+13	; 0x0d
    22de:	96 85       	ldd	r25, Z+14	; 0x0e
    22e0:	28 17       	cp	r18, r24
    22e2:	39 07       	cpc	r19, r25
    22e4:	49 f0       	breq	.+18     	; 0x22f8 <nwkRxHandleReceivedFrame+0xf2>
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ea:	fc 01       	movw	r30, r24
    22ec:	85 85       	ldd	r24, Z+13	; 0x0d
    22ee:	96 85       	ldd	r25, Z+14	; 0x0e
    22f0:	ff ef       	ldi	r31, 0xFF	; 255
    22f2:	8f 3f       	cpi	r24, 0xFF	; 255
    22f4:	9f 07       	cpc	r25, r31
    22f6:	99 f4       	brne	.+38     	; 0x231e <nwkRxHandleReceivedFrame+0x118>
  {
#ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.securityEnabled)
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	9a 81       	ldd	r25, Y+2	; 0x02
    22fc:	fc 01       	movw	r30, r24
    22fe:	81 85       	ldd	r24, Z+9	; 0x09
    2300:	82 70       	andi	r24, 0x02	; 2
    2302:	88 23       	and	r24, r24
    2304:	31 f0       	breq	.+12     	; 0x2312 <nwkRxHandleReceivedFrame+0x10c>
      frame->state = NWK_RX_STATE_DECRYPT;
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	21 e2       	ldi	r18, 0x21	; 33
    230c:	fc 01       	movw	r30, r24
    230e:	20 83       	st	Z, r18
    nwkTxBroadcastFrame(frame);
// If this is the destination, or it's a broadcast frame, then process it
  if (nwkIb.addr == header->nwkDstAddr || 0xffff == header->nwkDstAddr)
  {
#ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.securityEnabled)
    2310:	24 c0       	rjmp	.+72     	; 0x235a <nwkRxHandleReceivedFrame+0x154>
      frame->state = NWK_RX_STATE_DECRYPT;
    else
#endif
      frame->state = NWK_RX_STATE_INDICATE;
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	9c 81       	ldd	r25, Y+4	; 0x04
    2316:	22 e2       	ldi	r18, 0x22	; 34
    2318:	fc 01       	movw	r30, r24
    231a:	20 83       	st	Z, r18
    nwkTxBroadcastFrame(frame);
// If this is the destination, or it's a broadcast frame, then process it
  if (nwkIb.addr == header->nwkDstAddr || 0xffff == header->nwkDstAddr)
  {
#ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.securityEnabled)
    231c:	1e c0       	rjmp	.+60     	; 0x235a <nwkRxHandleReceivedFrame+0x154>
    else
#endif
      frame->state = NWK_RX_STATE_INDICATE;
  }
#ifdef NWK_ENABLE_ROUTING
  else if (nwkIb.addr == header->macDstAddr && 0xffff != header->macDstPanId)
    231e:	20 91 16 08 	lds	r18, 0x0816
    2322:	30 91 17 08 	lds	r19, 0x0817
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	9a 81       	ldd	r25, Y+2	; 0x02
    232a:	fc 01       	movw	r30, r24
    232c:	85 81       	ldd	r24, Z+5	; 0x05
    232e:	96 81       	ldd	r25, Z+6	; 0x06
    2330:	28 17       	cp	r18, r24
    2332:	39 07       	cpc	r19, r25
    2334:	91 f4       	brne	.+36     	; 0x235a <nwkRxHandleReceivedFrame+0x154>
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	9a 81       	ldd	r25, Y+2	; 0x02
    233a:	fc 01       	movw	r30, r24
    233c:	83 81       	ldd	r24, Z+3	; 0x03
    233e:	94 81       	ldd	r25, Z+4	; 0x04
    2340:	ff ef       	ldi	r31, 0xFF	; 255
    2342:	8f 3f       	cpi	r24, 0xFF	; 255
    2344:	9f 07       	cpc	r25, r31
    2346:	49 f0       	breq	.+18     	; 0x235a <nwkRxHandleReceivedFrame+0x154>
  {
    frame->state = NWK_RX_STATE_ROUTE;
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	9c 81       	ldd	r25, Y+4	; 0x04
    234c:	23 e2       	ldi	r18, 0x23	; 35
    234e:	fc 01       	movw	r30, r24
    2350:	20 83       	st	Z, r18
    2352:	03 c0       	rjmp	.+6      	; 0x235a <nwkRxHandleReceivedFrame+0x154>

  frame->state = NWK_RX_STATE_FINISH;
// Skip if this is an ack to broadcast addr, or if this node is the one that sent it
  if ((0xffff == header->nwkDstAddr && header->nwkFcf.ackRequest) ||
      (nwkIb.addr == header->nwkSrcAddr))
    return;
    2354:	00 00       	nop
    2356:	01 c0       	rjmp	.+2      	; 0x235a <nwkRxHandleReceivedFrame+0x154>
#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
#endif

  if (nwkRxRejectDuplicate(header))
    return;
    2358:	00 00       	nop
  else if (nwkIb.addr == header->macDstAddr && 0xffff != header->macDstPanId)
  {
    frame->state = NWK_RX_STATE_ROUTE;
  }
#endif
}
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	08 95       	ret

00002368 <nwkRxTaskHandler>:

/*****************************************************************************
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    2368:	cf 93       	push	r28
    236a:	df 93       	push	r29
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
    2370:	28 97       	sbiw	r28, 0x08	; 8
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	f8 94       	cli
    2376:	de bf       	out	0x3e, r29	; 62
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	cd bf       	out	0x3d, r28	; 61
  if (0 == nwkRxActiveFrames)
    237c:	80 91 c2 06 	lds	r24, 0x06C2
    2380:	88 23       	and	r24, r24
    2382:	09 f4       	brne	.+2      	; 0x2386 <nwkRxTaskHandler+0x1e>
    2384:	8d c0       	rjmp	.+282    	; 0x24a0 <nwkRxTaskHandler+0x138>
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    2386:	1a 82       	std	Y+2, r1	; 0x02
    2388:	19 82       	std	Y+1, r1	; 0x01
    238a:	83 c0       	rjmp	.+262    	; 0x2492 <nwkRxTaskHandler+0x12a>
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <nwkFrameByIndex>
    2392:	9c 83       	std	Y+4, r25	; 0x04
    2394:	8b 83       	std	Y+3, r24	; 0x03

    switch (frame->state)
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	fc 01       	movw	r30, r24
    239c:	80 81       	ld	r24, Z
    239e:	88 2f       	mov	r24, r24
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	82 32       	cpi	r24, 0x22	; 34
    23a4:	91 05       	cpc	r25, r1
    23a6:	f1 f0       	breq	.+60     	; 0x23e4 <nwkRxTaskHandler+0x7c>
    23a8:	83 32       	cpi	r24, 0x23	; 35
    23aa:	91 05       	cpc	r25, r1
    23ac:	3c f4       	brge	.+14     	; 0x23bc <nwkRxTaskHandler+0x54>
    23ae:	80 32       	cpi	r24, 0x20	; 32
    23b0:	91 05       	cpc	r25, r1
    23b2:	69 f0       	breq	.+26     	; 0x23ce <nwkRxTaskHandler+0x66>
    23b4:	81 32       	cpi	r24, 0x21	; 33
    23b6:	91 05       	cpc	r25, r1
    23b8:	79 f0       	breq	.+30     	; 0x23d8 <nwkRxTaskHandler+0x70>
    23ba:	66 c0       	rjmp	.+204    	; 0x2488 <nwkRxTaskHandler+0x120>
    23bc:	83 32       	cpi	r24, 0x23	; 35
    23be:	91 05       	cpc	r25, r1
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <nwkRxTaskHandler+0x5c>
    23c2:	4e c0       	rjmp	.+156    	; 0x2460 <nwkRxTaskHandler+0xf8>
    23c4:	84 32       	cpi	r24, 0x24	; 36
    23c6:	91 05       	cpc	r25, r1
    23c8:	09 f4       	brne	.+2      	; 0x23cc <nwkRxTaskHandler+0x64>
    23ca:	54 c0       	rjmp	.+168    	; 0x2474 <nwkRxTaskHandler+0x10c>
    23cc:	5d c0       	rjmp	.+186    	; 0x2488 <nwkRxTaskHandler+0x120>
    {
      case NWK_RX_STATE_RECEIVED:
      {
        nwkRxHandleReceivedFrame(frame);
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	9c 81       	ldd	r25, Y+4	; 0x04
    23d2:	0e 94 03 11 	call	0x2206	; 0x2206 <nwkRxHandleReceivedFrame>
      } break;
    23d6:	58 c0       	rjmp	.+176    	; 0x2488 <nwkRxTaskHandler+0x120>

#ifdef NWK_ENABLE_SECURITY
      case NWK_RX_STATE_DECRYPT:
      {
        nwkSecurityProcess(frame, false);
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	0e 94 8b 07 	call	0xf16	; 0xf16 <nwkSecurityProcess>
      } break;
    23e2:	52 c0       	rjmp	.+164    	; 0x2488 <nwkRxTaskHandler+0x120>
#endif

      case NWK_RX_STATE_INDICATE:
      {
        NwkFrameHeader_t *header = &frame->data.header;
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	9c 81       	ldd	r25, Y+4	; 0x04
    23e8:	02 96       	adiw	r24, 0x02	; 2
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
        bool ack, forceAck;

        nwkRxAckControl = NWK_ACK_CONTROL_NONE;
    23ee:	10 92 c3 06 	sts	0x06C3, r1
        ack = nwkRxIndicateFrame(frame);
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	9c 81       	ldd	r25, Y+4	; 0x04
    23f6:	0e 94 38 10 	call	0x2070	; 0x2070 <nwkRxIndicateFrame>
    23fa:	8f 83       	std	Y+7, r24	; 0x07
        forceAck = (0xffff == header->macDstAddr && nwkIb.addr == header->nwkDstAddr);
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	fc 01       	movw	r30, r24
    2402:	85 81       	ldd	r24, Z+5	; 0x05
    2404:	96 81       	ldd	r25, Z+6	; 0x06
    2406:	ff ef       	ldi	r31, 0xFF	; 255
    2408:	8f 3f       	cpi	r24, 0xFF	; 255
    240a:	9f 07       	cpc	r25, r31
    240c:	79 f4       	brne	.+30     	; 0x242c <nwkRxTaskHandler+0xc4>
    240e:	20 91 16 08 	lds	r18, 0x0816
    2412:	30 91 17 08 	lds	r19, 0x0817
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	fc 01       	movw	r30, r24
    241c:	85 85       	ldd	r24, Z+13	; 0x0d
    241e:	96 85       	ldd	r25, Z+14	; 0x0e
    2420:	28 17       	cp	r18, r24
    2422:	39 07       	cpc	r19, r25
    2424:	19 f4       	brne	.+6      	; 0x242c <nwkRxTaskHandler+0xc4>
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <nwkRxTaskHandler+0xc8>
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	88 87       	std	Y+8, r24	; 0x08

        if ((header->nwkFcf.ackRequest && ack) || forceAck)
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	fc 01       	movw	r30, r24
    2438:	81 85       	ldd	r24, Z+9	; 0x09
    243a:	81 70       	andi	r24, 0x01	; 1
    243c:	88 23       	and	r24, r24
    243e:	19 f0       	breq	.+6      	; 0x2446 <nwkRxTaskHandler+0xde>
    2440:	8f 81       	ldd	r24, Y+7	; 0x07
    2442:	88 23       	and	r24, r24
    2444:	19 f4       	brne	.+6      	; 0x244c <nwkRxTaskHandler+0xe4>
    2446:	88 85       	ldd	r24, Y+8	; 0x08
    2448:	88 23       	and	r24, r24
    244a:	21 f0       	breq	.+8      	; 0x2454 <nwkRxTaskHandler+0xec>
          nwkRxSendAck(frame);
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	9c 81       	ldd	r25, Y+4	; 0x04
    2450:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <nwkRxSendAck>

        frame->state = NWK_RX_STATE_FINISH;
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	24 e2       	ldi	r18, 0x24	; 36
    245a:	fc 01       	movw	r30, r24
    245c:	20 83       	st	Z, r18
      } break;
    245e:	14 c0       	rjmp	.+40     	; 0x2488 <nwkRxTaskHandler+0x120>

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	9c 81       	ldd	r25, Y+4	; 0x04
    2464:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <nwkRouteFrame>
        --nwkRxActiveFrames;
    2468:	80 91 c2 06 	lds	r24, 0x06C2
    246c:	81 50       	subi	r24, 0x01	; 1
    246e:	80 93 c2 06 	sts	0x06C2, r24
      } break;
    2472:	0a c0       	rjmp	.+20     	; 0x2488 <nwkRxTaskHandler+0x120>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	9c 81       	ldd	r25, Y+4	; 0x04
    2478:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <nwkFrameFree>
        --nwkRxActiveFrames;
    247c:	80 91 c2 06 	lds	r24, 0x06C2
    2480:	81 50       	subi	r24, 0x01	; 1
    2482:	80 93 c2 06 	sts	0x06C2, r24
      } break;
    2486:	00 00       	nop
void nwkRxTaskHandler(void)
{
  if (0 == nwkRxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	9a 81       	ldd	r25, Y+2	; 0x02
    248c:	01 96       	adiw	r24, 0x01	; 1
    248e:	9a 83       	std	Y+2, r25	; 0x02
    2490:	89 83       	std	Y+1, r24	; 0x01
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	9a 81       	ldd	r25, Y+2	; 0x02
    2496:	83 30       	cpi	r24, 0x03	; 3
    2498:	91 05       	cpc	r25, r1
    249a:	0c f4       	brge	.+2      	; 0x249e <nwkRxTaskHandler+0x136>
    249c:	77 cf       	rjmp	.-274    	; 0x238c <nwkRxTaskHandler+0x24>
    249e:	01 c0       	rjmp	.+2      	; 0x24a2 <nwkRxTaskHandler+0x13a>
/*****************************************************************************
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  if (0 == nwkRxActiveFrames)
    return;
    24a0:	00 00       	nop
        nwkFrameFree(frame);
        --nwkRxActiveFrames;
      } break;
    }
  }
}
    24a2:	28 96       	adiw	r28, 0x08	; 8
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	08 95       	ret

000024b4 <nwkTxInit>:
static SYS_Timer_t nwkTxAckWaitTimer;

/*****************************************************************************
*****************************************************************************/
void nwkTxInit(void)
{
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
  nwkTxPhyActiveFrame = NULL;
    24bc:	10 92 d2 06 	sts	0x06D2, r1
    24c0:	10 92 d1 06 	sts	0x06D1, r1
  nwkTxActiveFrames = 0;
    24c4:	10 92 d3 06 	sts	0x06D3, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    24c8:	82 e3       	ldi	r24, 0x32	; 50
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a0 e0       	ldi	r26, 0x00	; 0
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	80 93 da 06 	sts	0x06DA, r24
    24d4:	90 93 db 06 	sts	0x06DB, r25
    24d8:	a0 93 dc 06 	sts	0x06DC, r26
    24dc:	b0 93 dd 06 	sts	0x06DD, r27
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    24e0:	10 92 de 06 	sts	0x06DE, r1
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    24e4:	8d ee       	ldi	r24, 0xED	; 237
    24e6:	93 e1       	ldi	r25, 0x13	; 19
    24e8:	90 93 e0 06 	sts	0x06E0, r25
    24ec:	80 93 df 06 	sts	0x06DF, r24
}
    24f0:	df 91       	pop	r29
    24f2:	cf 91       	pop	r28
    24f4:	08 95       	ret

000024f6 <nwkTxFrame>:

/*****************************************************************************
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	00 d0       	rcall	.+0      	; 0x24fc <nwkTxFrame+0x6>
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <nwkTxFrame+0x8>
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	9c 83       	std	Y+4, r25	; 0x04
    2504:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->data.header;
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	9c 81       	ldd	r25, Y+4	; 0x04
    250a:	02 96       	adiw	r24, 0x02	; 2
    250c:	9a 83       	std	Y+2, r25	; 0x02
    250e:	89 83       	std	Y+1, r24	; 0x01

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	8e 57       	subi	r24, 0x7E	; 126
    2516:	9f 4f       	sbci	r25, 0xFF	; 255
    2518:	fc 01       	movw	r30, r24
    251a:	80 81       	ld	r24, Z
    251c:	88 2f       	mov	r24, r24
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	82 70       	andi	r24, 0x02	; 2
    2522:	90 70       	andi	r25, 0x00	; 0
    2524:	00 97       	sbiw	r24, 0x00	; 0
    2526:	31 f0       	breq	.+12     	; 0x2534 <nwkTxFrame+0x3e>
  {
    frame->state = NWK_TX_STATE_SEND;
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	9c 81       	ldd	r25, Y+4	; 0x04
    252c:	21 e1       	ldi	r18, 0x11	; 17
    252e:	fc 01       	movw	r30, r24
    2530:	20 83       	st	Z, r18
    2532:	12 c0       	rjmp	.+36     	; 0x2558 <nwkTxFrame+0x62>
  }
  else
  {
#ifdef NWK_ENABLE_SECURITY
    if (frame->data.header.nwkFcf.securityEnabled)
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	9c 81       	ldd	r25, Y+4	; 0x04
    2538:	fc 01       	movw	r30, r24
    253a:	83 85       	ldd	r24, Z+11	; 0x0b
    253c:	82 70       	andi	r24, 0x02	; 2
    253e:	88 23       	and	r24, r24
    2540:	31 f0       	breq	.+12     	; 0x254e <nwkTxFrame+0x58>
      frame->state = NWK_TX_STATE_ENCRYPT;
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	20 e1       	ldi	r18, 0x10	; 16
    2548:	fc 01       	movw	r30, r24
    254a:	20 83       	st	Z, r18
    254c:	05 c0       	rjmp	.+10     	; 0x2558 <nwkTxFrame+0x62>
    else
#endif
      frame->state = NWK_TX_STATE_SEND;
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	9c 81       	ldd	r25, Y+4	; 0x04
    2552:	21 e1       	ldi	r18, 0x11	; 17
    2554:	fc 01       	movw	r30, r24
    2556:	20 83       	st	Z, r18
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	9c 81       	ldd	r25, Y+4	; 0x04
    255c:	81 58       	subi	r24, 0x81	; 129
    255e:	9f 4f       	sbci	r25, 0xFF	; 255
    2560:	fc 01       	movw	r30, r24
    2562:	10 82       	st	Z, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	8e 57       	subi	r24, 0x7E	; 126
    256a:	9f 4f       	sbci	r25, 0xFF	; 255
    256c:	fc 01       	movw	r30, r24
    256e:	80 81       	ld	r24, Z
    2570:	88 2f       	mov	r24, r24
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	81 70       	andi	r24, 0x01	; 1
    2576:	90 70       	andi	r25, 0x00	; 0
    2578:	88 23       	and	r24, r24
    257a:	41 f0       	breq	.+16     	; 0x258c <nwkTxFrame+0x96>
    frame->data.header.macDstPanId = 0xffff;
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
    2580:	2f ef       	ldi	r18, 0xFF	; 255
    2582:	3f ef       	ldi	r19, 0xFF	; 255
    2584:	fc 01       	movw	r30, r24
    2586:	36 83       	std	Z+6, r19	; 0x06
    2588:	25 83       	std	Z+5, r18	; 0x05
    258a:	09 c0       	rjmp	.+18     	; 0x259e <nwkTxFrame+0xa8>
  else
    frame->data.header.macDstPanId = nwkIb.panId;
    258c:	20 91 18 08 	lds	r18, 0x0818
    2590:	30 91 19 08 	lds	r19, 0x0819
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	fc 01       	movw	r30, r24
    259a:	36 83       	std	Z+6, r19	; 0x06
    259c:	25 83       	std	Z+5, r18	; 0x05

#ifdef NWK_ENABLE_ROUTING
  header->macDstAddr = nwkRouteNextHop(header->nwkDstAddr);
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	9a 81       	ldd	r25, Y+2	; 0x02
    25a2:	fc 01       	movw	r30, r24
    25a4:	85 85       	ldd	r24, Z+13	; 0x0d
    25a6:	96 85       	ldd	r25, Z+14	; 0x0e
    25a8:	0e 94 9f 0c 	call	0x193e	; 0x193e <nwkRouteNextHop>
    25ac:	9c 01       	movw	r18, r24
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	9a 81       	ldd	r25, Y+2	; 0x02
    25b2:	fc 01       	movw	r30, r24
    25b4:	36 83       	std	Z+6, r19	; 0x06
    25b6:	25 83       	std	Z+5, r18	; 0x05
#else
  header->macDstAddr = header->nwkDstAddr;
#endif
  header->macSrcAddr = nwkIb.addr;
    25b8:	20 91 16 08 	lds	r18, 0x0816
    25bc:	30 91 17 08 	lds	r19, 0x0817
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	9a 81       	ldd	r25, Y+2	; 0x02
    25c4:	fc 01       	movw	r30, r24
    25c6:	30 87       	std	Z+8, r19	; 0x08
    25c8:	27 83       	std	Z+7, r18	; 0x07
  header->macSeq = ++nwkIb.macSeqNum;
    25ca:	80 91 1b 08 	lds	r24, 0x081B
    25ce:	8f 5f       	subi	r24, 0xFF	; 255
    25d0:	80 93 1b 08 	sts	0x081B, r24
    25d4:	20 91 1b 08 	lds	r18, 0x081B
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	fc 01       	movw	r30, r24
    25de:	22 83       	std	Z+2, r18	; 0x02

  if (0xffff == header->macDstAddr)
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	9a 81       	ldd	r25, Y+2	; 0x02
    25e4:	fc 01       	movw	r30, r24
    25e6:	85 81       	ldd	r24, Z+5	; 0x05
    25e8:	96 81       	ldd	r25, Z+6	; 0x06
    25ea:	ff ef       	ldi	r31, 0xFF	; 255
    25ec:	8f 3f       	cpi	r24, 0xFF	; 255
    25ee:	9f 07       	cpc	r25, r31
    25f0:	41 f4       	brne	.+16     	; 0x2602 <nwkTxFrame+0x10c>
    header->macFcf = 0x8841;
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	9a 81       	ldd	r25, Y+2	; 0x02
    25f6:	21 e4       	ldi	r18, 0x41	; 65
    25f8:	38 e8       	ldi	r19, 0x88	; 136
    25fa:	fc 01       	movw	r30, r24
    25fc:	31 83       	std	Z+1, r19	; 0x01
    25fe:	20 83       	st	Z, r18
    2600:	07 c0       	rjmp	.+14     	; 0x2610 <nwkTxFrame+0x11a>
  else
    header->macFcf = 0x8861;
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	9a 81       	ldd	r25, Y+2	; 0x02
    2606:	21 e6       	ldi	r18, 0x61	; 97
    2608:	38 e8       	ldi	r19, 0x88	; 136
    260a:	fc 01       	movw	r30, r24
    260c:	31 83       	std	Z+1, r19	; 0x01
    260e:	20 83       	st	Z, r18

  ++nwkTxActiveFrames;
    2610:	80 91 d3 06 	lds	r24, 0x06D3
    2614:	8f 5f       	subi	r24, 0xFF	; 255
    2616:	80 93 d3 06 	sts	0x06D3, r24
}
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	df 91       	pop	r29
    2624:	cf 91       	pop	r28
    2626:	08 95       	ret

00002628 <nwkTxBroadcastFrame>:

/*****************************************************************************
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    2628:	cf 93       	push	r28
    262a:	df 93       	push	r29
    262c:	00 d0       	rcall	.+0      	; 0x262e <nwkTxBroadcastFrame+0x6>
    262e:	00 d0       	rcall	.+0      	; 0x2630 <nwkTxBroadcastFrame+0x8>
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	9c 83       	std	Y+4, r25	; 0x04
    2636:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc(frame->size - sizeof(NwkFrameHeader_t))))
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	9c 81       	ldd	r25, Y+4	; 0x04
    263c:	fc 01       	movw	r30, r24
    263e:	81 81       	ldd	r24, Z+1	; 0x01
    2640:	80 51       	subi	r24, 0x10	; 16
    2642:	0e 94 1b 0a 	call	0x1436	; 0x1436 <nwkFrameAlloc>
    2646:	9a 83       	std	Y+2, r25	; 0x02
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	9a 81       	ldd	r25, Y+2	; 0x02
    264e:	00 97       	sbiw	r24, 0x00	; 0
    2650:	09 f4       	brne	.+2      	; 0x2654 <nwkTxBroadcastFrame+0x2c>
    2652:	57 c0       	rjmp	.+174    	; 0x2702 <nwkTxBroadcastFrame+0xda>
    return;

  newFrame->tx.confirm = nwkTxBroadcastConf;
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	9a 81       	ldd	r25, Y+2	; 0x02
    2658:	8d 57       	subi	r24, 0x7D	; 125
    265a:	9f 4f       	sbci	r25, 0xFF	; 255
    265c:	29 e8       	ldi	r18, 0x89	; 137
    265e:	33 e1       	ldi	r19, 0x13	; 19
    2660:	fc 01       	movw	r30, r24
    2662:	31 83       	std	Z+1, r19	; 0x01
    2664:	20 83       	st	Z, r18
  memcpy((uint8_t *)&newFrame->data, (uint8_t *)&frame->data, frame->size);
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	9a 81       	ldd	r25, Y+2	; 0x02
    266a:	02 96       	adiw	r24, 0x02	; 2
    266c:	2b 81       	ldd	r18, Y+3	; 0x03
    266e:	3c 81       	ldd	r19, Y+4	; 0x04
    2670:	a9 01       	movw	r20, r18
    2672:	4e 5f       	subi	r20, 0xFE	; 254
    2674:	5f 4f       	sbci	r21, 0xFF	; 255
    2676:	2b 81       	ldd	r18, Y+3	; 0x03
    2678:	3c 81       	ldd	r19, Y+4	; 0x04
    267a:	f9 01       	movw	r30, r18
    267c:	21 81       	ldd	r18, Z+1	; 0x01
    267e:	22 2f       	mov	r18, r18
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	ba 01       	movw	r22, r20
    2684:	a9 01       	movw	r20, r18
    2686:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <memcpy>

  newFrame->state = NWK_TX_STATE_SEND;
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	21 e1       	ldi	r18, 0x11	; 17
    2690:	fc 01       	movw	r30, r24
    2692:	20 83       	st	Z, r18
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	9a 81       	ldd	r25, Y+2	; 0x02
    2698:	81 58       	subi	r24, 0x81	; 129
    269a:	9f 4f       	sbci	r25, 0xFF	; 255
    269c:	fc 01       	movw	r30, r24
    269e:	10 82       	st	Z, r1

  newFrame->data.header.macFcf = 0x8841;
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	9a 81       	ldd	r25, Y+2	; 0x02
    26a4:	21 e4       	ldi	r18, 0x41	; 65
    26a6:	38 e8       	ldi	r19, 0x88	; 136
    26a8:	fc 01       	movw	r30, r24
    26aa:	33 83       	std	Z+3, r19	; 0x03
    26ac:	22 83       	std	Z+2, r18	; 0x02
  newFrame->data.header.macDstAddr = 0xffff;
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	2f ef       	ldi	r18, 0xFF	; 255
    26b4:	3f ef       	ldi	r19, 0xFF	; 255
    26b6:	fc 01       	movw	r30, r24
    26b8:	30 87       	std	Z+8, r19	; 0x08
    26ba:	27 83       	std	Z+7, r18	; 0x07
  newFrame->data.header.macDstPanId = nwkIb.panId;
    26bc:	20 91 18 08 	lds	r18, 0x0818
    26c0:	30 91 19 08 	lds	r19, 0x0819
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	9a 81       	ldd	r25, Y+2	; 0x02
    26c8:	fc 01       	movw	r30, r24
    26ca:	36 83       	std	Z+6, r19	; 0x06
    26cc:	25 83       	std	Z+5, r18	; 0x05
  newFrame->data.header.macSrcAddr = nwkIb.addr;
    26ce:	20 91 16 08 	lds	r18, 0x0816
    26d2:	30 91 17 08 	lds	r19, 0x0817
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	9a 81       	ldd	r25, Y+2	; 0x02
    26da:	fc 01       	movw	r30, r24
    26dc:	32 87       	std	Z+10, r19	; 0x0a
    26de:	21 87       	std	Z+9, r18	; 0x09
  newFrame->data.header.macSeq = ++nwkIb.macSeqNum;
    26e0:	80 91 1b 08 	lds	r24, 0x081B
    26e4:	8f 5f       	subi	r24, 0xFF	; 255
    26e6:	80 93 1b 08 	sts	0x081B, r24
    26ea:	20 91 1b 08 	lds	r18, 0x081B
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	fc 01       	movw	r30, r24
    26f4:	24 83       	std	Z+4, r18	; 0x04

  ++nwkTxActiveFrames;
    26f6:	80 91 d3 06 	lds	r24, 0x06D3
    26fa:	8f 5f       	subi	r24, 0xFF	; 255
    26fc:	80 93 d3 06 	sts	0x06D3, r24
    2700:	01 c0       	rjmp	.+2      	; 0x2704 <nwkTxBroadcastFrame+0xdc>
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc(frame->size - sizeof(NwkFrameHeader_t))))
    return;
    2702:	00 00       	nop
  newFrame->data.header.macDstPanId = nwkIb.panId;
  newFrame->data.header.macSrcAddr = nwkIb.addr;
  newFrame->data.header.macSeq = ++nwkIb.macSeqNum;

  ++nwkTxActiveFrames;
}
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	08 95       	ret

00002712 <nwkTxBroadcastConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkTxBroadcastConf(NwkFrame_t *frame)
{
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	00 d0       	rcall	.+0      	; 0x2718 <nwkTxBroadcastConf+0x6>
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62
    271c:	9a 83       	std	Y+2, r25	; 0x02
    271e:	89 83       	std	Y+1, r24	; 0x01
  nwkFrameFree(frame);
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <nwkFrameFree>
}
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	08 95       	ret

00002732 <nwkTxAckReceived>:

/*****************************************************************************
*****************************************************************************/
void nwkTxAckReceived(NWK_DataInd_t *ind)
{
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	28 97       	sbiw	r28, 0x08	; 8
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	f8 94       	cli
    2740:	de bf       	out	0x3e, r29	; 62
    2742:	0f be       	out	0x3f, r0	; 63
    2744:	cd bf       	out	0x3d, r28	; 61
    2746:	98 87       	std	Y+8, r25	; 0x08
    2748:	8f 83       	std	Y+7, r24	; 0x07
  NwkAckCommand_t *command = (NwkAckCommand_t *)ind->data;
    274a:	8f 81       	ldd	r24, Y+7	; 0x07
    274c:	98 85       	ldd	r25, Y+8	; 0x08
    274e:	fc 01       	movw	r30, r24
    2750:	85 81       	ldd	r24, Z+5	; 0x05
    2752:	96 81       	ldd	r25, Z+6	; 0x06
    2754:	9c 83       	std	Y+4, r25	; 0x04
    2756:	8b 83       	std	Y+3, r24	; 0x03

  if (0 == nwkTxActiveFrames)
    2758:	80 91 d3 06 	lds	r24, 0x06D3
    275c:	88 23       	and	r24, r24
    275e:	99 f1       	breq	.+102    	; 0x27c6 <nwkTxAckReceived+0x94>
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    2760:	1a 82       	std	Y+2, r1	; 0x02
    2762:	19 82       	std	Y+1, r1	; 0x01
    2764:	2a c0       	rjmp	.+84     	; 0x27ba <nwkTxAckReceived+0x88>
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <nwkFrameByIndex>
    276c:	9e 83       	std	Y+6, r25	; 0x06
    276e:	8d 83       	std	Y+5, r24	; 0x05

    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->data.header.nwkSeq == command->seq)
    2770:	8d 81       	ldd	r24, Y+5	; 0x05
    2772:	9e 81       	ldd	r25, Y+6	; 0x06
    2774:	fc 01       	movw	r30, r24
    2776:	80 81       	ld	r24, Z
    2778:	84 31       	cpi	r24, 0x14	; 20
    277a:	d1 f4       	brne	.+52     	; 0x27b0 <nwkTxAckReceived+0x7e>
    277c:	8d 81       	ldd	r24, Y+5	; 0x05
    277e:	9e 81       	ldd	r25, Y+6	; 0x06
    2780:	fc 01       	movw	r30, r24
    2782:	24 85       	ldd	r18, Z+12	; 0x0c
    2784:	8b 81       	ldd	r24, Y+3	; 0x03
    2786:	9c 81       	ldd	r25, Y+4	; 0x04
    2788:	fc 01       	movw	r30, r24
    278a:	81 81       	ldd	r24, Z+1	; 0x01
    278c:	28 17       	cp	r18, r24
    278e:	81 f4       	brne	.+32     	; 0x27b0 <nwkTxAckReceived+0x7e>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    2790:	8d 81       	ldd	r24, Y+5	; 0x05
    2792:	9e 81       	ldd	r25, Y+6	; 0x06
    2794:	25 e1       	ldi	r18, 0x15	; 21
    2796:	fc 01       	movw	r30, r24
    2798:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	9c 81       	ldd	r25, Y+4	; 0x04
    279e:	fc 01       	movw	r30, r24
    27a0:	22 81       	ldd	r18, Z+2	; 0x02
    27a2:	8d 81       	ldd	r24, Y+5	; 0x05
    27a4:	9e 81       	ldd	r25, Y+6	; 0x06
    27a6:	8e 57       	subi	r24, 0x7E	; 126
    27a8:	9f 4f       	sbci	r25, 0xFF	; 255
    27aa:	fc 01       	movw	r30, r24
    27ac:	20 83       	st	Z, r18
      return;
    27ae:	0c c0       	rjmp	.+24     	; 0x27c8 <nwkTxAckReceived+0x96>
  NwkAckCommand_t *command = (NwkAckCommand_t *)ind->data;

  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	9a 81       	ldd	r25, Y+2	; 0x02
    27b4:	01 96       	adiw	r24, 0x01	; 1
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	9a 81       	ldd	r25, Y+2	; 0x02
    27be:	83 30       	cpi	r24, 0x03	; 3
    27c0:	91 05       	cpc	r25, r1
    27c2:	8c f2       	brlt	.-94     	; 0x2766 <nwkTxAckReceived+0x34>
    27c4:	01 c0       	rjmp	.+2      	; 0x27c8 <nwkTxAckReceived+0x96>
void nwkTxAckReceived(NWK_DataInd_t *ind)
{
  NwkAckCommand_t *command = (NwkAckCommand_t *)ind->data;

  if (0 == nwkTxActiveFrames)
    return;
    27c6:	00 00       	nop
      frame->state = NWK_TX_STATE_CONFIRM;
      frame->tx.control = command->control;
      return;
    }
  }
}
    27c8:	28 96       	adiw	r28, 0x08	; 8
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	df 91       	pop	r29
    27d6:	cf 91       	pop	r28
    27d8:	08 95       	ret

000027da <nwkTxAckWaitTimerHandler>:
}

/*****************************************************************************
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    27da:	cf 93       	push	r28
    27dc:	df 93       	push	r29
    27de:	00 d0       	rcall	.+0      	; 0x27e0 <nwkTxAckWaitTimerHandler+0x6>
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <nwkTxAckWaitTimerHandler+0x8>
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <nwkTxAckWaitTimerHandler+0xa>
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	9e 83       	std	Y+6, r25	; 0x06
    27ea:	8d 83       	std	Y+5, r24	; 0x05
  if (0 == nwkTxActiveFrames)
    27ec:	80 91 d3 06 	lds	r24, 0x06D3
    27f0:	88 23       	and	r24, r24
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <nwkTxAckWaitTimerHandler+0x1c>
    27f4:	43 c0       	rjmp	.+134    	; 0x287c <nwkTxAckWaitTimerHandler+0xa2>
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    27f6:	1a 82       	std	Y+2, r1	; 0x02
    27f8:	19 82       	std	Y+1, r1	; 0x01
    27fa:	36 c0       	rjmp	.+108    	; 0x2868 <nwkTxAckWaitTimerHandler+0x8e>
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <nwkFrameByIndex>
    2802:	9c 83       	std	Y+4, r25	; 0x04
    2804:	8b 83       	std	Y+3, r24	; 0x03

    if (NWK_TX_STATE_WAIT_ACK == frame->state && 0 == --frame->tx.timeout)
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	9c 81       	ldd	r25, Y+4	; 0x04
    280a:	fc 01       	movw	r30, r24
    280c:	80 81       	ld	r24, Z
    280e:	84 31       	cpi	r24, 0x14	; 20
    2810:	31 f5       	brne	.+76     	; 0x285e <nwkTxAckWaitTimerHandler+0x84>
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	9c 81       	ldd	r25, Y+4	; 0x04
    2816:	80 58       	subi	r24, 0x80	; 128
    2818:	9f 4f       	sbci	r25, 0xFF	; 255
    281a:	fc 01       	movw	r30, r24
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	9c 01       	movw	r18, r24
    2822:	21 50       	subi	r18, 0x01	; 1
    2824:	30 40       	sbci	r19, 0x00	; 0
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	9c 81       	ldd	r25, Y+4	; 0x04
    282a:	80 58       	subi	r24, 0x80	; 128
    282c:	9f 4f       	sbci	r25, 0xFF	; 255
    282e:	fc 01       	movw	r30, r24
    2830:	31 83       	std	Z+1, r19	; 0x01
    2832:	20 83       	st	Z, r18
    2834:	8b 81       	ldd	r24, Y+3	; 0x03
    2836:	9c 81       	ldd	r25, Y+4	; 0x04
    2838:	80 58       	subi	r24, 0x80	; 128
    283a:	9f 4f       	sbci	r25, 0xFF	; 255
    283c:	fc 01       	movw	r30, r24
    283e:	80 81       	ld	r24, Z
    2840:	91 81       	ldd	r25, Z+1	; 0x01
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	61 f4       	brne	.+24     	; 0x285e <nwkTxAckWaitTimerHandler+0x84>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	9c 81       	ldd	r25, Y+4	; 0x04
    284a:	25 e1       	ldi	r18, 0x15	; 21
    284c:	fc 01       	movw	r30, r24
    284e:	20 83       	st	Z, r18
      frame->tx.status = NWK_NO_ACK_STATUS;
    2850:	8b 81       	ldd	r24, Y+3	; 0x03
    2852:	9c 81       	ldd	r25, Y+4	; 0x04
    2854:	81 58       	subi	r24, 0x81	; 129
    2856:	9f 4f       	sbci	r25, 0xFF	; 255
    2858:	20 e1       	ldi	r18, 0x10	; 16
    285a:	fc 01       	movw	r30, r24
    285c:	20 83       	st	Z, r18
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	9a 81       	ldd	r25, Y+2	; 0x02
    2862:	01 96       	adiw	r24, 0x01	; 1
    2864:	9a 83       	std	Y+2, r25	; 0x02
    2866:	89 83       	std	Y+1, r24	; 0x01
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	9a 81       	ldd	r25, Y+2	; 0x02
    286c:	83 30       	cpi	r24, 0x03	; 3
    286e:	91 05       	cpc	r25, r1
    2870:	2c f2       	brlt	.-118    	; 0x27fc <nwkTxAckWaitTimerHandler+0x22>
      frame->state = NWK_TX_STATE_CONFIRM;
      frame->tx.status = NWK_NO_ACK_STATUS;
    }
  }

  SYS_TimerStart(timer);
    2872:	8d 81       	ldd	r24, Y+5	; 0x05
    2874:	9e 81       	ldd	r25, Y+6	; 0x06
    2876:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <SYS_TimerStart>
    287a:	01 c0       	rjmp	.+2      	; 0x287e <nwkTxAckWaitTimerHandler+0xa4>
/*****************************************************************************
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  if (0 == nwkTxActiveFrames)
    return;
    287c:	00 00       	nop
      frame->tx.status = NWK_NO_ACK_STATUS;
    }
  }

  SYS_TimerStart(timer);
}
    287e:	26 96       	adiw	r28, 0x06	; 6
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	f8 94       	cli
    2884:	de bf       	out	0x3e, r29	; 62
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	cd bf       	out	0x3d, r28	; 61
    288a:	df 91       	pop	r29
    288c:	cf 91       	pop	r28
    288e:	08 95       	ret

00002890 <nwkTxEncryptConf>:

#ifdef NWK_ENABLE_SECURITY
/*****************************************************************************
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
    2890:	cf 93       	push	r28
    2892:	df 93       	push	r29
    2894:	00 d0       	rcall	.+0      	; 0x2896 <nwkTxEncryptConf+0x6>
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
    289a:	9a 83       	std	Y+2, r25	; 0x02
    289c:	89 83       	std	Y+1, r24	; 0x01
  frame->state = NWK_TX_STATE_SEND;
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	9a 81       	ldd	r25, Y+2	; 0x02
    28a2:	21 e1       	ldi	r18, 0x11	; 17
    28a4:	fc 01       	movw	r30, r24
    28a6:	20 83       	st	Z, r18
}
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	08 95       	ret

000028b2 <convertPhyStatus>:
#endif

/*****************************************************************************
*****************************************************************************/
static uint8_t convertPhyStatus(uint8_t status)
{
    28b2:	cf 93       	push	r28
    28b4:	df 93       	push	r29
    28b6:	0f 92       	push	r0
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	89 83       	std	Y+1, r24	; 0x01
  if (TRAC_STATUS_SUCCESS == status ||
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	88 23       	and	r24, r24
    28c2:	31 f0       	breq	.+12     	; 0x28d0 <convertPhyStatus+0x1e>
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	81 30       	cpi	r24, 0x01	; 1
    28c8:	19 f0       	breq	.+6      	; 0x28d0 <convertPhyStatus+0x1e>
      TRAC_STATUS_SUCCESS_DATA_PENDING == status ||
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	82 30       	cpi	r24, 0x02	; 2
    28ce:	11 f4       	brne	.+4      	; 0x28d4 <convertPhyStatus+0x22>
      TRAC_STATUS_SUCCESS_WAIT_FOR_ACK == status)
    return NWK_SUCCESS_STATUS;
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	0b c0       	rjmp	.+22     	; 0x28ea <convertPhyStatus+0x38>

  else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	83 30       	cpi	r24, 0x03	; 3
    28d8:	11 f4       	brne	.+4      	; 0x28de <convertPhyStatus+0x2c>
    return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    28da:	80 e2       	ldi	r24, 0x20	; 32
    28dc:	06 c0       	rjmp	.+12     	; 0x28ea <convertPhyStatus+0x38>

  else if (TRAC_STATUS_NO_ACK == status)
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	85 30       	cpi	r24, 0x05	; 5
    28e2:	11 f4       	brne	.+4      	; 0x28e8 <convertPhyStatus+0x36>
    return NWK_PHY_NO_ACK_STATUS;
    28e4:	81 e2       	ldi	r24, 0x21	; 33
    28e6:	01 c0       	rjmp	.+2      	; 0x28ea <convertPhyStatus+0x38>

  else
    return NWK_ERROR_STATUS;
    28e8:	81 e0       	ldi	r24, 0x01	; 1
}
    28ea:	0f 90       	pop	r0
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	08 95       	ret

000028f2 <PHY_DataConf>:

/*****************************************************************************
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
    28f2:	0f 93       	push	r16
    28f4:	1f 93       	push	r17
    28f6:	cf 93       	push	r28
    28f8:	df 93       	push	r29
    28fa:	0f 92       	push	r0
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	89 83       	std	Y+1, r24	; 0x01
  nwkTxPhyActiveFrame->tx.status = convertPhyStatus(status);
    2902:	00 91 d1 06 	lds	r16, 0x06D1
    2906:	10 91 d2 06 	lds	r17, 0x06D2
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <convertPhyStatus>
    2910:	28 2f       	mov	r18, r24
    2912:	c8 01       	movw	r24, r16
    2914:	81 58       	subi	r24, 0x81	; 129
    2916:	9f 4f       	sbci	r25, 0xFF	; 255
    2918:	fc 01       	movw	r30, r24
    291a:	20 83       	st	Z, r18
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    291c:	80 91 d1 06 	lds	r24, 0x06D1
    2920:	90 91 d2 06 	lds	r25, 0x06D2
    2924:	23 e1       	ldi	r18, 0x13	; 19
    2926:	fc 01       	movw	r30, r24
    2928:	20 83       	st	Z, r18
  nwkTxPhyActiveFrame = NULL;
    292a:	10 92 d2 06 	sts	0x06D2, r1
    292e:	10 92 d1 06 	sts	0x06D1, r1
}
    2932:	0f 90       	pop	r0
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28
    2938:	1f 91       	pop	r17
    293a:	0f 91       	pop	r16
    293c:	08 95       	ret

0000293e <nwkTxTaskHandler>:

/*****************************************************************************
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	00 d0       	rcall	.+0      	; 0x2944 <nwkTxTaskHandler+0x6>
    2944:	00 d0       	rcall	.+0      	; 0x2946 <nwkTxTaskHandler+0x8>
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
  if (0 == nwkTxActiveFrames)
    294a:	80 91 d3 06 	lds	r24, 0x06D3
    294e:	88 23       	and	r24, r24
    2950:	09 f4       	brne	.+2      	; 0x2954 <nwkTxTaskHandler+0x16>
    2952:	ad c0       	rjmp	.+346    	; 0x2aae <nwkTxTaskHandler+0x170>
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    2954:	1a 82       	std	Y+2, r1	; 0x02
    2956:	19 82       	std	Y+1, r1	; 0x01
    2958:	a3 c0       	rjmp	.+326    	; 0x2aa0 <nwkTxTaskHandler+0x162>
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <nwkFrameByIndex>
    2960:	9c 83       	std	Y+4, r25	; 0x04
    2962:	8b 83       	std	Y+3, r24	; 0x03

    switch (frame->state)
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	9c 81       	ldd	r25, Y+4	; 0x04
    2968:	fc 01       	movw	r30, r24
    296a:	80 81       	ld	r24, Z
    296c:	88 2f       	mov	r24, r24
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	82 31       	cpi	r24, 0x12	; 18
    2972:	91 05       	cpc	r25, r1
    2974:	09 f4       	brne	.+2      	; 0x2978 <nwkTxTaskHandler+0x3a>
    2976:	8a c0       	rjmp	.+276    	; 0x2a8c <nwkTxTaskHandler+0x14e>
    2978:	83 31       	cpi	r24, 0x13	; 19
    297a:	91 05       	cpc	r25, r1
    297c:	3c f4       	brge	.+14     	; 0x298c <nwkTxTaskHandler+0x4e>
    297e:	80 31       	cpi	r24, 0x10	; 16
    2980:	91 05       	cpc	r25, r1
    2982:	81 f0       	breq	.+32     	; 0x29a4 <nwkTxTaskHandler+0x66>
    2984:	81 31       	cpi	r24, 0x11	; 17
    2986:	91 05       	cpc	r25, r1
    2988:	99 f0       	breq	.+38     	; 0x29b0 <nwkTxTaskHandler+0x72>
    298a:	7f c0       	rjmp	.+254    	; 0x2a8a <nwkTxTaskHandler+0x14c>
    298c:	84 31       	cpi	r24, 0x14	; 20
    298e:	91 05       	cpc	r25, r1
    2990:	09 f4       	brne	.+2      	; 0x2994 <nwkTxTaskHandler+0x56>
    2992:	7e c0       	rjmp	.+252    	; 0x2a90 <nwkTxTaskHandler+0x152>
    2994:	84 31       	cpi	r24, 0x14	; 20
    2996:	91 05       	cpc	r25, r1
    2998:	4c f1       	brlt	.+82     	; 0x29ec <nwkTxTaskHandler+0xae>
    299a:	85 31       	cpi	r24, 0x15	; 21
    299c:	91 05       	cpc	r25, r1
    299e:	09 f4       	brne	.+2      	; 0x29a2 <nwkTxTaskHandler+0x64>
    29a0:	5f c0       	rjmp	.+190    	; 0x2a60 <nwkTxTaskHandler+0x122>
    29a2:	73 c0       	rjmp	.+230    	; 0x2a8a <nwkTxTaskHandler+0x14c>
    {
#ifdef NWK_ENABLE_SECURITY
      case NWK_TX_STATE_ENCRYPT:
      {
        nwkSecurityProcess(frame, true);
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	9c 81       	ldd	r25, Y+4	; 0x04
    29a8:	61 e0       	ldi	r22, 0x01	; 1
    29aa:	0e 94 8b 07 	call	0xf16	; 0xf16 <nwkSecurityProcess>
      } break;
    29ae:	73 c0       	rjmp	.+230    	; 0x2a96 <nwkTxTaskHandler+0x158>
#endif

      case NWK_TX_STATE_SEND:
      {
        if (!PHY_Busy())
    29b0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <PHY_Busy>
    29b4:	98 2f       	mov	r25, r24
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	89 27       	eor	r24, r25
    29ba:	88 23       	and	r24, r24
    29bc:	09 f4       	brne	.+2      	; 0x29c0 <nwkTxTaskHandler+0x82>
    29be:	6a c0       	rjmp	.+212    	; 0x2a94 <nwkTxTaskHandler+0x156>
        {
          nwkTxPhyActiveFrame = frame;
    29c0:	8b 81       	ldd	r24, Y+3	; 0x03
    29c2:	9c 81       	ldd	r25, Y+4	; 0x04
    29c4:	90 93 d2 06 	sts	0x06D2, r25
    29c8:	80 93 d1 06 	sts	0x06D1, r24
          frame->state = NWK_TX_STATE_WAIT_CONF;
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	9c 81       	ldd	r25, Y+4	; 0x04
    29d0:	22 e1       	ldi	r18, 0x12	; 18
    29d2:	fc 01       	movw	r30, r24
    29d4:	20 83       	st	Z, r18
          PHY_DataReq((uint8_t *)&frame->data, frame->size);
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	9c 81       	ldd	r25, Y+4	; 0x04
    29da:	02 96       	adiw	r24, 0x02	; 2
    29dc:	2b 81       	ldd	r18, Y+3	; 0x03
    29de:	3c 81       	ldd	r19, Y+4	; 0x04
    29e0:	f9 01       	movw	r30, r18
    29e2:	21 81       	ldd	r18, Z+1	; 0x01
    29e4:	62 2f       	mov	r22, r18
    29e6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <PHY_DataReq>
        }
      } break;
    29ea:	54 c0       	rjmp	.+168    	; 0x2a94 <nwkTxTaskHandler+0x156>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	9c 81       	ldd	r25, Y+4	; 0x04
    29f0:	81 58       	subi	r24, 0x81	; 129
    29f2:	9f 4f       	sbci	r25, 0xFF	; 255
    29f4:	fc 01       	movw	r30, r24
    29f6:	80 81       	ld	r24, Z
    29f8:	88 23       	and	r24, r24
    29fa:	61 f5       	brne	.+88     	; 0x2a54 <nwkTxTaskHandler+0x116>
        {
          if (frame->data.header.nwkSrcAddr == nwkIb.addr &&
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2a00:	fc 01       	movw	r30, r24
    2a02:	25 85       	ldd	r18, Z+13	; 0x0d
    2a04:	36 85       	ldd	r19, Z+14	; 0x0e
    2a06:	80 91 16 08 	lds	r24, 0x0816
    2a0a:	90 91 17 08 	lds	r25, 0x0817
    2a0e:	28 17       	cp	r18, r24
    2a10:	39 07       	cpc	r19, r25
    2a12:	d1 f4       	brne	.+52     	; 0x2a48 <nwkTxTaskHandler+0x10a>
              frame->data.header.nwkFcf.ackRequest)
    2a14:	8b 81       	ldd	r24, Y+3	; 0x03
    2a16:	9c 81       	ldd	r25, Y+4	; 0x04

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->data.header.nwkSrcAddr == nwkIb.addr &&
    2a18:	fc 01       	movw	r30, r24
    2a1a:	83 85       	ldd	r24, Z+11	; 0x0b
    2a1c:	81 70       	andi	r24, 0x01	; 1
    2a1e:	88 23       	and	r24, r24
    2a20:	99 f0       	breq	.+38     	; 0x2a48 <nwkTxTaskHandler+0x10a>
              frame->data.header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	9c 81       	ldd	r25, Y+4	; 0x04
    2a26:	24 e1       	ldi	r18, 0x14	; 20
    2a28:	fc 01       	movw	r30, r24
    2a2a:	20 83       	st	Z, r18
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a30:	80 58       	subi	r24, 0x80	; 128
    2a32:	9f 4f       	sbci	r25, 0xFF	; 255
    2a34:	2b e0       	ldi	r18, 0x0B	; 11
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	fc 01       	movw	r30, r24
    2a3a:	31 83       	std	Z+1, r19	; 0x01
    2a3c:	20 83       	st	Z, r18
            SYS_TimerStart(&nwkTxAckWaitTimer);
    2a3e:	84 ed       	ldi	r24, 0xD4	; 212
    2a40:	96 e0       	ldi	r25, 0x06	; 6
    2a42:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <SYS_TimerStart>
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
	}
      } break;
    2a46:	27 c0       	rjmp	.+78     	; 0x2a96 <nwkTxTaskHandler+0x158>
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
            SYS_TimerStart(&nwkTxAckWaitTimer);
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    2a48:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4c:	25 e1       	ldi	r18, 0x15	; 21
    2a4e:	fc 01       	movw	r30, r24
    2a50:	20 83       	st	Z, r18
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
	}
      } break;
    2a52:	21 c0       	rjmp	.+66     	; 0x2a96 <nwkTxTaskHandler+0x158>
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	9c 81       	ldd	r25, Y+4	; 0x04
    2a58:	25 e1       	ldi	r18, 0x15	; 21
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	20 83       	st	Z, r18
	}
      } break;
    2a5e:	1b c0       	rjmp	.+54     	; 0x2a96 <nwkTxTaskHandler+0x158>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	9c 81       	ldd	r25, Y+4	; 0x04
    2a64:	0e 94 16 0c 	call	0x182c	; 0x182c <nwkRouteFrameSent>
#endif
        frame->tx.confirm(frame);
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6c:	8d 57       	subi	r24, 0x7D	; 125
    2a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a70:	fc 01       	movw	r30, r24
    2a72:	20 81       	ld	r18, Z
    2a74:	31 81       	ldd	r19, Z+1	; 0x01
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7a:	f9 01       	movw	r30, r18
    2a7c:	09 95       	icall
        --nwkTxActiveFrames;
    2a7e:	80 91 d3 06 	lds	r24, 0x06D3
    2a82:	81 50       	subi	r24, 0x01	; 1
    2a84:	80 93 d3 06 	sts	0x06D3, r24
      } break;
    2a88:	06 c0       	rjmp	.+12     	; 0x2a96 <nwkTxTaskHandler+0x158>

      default:
        break;
    2a8a:	05 c0       	rjmp	.+10     	; 0x2a96 <nwkTxTaskHandler+0x158>
          PHY_DataReq((uint8_t *)&frame->data, frame->size);
        }
      } break;

      case NWK_TX_STATE_WAIT_CONF:
        break;
    2a8c:	00 00       	nop
    2a8e:	03 c0       	rjmp	.+6      	; 0x2a96 <nwkTxTaskHandler+0x158>
          frame->state = NWK_TX_STATE_CONFIRM;
	}
      } break;

      case NWK_TX_STATE_WAIT_ACK:
        break;
    2a90:	00 00       	nop
    2a92:	01 c0       	rjmp	.+2      	; 0x2a96 <nwkTxTaskHandler+0x158>
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
          PHY_DataReq((uint8_t *)&frame->data, frame->size);
        }
      } break;
    2a94:	00 00       	nop
void nwkTxTaskHandler(void)
{
  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9a:	01 96       	adiw	r24, 0x01	; 1
    2a9c:	9a 83       	std	Y+2, r25	; 0x02
    2a9e:	89 83       	std	Y+1, r24	; 0x01
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa4:	83 30       	cpi	r24, 0x03	; 3
    2aa6:	91 05       	cpc	r25, r1
    2aa8:	0c f4       	brge	.+2      	; 0x2aac <nwkTxTaskHandler+0x16e>
    2aaa:	57 cf       	rjmp	.-338    	; 0x295a <nwkTxTaskHandler+0x1c>
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <nwkTxTaskHandler+0x172>
/*****************************************************************************
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  if (0 == nwkTxActiveFrames)
    return;
    2aae:	00 00       	nop

      default:
        break;
    };
  }
}
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	df 91       	pop	r29
    2aba:	cf 91       	pop	r28
    2abc:	08 95       	ret

00002abe <SYS_Init>:
#include "sysTimer.h"

/*****************************************************************************
*****************************************************************************/
void SYS_Init(void)
{
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
  HAL_Init();
    2ac6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <HAL_Init>
  SYS_TimerInit();
    2aca:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <SYS_TimerInit>
  PHY_Init();
    2ace:	0e 94 43 01 	call	0x286	; 0x286 <PHY_Init>
  NWK_Init();
    2ad2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <NWK_Init>
}
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	08 95       	ret

00002adc <SYS_TaskHandler>:

/*****************************************************************************
*****************************************************************************/
void SYS_TaskHandler(void)
{
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
  PHY_TaskHandler();
    2ae4:	0e 94 29 04 	call	0x852	; 0x852 <PHY_TaskHandler>
  NWK_TaskHandler();
    2ae8:	0e 94 63 05 	call	0xac6	; 0xac6 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    2aec:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <SYS_TimerTaskHandler>
}
    2af0:	df 91       	pop	r29
    2af2:	cf 91       	pop	r28
    2af4:	08 95       	ret

00002af6 <SYS_TimerInit>:
static SYS_Timer_t *timers;

/*****************************************************************************
*****************************************************************************/
void SYS_TimerInit(void)
{
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
  timers = NULL;
    2afe:	10 92 e2 06 	sts	0x06E2, r1
    2b02:	10 92 e1 06 	sts	0x06E1, r1
}
    2b06:	df 91       	pop	r29
    2b08:	cf 91       	pop	r28
    2b0a:	08 95       	ret

00002b0c <SYS_TimerStart>:

/*****************************************************************************
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2b0c:	cf 93       	push	r28
    2b0e:	df 93       	push	r29
    2b10:	00 d0       	rcall	.+0      	; 0x2b12 <SYS_TimerStart+0x6>
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	9a 83       	std	Y+2, r25	; 0x02
    2b18:	89 83       	std	Y+1, r24	; 0x01
  if (!SYS_TimerStarted(timer))
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1e:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <SYS_TimerStarted>
    2b22:	98 2f       	mov	r25, r24
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	89 27       	eor	r24, r25
    2b28:	88 23       	and	r24, r24
    2b2a:	21 f0       	breq	.+8      	; 0x2b34 <SYS_TimerStart+0x28>
    placeTimer(timer);
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b30:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <placeTimer>
}
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	08 95       	ret

00002b3e <SYS_TimerStarted>:
}

/*****************************************************************************
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
    2b3e:	cf 93       	push	r28
    2b40:	df 93       	push	r29
    2b42:	00 d0       	rcall	.+0      	; 0x2b44 <SYS_TimerStarted+0x6>
    2b44:	00 d0       	rcall	.+0      	; 0x2b46 <SYS_TimerStarted+0x8>
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	9c 83       	std	Y+4, r25	; 0x04
    2b4c:	8b 83       	std	Y+3, r24	; 0x03
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2b4e:	80 91 e1 06 	lds	r24, 0x06E1
    2b52:	90 91 e2 06 	lds	r25, 0x06E2
    2b56:	9a 83       	std	Y+2, r25	; 0x02
    2b58:	89 83       	std	Y+1, r24	; 0x01
    2b5a:	10 c0       	rjmp	.+32     	; 0x2b7c <SYS_TimerStarted+0x3e>
    if (t == timer)
    2b5c:	29 81       	ldd	r18, Y+1	; 0x01
    2b5e:	3a 81       	ldd	r19, Y+2	; 0x02
    2b60:	8b 81       	ldd	r24, Y+3	; 0x03
    2b62:	9c 81       	ldd	r25, Y+4	; 0x04
    2b64:	28 17       	cp	r18, r24
    2b66:	39 07       	cpc	r19, r25
    2b68:	11 f4       	brne	.+4      	; 0x2b6e <SYS_TimerStarted+0x30>
      return true;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	0c c0       	rjmp	.+24     	; 0x2b86 <SYS_TimerStarted+0x48>

/*****************************************************************************
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	9a 81       	ldd	r25, Y+2	; 0x02
    2b72:	fc 01       	movw	r30, r24
    2b74:	80 81       	ld	r24, Z
    2b76:	91 81       	ldd	r25, Z+1	; 0x01
    2b78:	9a 83       	std	Y+2, r25	; 0x02
    2b7a:	89 83       	std	Y+1, r24	; 0x01
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b80:	00 97       	sbiw	r24, 0x00	; 0
    2b82:	61 f7       	brne	.-40     	; 0x2b5c <SYS_TimerStarted+0x1e>
    if (t == timer)
      return true;
  return false;
    2b84:	80 e0       	ldi	r24, 0x00	; 0
}
    2b86:	0f 90       	pop	r0
    2b88:	0f 90       	pop	r0
    2b8a:	0f 90       	pop	r0
    2b8c:	0f 90       	pop	r0
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	08 95       	ret

00002b94 <SYS_TimerTaskHandler>:

/*****************************************************************************
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    2b94:	ef 92       	push	r14
    2b96:	ff 92       	push	r15
    2b98:	0f 93       	push	r16
    2b9a:	1f 93       	push	r17
    2b9c:	cf 93       	push	r28
    2b9e:	df 93       	push	r29
    2ba0:	cd b7       	in	r28, 0x3d	; 61
    2ba2:	de b7       	in	r29, 0x3e	; 62
    2ba4:	28 97       	sbiw	r28, 0x08	; 8
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	cd bf       	out	0x3d, r28	; 61
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    2bb0:	80 91 15 08 	lds	r24, 0x0815
    2bb4:	88 23       	and	r24, r24
    2bb6:	09 f4       	brne	.+2      	; 0x2bba <SYS_TimerTaskHandler+0x26>
    2bb8:	9f c0       	rjmp	.+318    	; 0x2cf8 <SYS_TimerTaskHandler+0x164>
    return;

  ATOMIC_SECTION_ENTER
    2bba:	8f e5       	ldi	r24, 0x5F	; 95
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	80 81       	ld	r24, Z
    2bc2:	8d 83       	std	Y+5, r24	; 0x05
    2bc4:	f8 94       	cli
    cnt = halTimerIrqCount;
    2bc6:	80 91 15 08 	lds	r24, 0x0815
    2bca:	8e 83       	std	Y+6, r24	; 0x06
    halTimerIrqCount = 0;
    2bcc:	10 92 15 08 	sts	0x0815, r1
  ATOMIC_SECTION_LEAVE
    2bd0:	8f e5       	ldi	r24, 0x5F	; 95
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	2d 81       	ldd	r18, Y+5	; 0x05
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	20 83       	st	Z, r18

  elapsed = cnt * HAL_TIMER_INTERVAL;
    2bda:	8e 81       	ldd	r24, Y+6	; 0x06
    2bdc:	88 2f       	mov	r24, r24
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	a0 e0       	ldi	r26, 0x00	; 0
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	2a e0       	ldi	r18, 0x0A	; 10
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e0       	ldi	r20, 0x00	; 0
    2bea:	50 e0       	ldi	r21, 0x00	; 0
    2bec:	bc 01       	movw	r22, r24
    2bee:	cd 01       	movw	r24, r26
    2bf0:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__mulsi3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	9a 83       	std	Y+2, r25	; 0x02
    2bfc:	ab 83       	std	Y+3, r26	; 0x03
    2bfe:	bc 83       	std	Y+4, r27	; 0x04

  while (timers && (timers->timeout <= elapsed))
    2c00:	3d c0       	rjmp	.+122    	; 0x2c7c <SYS_TimerTaskHandler+0xe8>
  {
    SYS_Timer_t *timer = timers;
    2c02:	80 91 e1 06 	lds	r24, 0x06E1
    2c06:	90 91 e2 06 	lds	r25, 0x06E2
    2c0a:	98 87       	std	Y+8, r25	; 0x08
    2c0c:	8f 83       	std	Y+7, r24	; 0x07

    elapsed -= timers->timeout;
    2c0e:	80 91 e1 06 	lds	r24, 0x06E1
    2c12:	90 91 e2 06 	lds	r25, 0x06E2
    2c16:	fc 01       	movw	r30, r24
    2c18:	82 81       	ldd	r24, Z+2	; 0x02
    2c1a:	93 81       	ldd	r25, Z+3	; 0x03
    2c1c:	a4 81       	ldd	r26, Z+4	; 0x04
    2c1e:	b5 81       	ldd	r27, Z+5	; 0x05
    2c20:	29 81       	ldd	r18, Y+1	; 0x01
    2c22:	3a 81       	ldd	r19, Y+2	; 0x02
    2c24:	4b 81       	ldd	r20, Y+3	; 0x03
    2c26:	5c 81       	ldd	r21, Y+4	; 0x04
    2c28:	79 01       	movw	r14, r18
    2c2a:	8a 01       	movw	r16, r20
    2c2c:	e8 1a       	sub	r14, r24
    2c2e:	f9 0a       	sbc	r15, r25
    2c30:	0a 0b       	sbc	r16, r26
    2c32:	1b 0b       	sbc	r17, r27
    2c34:	d8 01       	movw	r26, r16
    2c36:	c7 01       	movw	r24, r14
    2c38:	89 83       	std	Y+1, r24	; 0x01
    2c3a:	9a 83       	std	Y+2, r25	; 0x02
    2c3c:	ab 83       	std	Y+3, r26	; 0x03
    2c3e:	bc 83       	std	Y+4, r27	; 0x04
    timers = timers->next;
    2c40:	80 91 e1 06 	lds	r24, 0x06E1
    2c44:	90 91 e2 06 	lds	r25, 0x06E2
    2c48:	fc 01       	movw	r30, r24
    2c4a:	80 81       	ld	r24, Z
    2c4c:	91 81       	ldd	r25, Z+1	; 0x01
    2c4e:	90 93 e2 06 	sts	0x06E2, r25
    2c52:	80 93 e1 06 	sts	0x06E1, r24
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    2c56:	8f 81       	ldd	r24, Y+7	; 0x07
    2c58:	98 85       	ldd	r25, Y+8	; 0x08
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	82 85       	ldd	r24, Z+10	; 0x0a
    2c5e:	81 30       	cpi	r24, 0x01	; 1
    2c60:	21 f4       	brne	.+8      	; 0x2c6a <SYS_TimerTaskHandler+0xd6>
      placeTimer(timer);
    2c62:	8f 81       	ldd	r24, Y+7	; 0x07
    2c64:	98 85       	ldd	r25, Y+8	; 0x08
    2c66:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <placeTimer>
    timer->handler(timer);
    2c6a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c6c:	98 85       	ldd	r25, Y+8	; 0x08
    2c6e:	fc 01       	movw	r30, r24
    2c70:	23 85       	ldd	r18, Z+11	; 0x0b
    2c72:	34 85       	ldd	r19, Z+12	; 0x0c
    2c74:	8f 81       	ldd	r24, Y+7	; 0x07
    2c76:	98 85       	ldd	r25, Y+8	; 0x08
    2c78:	f9 01       	movw	r30, r18
    2c7a:	09 95       	icall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    2c7c:	80 91 e1 06 	lds	r24, 0x06E1
    2c80:	90 91 e2 06 	lds	r25, 0x06E2
    2c84:	00 97       	sbiw	r24, 0x00	; 0
    2c86:	99 f0       	breq	.+38     	; 0x2cae <SYS_TimerTaskHandler+0x11a>
    2c88:	80 91 e1 06 	lds	r24, 0x06E1
    2c8c:	90 91 e2 06 	lds	r25, 0x06E2
    2c90:	fc 01       	movw	r30, r24
    2c92:	22 81       	ldd	r18, Z+2	; 0x02
    2c94:	33 81       	ldd	r19, Z+3	; 0x03
    2c96:	44 81       	ldd	r20, Z+4	; 0x04
    2c98:	55 81       	ldd	r21, Z+5	; 0x05
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9e:	ab 81       	ldd	r26, Y+3	; 0x03
    2ca0:	bc 81       	ldd	r27, Y+4	; 0x04
    2ca2:	82 17       	cp	r24, r18
    2ca4:	93 07       	cpc	r25, r19
    2ca6:	a4 07       	cpc	r26, r20
    2ca8:	b5 07       	cpc	r27, r21
    2caa:	08 f0       	brcs	.+2      	; 0x2cae <SYS_TimerTaskHandler+0x11a>
    2cac:	aa cf       	rjmp	.-172    	; 0x2c02 <SYS_TimerTaskHandler+0x6e>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    2cae:	80 91 e1 06 	lds	r24, 0x06E1
    2cb2:	90 91 e2 06 	lds	r25, 0x06E2
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	01 f1       	breq	.+64     	; 0x2cfa <SYS_TimerTaskHandler+0x166>
    timers->timeout -= elapsed;
    2cba:	60 91 e1 06 	lds	r22, 0x06E1
    2cbe:	70 91 e2 06 	lds	r23, 0x06E2
    2cc2:	80 91 e1 06 	lds	r24, 0x06E1
    2cc6:	90 91 e2 06 	lds	r25, 0x06E2
    2cca:	fc 01       	movw	r30, r24
    2ccc:	22 81       	ldd	r18, Z+2	; 0x02
    2cce:	33 81       	ldd	r19, Z+3	; 0x03
    2cd0:	44 81       	ldd	r20, Z+4	; 0x04
    2cd2:	55 81       	ldd	r21, Z+5	; 0x05
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd8:	ab 81       	ldd	r26, Y+3	; 0x03
    2cda:	bc 81       	ldd	r27, Y+4	; 0x04
    2cdc:	79 01       	movw	r14, r18
    2cde:	8a 01       	movw	r16, r20
    2ce0:	e8 1a       	sub	r14, r24
    2ce2:	f9 0a       	sbc	r15, r25
    2ce4:	0a 0b       	sbc	r16, r26
    2ce6:	1b 0b       	sbc	r17, r27
    2ce8:	d8 01       	movw	r26, r16
    2cea:	c7 01       	movw	r24, r14
    2cec:	fb 01       	movw	r30, r22
    2cee:	82 83       	std	Z+2, r24	; 0x02
    2cf0:	93 83       	std	Z+3, r25	; 0x03
    2cf2:	a4 83       	std	Z+4, r26	; 0x04
    2cf4:	b5 83       	std	Z+5, r27	; 0x05
    2cf6:	01 c0       	rjmp	.+2      	; 0x2cfa <SYS_TimerTaskHandler+0x166>
{
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    return;
    2cf8:	00 00       	nop
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
}
    2cfa:	28 96       	adiw	r28, 0x08	; 8
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
    2d06:	df 91       	pop	r29
    2d08:	cf 91       	pop	r28
    2d0a:	1f 91       	pop	r17
    2d0c:	0f 91       	pop	r16
    2d0e:	ff 90       	pop	r15
    2d10:	ef 90       	pop	r14
    2d12:	08 95       	ret

00002d14 <placeTimer>:

/*****************************************************************************
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2d14:	ef 92       	push	r14
    2d16:	ff 92       	push	r15
    2d18:	0f 93       	push	r16
    2d1a:	1f 93       	push	r17
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	2a 97       	sbiw	r28, 0x0a	; 10
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	9a 87       	std	Y+10, r25	; 0x0a
    2d32:	89 87       	std	Y+9, r24	; 0x09
  if (timers)
    2d34:	80 91 e1 06 	lds	r24, 0x06E1
    2d38:	90 91 e2 06 	lds	r25, 0x06E2
    2d3c:	00 97       	sbiw	r24, 0x00	; 0
    2d3e:	09 f4       	brne	.+2      	; 0x2d42 <placeTimer+0x2e>
    2d40:	97 c0       	rjmp	.+302    	; 0x2e70 <placeTimer+0x15c>
  {
    SYS_Timer_t *prev = NULL;
    2d42:	1a 82       	std	Y+2, r1	; 0x02
    2d44:	19 82       	std	Y+1, r1	; 0x01
    uint32_t timeout = timer->interval;
    2d46:	89 85       	ldd	r24, Y+9	; 0x09
    2d48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	86 81       	ldd	r24, Z+6	; 0x06
    2d4e:	97 81       	ldd	r25, Z+7	; 0x07
    2d50:	a0 85       	ldd	r26, Z+8	; 0x08
    2d52:	b1 85       	ldd	r27, Z+9	; 0x09
    2d54:	8b 83       	std	Y+3, r24	; 0x03
    2d56:	9c 83       	std	Y+4, r25	; 0x04
    2d58:	ad 83       	std	Y+5, r26	; 0x05
    2d5a:	be 83       	std	Y+6, r27	; 0x06

    for (SYS_Timer_t *t = timers; t; t = t->next)
    2d5c:	80 91 e1 06 	lds	r24, 0x06E1
    2d60:	90 91 e2 06 	lds	r25, 0x06E2
    2d64:	98 87       	std	Y+8, r25	; 0x08
    2d66:	8f 83       	std	Y+7, r24	; 0x07
    2d68:	4d c0       	rjmp	.+154    	; 0x2e04 <placeTimer+0xf0>
    {
      if (timeout < t->timeout)
    2d6a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d6c:	98 85       	ldd	r25, Y+8	; 0x08
    2d6e:	fc 01       	movw	r30, r24
    2d70:	22 81       	ldd	r18, Z+2	; 0x02
    2d72:	33 81       	ldd	r19, Z+3	; 0x03
    2d74:	44 81       	ldd	r20, Z+4	; 0x04
    2d76:	55 81       	ldd	r21, Z+5	; 0x05
    2d78:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7c:	ad 81       	ldd	r26, Y+5	; 0x05
    2d7e:	be 81       	ldd	r27, Y+6	; 0x06
    2d80:	82 17       	cp	r24, r18
    2d82:	93 07       	cpc	r25, r19
    2d84:	a4 07       	cpc	r26, r20
    2d86:	b5 07       	cpc	r27, r21
    2d88:	d8 f4       	brcc	.+54     	; 0x2dc0 <placeTimer+0xac>
      {
         t->timeout -= timeout;
    2d8a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d8c:	98 85       	ldd	r25, Y+8	; 0x08
    2d8e:	fc 01       	movw	r30, r24
    2d90:	22 81       	ldd	r18, Z+2	; 0x02
    2d92:	33 81       	ldd	r19, Z+3	; 0x03
    2d94:	44 81       	ldd	r20, Z+4	; 0x04
    2d96:	55 81       	ldd	r21, Z+5	; 0x05
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9c:	ad 81       	ldd	r26, Y+5	; 0x05
    2d9e:	be 81       	ldd	r27, Y+6	; 0x06
    2da0:	79 01       	movw	r14, r18
    2da2:	8a 01       	movw	r16, r20
    2da4:	e8 1a       	sub	r14, r24
    2da6:	f9 0a       	sbc	r15, r25
    2da8:	0a 0b       	sbc	r16, r26
    2daa:	1b 0b       	sbc	r17, r27
    2dac:	d8 01       	movw	r26, r16
    2dae:	c7 01       	movw	r24, r14
    2db0:	2f 81       	ldd	r18, Y+7	; 0x07
    2db2:	38 85       	ldd	r19, Y+8	; 0x08
    2db4:	f9 01       	movw	r30, r18
    2db6:	82 83       	std	Z+2, r24	; 0x02
    2db8:	93 83       	std	Z+3, r25	; 0x03
    2dba:	a4 83       	std	Z+4, r26	; 0x04
    2dbc:	b5 83       	std	Z+5, r27	; 0x05
         break;
    2dbe:	27 c0       	rjmp	.+78     	; 0x2e0e <placeTimer+0xfa>
      }
      else
        timeout -= t->timeout;
    2dc0:	8f 81       	ldd	r24, Y+7	; 0x07
    2dc2:	98 85       	ldd	r25, Y+8	; 0x08
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	82 81       	ldd	r24, Z+2	; 0x02
    2dc8:	93 81       	ldd	r25, Z+3	; 0x03
    2dca:	a4 81       	ldd	r26, Z+4	; 0x04
    2dcc:	b5 81       	ldd	r27, Z+5	; 0x05
    2dce:	2b 81       	ldd	r18, Y+3	; 0x03
    2dd0:	3c 81       	ldd	r19, Y+4	; 0x04
    2dd2:	4d 81       	ldd	r20, Y+5	; 0x05
    2dd4:	5e 81       	ldd	r21, Y+6	; 0x06
    2dd6:	79 01       	movw	r14, r18
    2dd8:	8a 01       	movw	r16, r20
    2dda:	e8 1a       	sub	r14, r24
    2ddc:	f9 0a       	sbc	r15, r25
    2dde:	0a 0b       	sbc	r16, r26
    2de0:	1b 0b       	sbc	r17, r27
    2de2:	d8 01       	movw	r26, r16
    2de4:	c7 01       	movw	r24, r14
    2de6:	8b 83       	std	Y+3, r24	; 0x03
    2de8:	9c 83       	std	Y+4, r25	; 0x04
    2dea:	ad 83       	std	Y+5, r26	; 0x05
    2dec:	be 83       	std	Y+6, r27	; 0x06

      prev = t;
    2dee:	8f 81       	ldd	r24, Y+7	; 0x07
    2df0:	98 85       	ldd	r25, Y+8	; 0x08
    2df2:	9a 83       	std	Y+2, r25	; 0x02
    2df4:	89 83       	std	Y+1, r24	; 0x01
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    2df6:	8f 81       	ldd	r24, Y+7	; 0x07
    2df8:	98 85       	ldd	r25, Y+8	; 0x08
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	98 87       	std	Y+8, r25	; 0x08
    2e02:	8f 83       	std	Y+7, r24	; 0x07
    2e04:	8f 81       	ldd	r24, Y+7	; 0x07
    2e06:	98 85       	ldd	r25, Y+8	; 0x08
    2e08:	00 97       	sbiw	r24, 0x00	; 0
    2e0a:	09 f0       	breq	.+2      	; 0x2e0e <placeTimer+0xfa>
    2e0c:	ae cf       	rjmp	.-164    	; 0x2d6a <placeTimer+0x56>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    2e0e:	29 85       	ldd	r18, Y+9	; 0x09
    2e10:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	9c 81       	ldd	r25, Y+4	; 0x04
    2e16:	ad 81       	ldd	r26, Y+5	; 0x05
    2e18:	be 81       	ldd	r27, Y+6	; 0x06
    2e1a:	f9 01       	movw	r30, r18
    2e1c:	82 83       	std	Z+2, r24	; 0x02
    2e1e:	93 83       	std	Z+3, r25	; 0x03
    2e20:	a4 83       	std	Z+4, r26	; 0x04
    2e22:	b5 83       	std	Z+5, r27	; 0x05

    if (prev)
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	9a 81       	ldd	r25, Y+2	; 0x02
    2e28:	00 97       	sbiw	r24, 0x00	; 0
    2e2a:	91 f0       	breq	.+36     	; 0x2e50 <placeTimer+0x13c>
    {
      timer->next = prev->next;
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e30:	fc 01       	movw	r30, r24
    2e32:	20 81       	ld	r18, Z
    2e34:	31 81       	ldd	r19, Z+1	; 0x01
    2e36:	89 85       	ldd	r24, Y+9	; 0x09
    2e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	31 83       	std	Z+1, r19	; 0x01
    2e3e:	20 83       	st	Z, r18
      prev->next = timer;
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	9a 81       	ldd	r25, Y+2	; 0x02
    2e44:	29 85       	ldd	r18, Y+9	; 0x09
    2e46:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e48:	fc 01       	movw	r30, r24
    2e4a:	31 83       	std	Z+1, r19	; 0x01
    2e4c:	20 83       	st	Z, r18
    2e4e:	29 c0       	rjmp	.+82     	; 0x2ea2 <placeTimer+0x18e>
    }
    else
    {
      timer->next = timers;
    2e50:	20 91 e1 06 	lds	r18, 0x06E1
    2e54:	30 91 e2 06 	lds	r19, 0x06E2
    2e58:	89 85       	ldd	r24, Y+9	; 0x09
    2e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	31 83       	std	Z+1, r19	; 0x01
    2e60:	20 83       	st	Z, r18
      timers = timer;
    2e62:	89 85       	ldd	r24, Y+9	; 0x09
    2e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e66:	90 93 e2 06 	sts	0x06E2, r25
    2e6a:	80 93 e1 06 	sts	0x06E1, r24
    2e6e:	19 c0       	rjmp	.+50     	; 0x2ea2 <placeTimer+0x18e>
    }
  }
  else
  {
    timer->next = NULL;
    2e70:	89 85       	ldd	r24, Y+9	; 0x09
    2e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e74:	fc 01       	movw	r30, r24
    2e76:	11 82       	std	Z+1, r1	; 0x01
    2e78:	10 82       	st	Z, r1
    timer->timeout = timer->interval;
    2e7a:	89 85       	ldd	r24, Y+9	; 0x09
    2e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7e:	fc 01       	movw	r30, r24
    2e80:	86 81       	ldd	r24, Z+6	; 0x06
    2e82:	97 81       	ldd	r25, Z+7	; 0x07
    2e84:	a0 85       	ldd	r26, Z+8	; 0x08
    2e86:	b1 85       	ldd	r27, Z+9	; 0x09
    2e88:	29 85       	ldd	r18, Y+9	; 0x09
    2e8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e8c:	f9 01       	movw	r30, r18
    2e8e:	82 83       	std	Z+2, r24	; 0x02
    2e90:	93 83       	std	Z+3, r25	; 0x03
    2e92:	a4 83       	std	Z+4, r26	; 0x04
    2e94:	b5 83       	std	Z+5, r27	; 0x05
    timers = timer;
    2e96:	89 85       	ldd	r24, Y+9	; 0x09
    2e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9a:	90 93 e2 06 	sts	0x06E2, r25
    2e9e:	80 93 e1 06 	sts	0x06E1, r24
  }
}
    2ea2:	2a 96       	adiw	r28, 0x0a	; 10
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	1f 91       	pop	r17
    2eb4:	0f 91       	pop	r16
    2eb6:	ff 90       	pop	r15
    2eb8:	ef 90       	pop	r14
    2eba:	08 95       	ret

00002ebc <SYS_EncryptReq>:
#endif

/*****************************************************************************
*****************************************************************************/
void SYS_EncryptReq(uint8_t *text, uint8_t *key)
{
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	00 d0       	rcall	.+0      	; 0x2ec2 <SYS_EncryptReq+0x6>
    2ec2:	00 d0       	rcall	.+0      	; 0x2ec4 <SYS_EncryptReq+0x8>
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
    2ec8:	9a 83       	std	Y+2, r25	; 0x02
    2eca:	89 83       	std	Y+1, r24	; 0x01
    2ecc:	7c 83       	std	Y+4, r23	; 0x04
    2ece:	6b 83       	std	Y+3, r22	; 0x03
#if SYS_SECURITY_MODE == 0
  PHY_EncryptReq(text, key);
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ed6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ed8:	b9 01       	movw	r22, r18
    2eda:	0e 94 28 02 	call	0x450	; 0x450 <PHY_EncryptReq>
#elif SYS_SECURITY_MODE == 1
  swEncryptReq((uint32_t *)text, (uint32_t *)key);
#endif
}
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	08 95       	ret

00002eec <PHY_EncryptConf>:

#if SYS_SECURITY_MODE == 0
/*****************************************************************************
*****************************************************************************/
void PHY_EncryptConf(void)
{
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62
  SYS_EncryptConf();
    2ef4:	0e 94 4d 08 	call	0x109a	; 0x109a <SYS_EncryptConf>
}
    2ef8:	df 91       	pop	r29
    2efa:	cf 91       	pop	r28
    2efc:	08 95       	ret

00002efe <appDataConf>:
// The callback function that the network stack uses to tell the application that
// the last request has been processed.  Used here to allow the next send to
// proceed.
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
    2efe:	cf 93       	push	r28
    2f00:	df 93       	push	r29
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <appDataConf+0x6>
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
    2f08:	9a 83       	std	Y+2, r25	; 0x02
    2f0a:	89 83       	std	Y+1, r24	; 0x01
	if ((req->status == NWK_SUCCESS_STATUS)||(req->status == NWK_NO_ACK_STATUS)||(req->status == NWK_PHY_NO_ACK_STATUS)) {
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f10:	fc 01       	movw	r30, r24
    2f12:	87 85       	ldd	r24, Z+15	; 0x0f
    2f14:	88 23       	and	r24, r24
    2f16:	61 f0       	breq	.+24     	; 0x2f30 <appDataConf+0x32>
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1c:	fc 01       	movw	r30, r24
    2f1e:	87 85       	ldd	r24, Z+15	; 0x0f
    2f20:	80 31       	cpi	r24, 0x10	; 16
    2f22:	31 f0       	breq	.+12     	; 0x2f30 <appDataConf+0x32>
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	9a 81       	ldd	r25, Y+2	; 0x02
    2f28:	fc 01       	movw	r30, r24
    2f2a:	87 85       	ldd	r24, Z+15	; 0x0f
    2f2c:	81 32       	cpi	r24, 0x21	; 33
    2f2e:	51 f4       	brne	.+20     	; 0x2f44 <appDataConf+0x46>
	HAL_GPIO_PIN(statusLED, E, 1)
	HAL_GPIO_PIN(sendStatusLED, E, 2)
#elif BOARD_VERSION == 2
	HAL_GPIO_PIN(hbLED, G, 0)
	HAL_GPIO_PIN(statusLED, D, 7)
	HAL_GPIO_PIN(sendStatusLED, E, 0)
    2f30:	8e e2       	ldi	r24, 0x2E	; 46
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	2e e2       	ldi	r18, 0x2E	; 46
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	f9 01       	movw	r30, r18
    2f3a:	20 81       	ld	r18, Z
    2f3c:	21 60       	ori	r18, 0x01	; 1
    2f3e:	fc 01       	movw	r30, r24
    2f40:	20 83       	st	Z, r18
	  	HAL_GPIO_sendStatusLED_set();
    2f42:	09 c0       	rjmp	.+18     	; 0x2f56 <appDataConf+0x58>
    2f44:	8e e2       	ldi	r24, 0x2E	; 46
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	2e e2       	ldi	r18, 0x2E	; 46
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	f9 01       	movw	r30, r18
    2f4e:	20 81       	ld	r18, Z
    2f50:	2e 7f       	andi	r18, 0xFE	; 254
    2f52:	fc 01       	movw	r30, r24
    2f54:	20 83       	st	Z, r18
	} else
	  	HAL_GPIO_sendStatusLED_clr();
		  
	appDataReqBusy = false;
    2f56:	10 92 1e 07 	sts	0x071E, r1
}
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	df 91       	pop	r29
    2f60:	cf 91       	pop	r28
    2f62:	08 95       	ret

00002f64 <appSendData>:
// The function used to send data to other nodes in the mesh.  Currently only
// sends the node address out on broadcast.  If some other message is to be sent,
// then this will either need to be modified, or a new function will be needed.
*****************************************************************************/
static void appSendData(void)
{
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
	if (appDataReqBusy)
    2f6c:	80 91 1e 07 	lds	r24, 0x071E
    2f70:	88 23       	and	r24, r24
    2f72:	09 f0       	breq	.+2      	; 0x2f76 <appSendData+0x12>
    2f74:	5e c0       	rjmp	.+188    	; 0x3032 <appSendData+0xce>
		return;

	memcpy(appDataReqBuffer, appWorkingBuffer, sizeof(LED_Command_t));
    2f76:	8f e1       	ldi	r24, 0x1F	; 31
    2f78:	97 e0       	ldi	r25, 0x07	; 7
    2f7a:	28 e8       	ldi	r18, 0x88	; 136
    2f7c:	37 e0       	ldi	r19, 0x07	; 7
    2f7e:	48 e3       	ldi	r20, 0x38	; 56
    2f80:	f9 01       	movw	r30, r18
    2f82:	00 80       	ld	r0, Z
    2f84:	2f 5f       	subi	r18, 0xFF	; 255
    2f86:	3f 4f       	sbci	r19, 0xFF	; 255
    2f88:	fc 01       	movw	r30, r24
    2f8a:	00 82       	st	Z, r0
    2f8c:	01 96       	adiw	r24, 0x01	; 1
    2f8e:	41 50       	subi	r20, 0x01	; 1
    2f90:	44 23       	and	r20, r20
    2f92:	b1 f7       	brne	.-20     	; 0x2f80 <appSendData+0x1c>

	appDataReq.dstAddr = targetAddr;
    2f94:	80 91 13 08 	lds	r24, 0x0813
    2f98:	90 91 14 08 	lds	r25, 0x0814
    2f9c:	90 93 13 07 	sts	0x0713, r25
    2fa0:	80 93 12 07 	sts	0x0712, r24
	appDataReq.dstEndpoint = LEDCmd_ENDPOINT;
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	80 93 14 07 	sts	0x0714, r24
	appDataReq.srcEndpoint = LEDCmd_ENDPOINT;
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	80 93 15 07 	sts	0x0715, r24
	if (targetAddr == BROADCAST_ADDR)
    2fb0:	80 91 13 08 	lds	r24, 0x0813
    2fb4:	90 91 14 08 	lds	r25, 0x0814
    2fb8:	ff ef       	ldi	r31, 0xFF	; 255
    2fba:	8f 3f       	cpi	r24, 0xFF	; 255
    2fbc:	9f 07       	cpc	r25, r31
    2fbe:	21 f4       	brne	.+8      	; 0x2fc8 <appSendData+0x64>
	{
		appDataReq.options = NWK_OPT_ENABLE_SECURITY;
    2fc0:	82 e0       	ldi	r24, 0x02	; 2
    2fc2:	80 93 16 07 	sts	0x0716, r24
    2fc6:	03 c0       	rjmp	.+6      	; 0x2fce <appSendData+0x6a>
	} else
	{
		appDataReq.options = NWK_OPT_ACK_REQUEST | NWK_OPT_ENABLE_SECURITY;
    2fc8:	83 e0       	ldi	r24, 0x03	; 3
    2fca:	80 93 16 07 	sts	0x0716, r24
	}
	appDataReq.data = appDataReqBuffer;
    2fce:	8f e1       	ldi	r24, 0x1F	; 31
    2fd0:	97 e0       	ldi	r25, 0x07	; 7
    2fd2:	90 93 18 07 	sts	0x0718, r25
    2fd6:	80 93 17 07 	sts	0x0717, r24
	appDataReq.size = sizeof(LED_Command_t);
    2fda:	88 e3       	ldi	r24, 0x38	; 56
    2fdc:	80 93 19 07 	sts	0x0719, r24
	appDataReq.confirm = appDataConf;
    2fe0:	8f e7       	ldi	r24, 0x7F	; 127
    2fe2:	97 e1       	ldi	r25, 0x17	; 23
    2fe4:	90 93 1b 07 	sts	0x071B, r25
    2fe8:	80 93 1a 07 	sts	0x071A, r24
	NWK_DataReq(&appDataReq);
    2fec:	8d e0       	ldi	r24, 0x0D	; 13
    2fee:	97 e0       	ldi	r25, 0x07	; 7
    2ff0:	0e 94 7d 05 	call	0xafa	; 0xafa <NWK_DataReq>
	HAL_GPIO_PIN(hbLED, E, 0)
	HAL_GPIO_PIN(statusLED, E, 1)
	HAL_GPIO_PIN(sendStatusLED, E, 2)
#elif BOARD_VERSION == 2
	HAL_GPIO_PIN(hbLED, G, 0)
	HAL_GPIO_PIN(statusLED, D, 7)
    2ff4:	8b e2       	ldi	r24, 0x2B	; 43
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	2b e2       	ldi	r18, 0x2B	; 43
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	f9 01       	movw	r30, r18
    2ffe:	30 81       	ld	r19, Z
    3000:	20 e8       	ldi	r18, 0x80	; 128
    3002:	23 27       	eor	r18, r19
    3004:	fc 01       	movw	r30, r24
    3006:	20 83       	st	Z, r18
	HAL_GPIO_PIN(sendStatusLED, E, 0)
    3008:	8e e2       	ldi	r24, 0x2E	; 46
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	2e e2       	ldi	r18, 0x2E	; 46
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	f9 01       	movw	r30, r18
    3012:	20 81       	ld	r18, Z
    3014:	2e 7f       	andi	r18, 0xFE	; 254
    3016:	fc 01       	movw	r30, r24
    3018:	20 83       	st	Z, r18

	HAL_GPIO_statusLED_toggle();
  	HAL_GPIO_sendStatusLED_clr();

	appWorkingBufferPtr = 0;
    301a:	10 92 f2 07 	sts	0x07F2, r1
	appDataReqBusy = true;
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	80 93 1e 07 	sts	0x071E, r24

	targetAddr = BROADCAST_ADDR;
    3024:	8f ef       	ldi	r24, 0xFF	; 255
    3026:	9f ef       	ldi	r25, 0xFF	; 255
    3028:	90 93 14 08 	sts	0x0814, r25
    302c:	80 93 13 08 	sts	0x0813, r24
    3030:	01 c0       	rjmp	.+2      	; 0x3034 <appSendData+0xd0>
// then this will either need to be modified, or a new function will be needed.
*****************************************************************************/
static void appSendData(void)
{
	if (appDataReqBusy)
		return;
    3032:	00 00       	nop

	appWorkingBufferPtr = 0;
	appDataReqBusy = true;

	targetAddr = BROADCAST_ADDR;
}
    3034:	df 91       	pop	r29
    3036:	cf 91       	pop	r28
    3038:	08 95       	ret

0000303a <pollIOTimerHandler>:

/*****************************************************************************
*****************************************************************************/
static void pollIOTimerHandler(SYS_Timer_t *timer)
{
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
    303e:	00 d0       	rcall	.+0      	; 0x3040 <pollIOTimerHandler+0x6>
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
    3044:	9a 83       	std	Y+2, r25	; 0x02
    3046:	89 83       	std	Y+1, r24	; 0x01
#else
#endif
	HAL_GPIO_PIN(leftBttn, E, 6)
    3048:	8c e2       	ldi	r24, 0x2C	; 44
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	fc 01       	movw	r30, r24
    304e:	80 81       	ld	r24, Z
    3050:	88 2f       	mov	r24, r24
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	80 74       	andi	r24, 0x40	; 64
    3056:	90 70       	andi	r25, 0x00	; 0
    3058:	21 e0       	ldi	r18, 0x01	; 1
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	09 f4       	brne	.+2      	; 0x3060 <pollIOTimerHandler+0x26>
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	82 2f       	mov	r24, r18
	leftButton = HAL_GPIO_leftBttn_read();
    3062:	80 93 0d 08 	sts	0x080D, r24
	HAL_GPIO_PIN(rightBttn, E, 7)
    3066:	8c e2       	ldi	r24, 0x2C	; 44
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	fc 01       	movw	r30, r24
    306c:	80 81       	ld	r24, Z
    306e:	88 1f       	adc	r24, r24
    3070:	88 27       	eor	r24, r24
    3072:	88 1f       	adc	r24, r24
	rightButton = HAL_GPIO_rightBttn_read();
    3074:	80 93 0e 08 	sts	0x080E, r24
	if(leftButton && readLeft)				// Button is active LOW
    3078:	80 91 0d 08 	lds	r24, 0x080D
    307c:	88 23       	and	r24, r24
    307e:	79 f0       	breq	.+30     	; 0x309e <pollIOTimerHandler+0x64>
    3080:	80 91 0f 08 	lds	r24, 0x080F
    3084:	88 23       	and	r24, r24
    3086:	59 f0       	breq	.+22     	; 0x309e <pollIOTimerHandler+0x64>
	{
		readLeft = false;
    3088:	10 92 0f 08 	sts	0x080F, r1
		buttonMode++;
    308c:	80 91 10 08 	lds	r24, 0x0810
    3090:	8f 5f       	subi	r24, 0xFF	; 255
    3092:	80 93 10 08 	sts	0x0810, r24
		shotCounter = 1;
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	80 93 f7 07 	sts	0x07F7, r24
    309c:	15 c0       	rjmp	.+42     	; 0x30c8 <pollIOTimerHandler+0x8e>
	} else if (rightButton && !readLeft)	// Button is active LOW
    309e:	80 91 0e 08 	lds	r24, 0x080E
    30a2:	88 23       	and	r24, r24
    30a4:	89 f0       	breq	.+34     	; 0x30c8 <pollIOTimerHandler+0x8e>
    30a6:	90 91 0f 08 	lds	r25, 0x080F
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	89 27       	eor	r24, r25
    30ae:	88 23       	and	r24, r24
    30b0:	59 f0       	breq	.+22     	; 0x30c8 <pollIOTimerHandler+0x8e>
	{
		readLeft = true;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	80 93 0f 08 	sts	0x080F, r24
		buttonMode++;
    30b8:	80 91 10 08 	lds	r24, 0x0810
    30bc:	8f 5f       	subi	r24, 0xFF	; 255
    30be:	80 93 10 08 	sts	0x0810, r24
		shotCounter = 1;
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	80 93 f7 07 	sts	0x07F7, r24
	}
	if (buttonMode > ONESHOT)
    30c8:	80 91 10 08 	lds	r24, 0x0810
    30cc:	88 30       	cpi	r24, 0x08	; 8
    30ce:	10 f0       	brcs	.+4      	; 0x30d4 <pollIOTimerHandler+0x9a>
	{
		buttonMode = STATIC;
    30d0:	10 92 10 08 	sts	0x0810, r1
	}
	redADC = GetADC(redChannel);
    30d4:	82 e0       	ldi	r24, 0x02	; 2
    30d6:	0e 94 c3 00 	call	0x186	; 0x186 <GetADC>
    30da:	80 93 0a 08 	sts	0x080A, r24
	grnADC = GetADC(greenChannel);
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	0e 94 c3 00 	call	0x186	; 0x186 <GetADC>
    30e4:	80 93 0b 08 	sts	0x080B, r24
	bluADC = GetADC(blueChannel);
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	0e 94 c3 00 	call	0x186	; 0x186 <GetADC>
    30ee:	80 93 0c 08 	sts	0x080C, r24
}
    30f2:	0f 90       	pop	r0
    30f4:	0f 90       	pop	r0
    30f6:	df 91       	pop	r29
    30f8:	cf 91       	pop	r28
    30fa:	08 95       	ret

000030fc <meshHeartbeatTimerHandler>:

/*****************************************************************************
*****************************************************************************/
static void meshHeartbeatTimerHandler(SYS_Timer_t *timer)
{
    30fc:	cf 93       	push	r28
    30fe:	df 93       	push	r29
    3100:	00 d0       	rcall	.+0      	; 0x3102 <meshHeartbeatTimerHandler+0x6>
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
    3106:	9a 83       	std	Y+2, r25	; 0x02
    3108:	89 83       	std	Y+1, r24	; 0x01
// This is just an empty message to avoid command timeouts in the lanterns
	cmdBuffer = appWorkingBuffer;
    310a:	88 e8       	ldi	r24, 0x88	; 136
    310c:	97 e0       	ldi	r25, 0x07	; 7
    310e:	90 93 f4 07 	sts	0x07F4, r25
    3112:	80 93 f3 07 	sts	0x07F3, r24
	cmdBuffer->mode = MODE_NOCHANGE;
    3116:	80 91 f3 07 	lds	r24, 0x07F3
    311a:	90 91 f4 07 	lds	r25, 0x07F4
    311e:	22 e0       	ldi	r18, 0x02	; 2
    3120:	fc 01       	movw	r30, r24
    3122:	20 83       	st	Z, r18
	appWorkingBufferPtr = 1;
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	80 93 f2 07 	sts	0x07F2, r24
	appSendData();
    312a:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <appSendData>
}
    312e:	0f 90       	pop	r0
    3130:	0f 90       	pop	r0
    3132:	df 91       	pop	r29
    3134:	cf 91       	pop	r28
    3136:	08 95       	ret

00003138 <sendCmdTimerHandler>:
// This is a callback function that is triggered when the periodic timer says
// it's time to send out the next command to the mesh.
*****************************************************************************/

static void sendCmdTimerHandler(SYS_Timer_t *timer)
{
    3138:	cf 93       	push	r28
    313a:	df 93       	push	r29
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
    3140:	62 97       	sbiw	r28, 0x12	; 18
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	f8 94       	cli
    3146:	de bf       	out	0x3e, r29	; 62
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	9a 8b       	std	Y+18, r25	; 0x12
    314e:	89 8b       	std	Y+17, r24	; 0x11
	cmdBuffer = appWorkingBuffer;
    3150:	88 e8       	ldi	r24, 0x88	; 136
    3152:	97 e0       	ldi	r25, 0x07	; 7
    3154:	90 93 f4 07 	sts	0x07F4, r25
    3158:	80 93 f3 07 	sts	0x07F3, r24
	cmdBuffer->mode = MODE_GLOBAL;
    315c:	80 91 f3 07 	lds	r24, 0x07F3
    3160:	90 91 f4 07 	lds	r25, 0x07F4
    3164:	fc 01       	movw	r30, r24
    3166:	10 82       	st	Z, r1
#ifdef FREERUN
	if (demoCounter < 1)
    3168:	80 91 f6 07 	lds	r24, 0x07F6
    316c:	88 23       	and	r24, r24
    316e:	09 f0       	breq	.+2      	; 0x3172 <sendCmdTimerHandler+0x3a>
    3170:	4d c0       	rjmp	.+154    	; 0x320c <sendCmdTimerHandler+0xd4>
	{
		if (demoCounter == 1)
    3172:	80 91 f6 07 	lds	r24, 0x07F6
    3176:	81 30       	cpi	r24, 0x01	; 1
    3178:	19 f4       	brne	.+6      	; 0x3180 <sendCmdTimerHandler+0x48>
		{
			shotCounter = 1;
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	80 93 f7 07 	sts	0x07F7, r24
		}
#else
	if (buttonMode == ONESHOT)
	{
#endif
		cmdBuffer->subMode = ONESHOT;
    3180:	80 91 f3 07 	lds	r24, 0x07F3
    3184:	90 91 f4 07 	lds	r25, 0x07F4
    3188:	27 e0       	ldi	r18, 0x07	; 7
    318a:	fc 01       	movw	r30, r24
    318c:	21 83       	std	Z+1, r18	; 0x01
		cmdBuffer->period_mS = 255;
    318e:	20 91 f3 07 	lds	r18, 0x07F3
    3192:	30 91 f4 07 	lds	r19, 0x07F4
    3196:	8f ef       	ldi	r24, 0xFF	; 255
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	a0 e0       	ldi	r26, 0x00	; 0
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	f9 01       	movw	r30, r18
    31a0:	84 ab       	sts	0x54, r24
    31a2:	95 ab       	sts	0x55, r25
    31a4:	a6 ab       	sts	0x56, r26
    31a6:	b7 ab       	sts	0x57, r27
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    31a8:	1a 82       	std	Y+2, r1	; 0x02
    31aa:	19 82       	std	Y+1, r1	; 0x01
    31ac:	29 c0       	rjmp	.+82     	; 0x3200 <sendCmdTimerHandler+0xc8>
		{
#ifdef FREERUN
			cmdBuffer->redIntensity[LED_ptr] = 0xFF;				// Green
    31ae:	20 91 f3 07 	lds	r18, 0x07F3
    31b2:	30 91 f4 07 	lds	r19, 0x07F4
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ba:	82 0f       	add	r24, r18
    31bc:	93 1f       	adc	r25, r19
    31be:	02 96       	adiw	r24, 0x02	; 2
    31c0:	2f ef       	ldi	r18, 0xFF	; 255
    31c2:	fc 01       	movw	r30, r24
    31c4:	20 83       	st	Z, r18
			cmdBuffer->grnIntensity[LED_ptr] = 0xFF;				// Red
    31c6:	20 91 f3 07 	lds	r18, 0x07F3
    31ca:	30 91 f4 07 	lds	r19, 0x07F4
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	9a 81       	ldd	r25, Y+2	; 0x02
    31d2:	82 0f       	add	r24, r18
    31d4:	93 1f       	adc	r25, r19
    31d6:	42 96       	adiw	r24, 0x12	; 18
    31d8:	2f ef       	ldi	r18, 0xFF	; 255
    31da:	fc 01       	movw	r30, r24
    31dc:	20 83       	st	Z, r18
			cmdBuffer->bluIntensity[LED_ptr] = 0xFF;				// Blue
    31de:	20 91 f3 07 	lds	r18, 0x07F3
    31e2:	30 91 f4 07 	lds	r19, 0x07F4
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ea:	82 0f       	add	r24, r18
    31ec:	93 1f       	adc	r25, r19
    31ee:	82 96       	adiw	r24, 0x22	; 34
    31f0:	2f ef       	ldi	r18, 0xFF	; 255
    31f2:	fc 01       	movw	r30, r24
    31f4:	20 83       	st	Z, r18
	if (buttonMode == ONESHOT)
	{
#endif
		cmdBuffer->subMode = ONESHOT;
		cmdBuffer->period_mS = 255;
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	9a 81       	ldd	r25, Y+2	; 0x02
    31fa:	01 96       	adiw	r24, 0x01	; 1
    31fc:	9a 83       	std	Y+2, r25	; 0x02
    31fe:	89 83       	std	Y+1, r24	; 0x01
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	9a 81       	ldd	r25, Y+2	; 0x02
    3204:	80 31       	cpi	r24, 0x10	; 16
    3206:	91 05       	cpc	r25, r1
    3208:	94 f2       	brlt	.-92     	; 0x31ae <sendCmdTimerHandler+0x76>
    320a:	4d c2       	rjmp	.+1178   	; 0x36a6 <sendCmdTimerHandler+0x56e>
			cmdBuffer->grnIntensity[LED_ptr] = grnADC;				// Green
			cmdBuffer->bluIntensity[LED_ptr] = bluADC;				// Blue
#endif
		}
#ifdef FREERUN
	} else if (demoCounter < 20)
    320c:	80 91 f6 07 	lds	r24, 0x07F6
    3210:	84 31       	cpi	r24, 0x14	; 20
    3212:	08 f0       	brcs	.+2      	; 0x3216 <sendCmdTimerHandler+0xde>
    3214:	4c c0       	rjmp	.+152    	; 0x32ae <sendCmdTimerHandler+0x176>
	{
		if (demoCounter < 5)
    3216:	80 91 f6 07 	lds	r24, 0x07F6
    321a:	85 30       	cpi	r24, 0x05	; 5
    321c:	18 f4       	brcc	.+6      	; 0x3224 <sendCmdTimerHandler+0xec>
		{
			shotCounter = 20;
    321e:	84 e1       	ldi	r24, 0x14	; 20
    3220:	80 93 f7 07 	sts	0x07F7, r24
#else
	} else if (buttonMode == STATIC)
	{
		shotCounter = 2;
#endif
		cmdBuffer->subMode = STATIC;
    3224:	80 91 f3 07 	lds	r24, 0x07F3
    3228:	90 91 f4 07 	lds	r25, 0x07F4
    322c:	fc 01       	movw	r30, r24
    322e:	11 82       	std	Z+1, r1	; 0x01
		cmdBuffer->period_mS = 255;
    3230:	20 91 f3 07 	lds	r18, 0x07F3
    3234:	30 91 f4 07 	lds	r19, 0x07F4
    3238:	8f ef       	ldi	r24, 0xFF	; 255
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	a0 e0       	ldi	r26, 0x00	; 0
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	f9 01       	movw	r30, r18
    3242:	84 ab       	sts	0x54, r24
    3244:	95 ab       	sts	0x55, r25
    3246:	a6 ab       	sts	0x56, r26
    3248:	b7 ab       	sts	0x57, r27
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    324a:	1c 82       	std	Y+4, r1	; 0x04
    324c:	1b 82       	std	Y+3, r1	; 0x03
    324e:	29 c0       	rjmp	.+82     	; 0x32a2 <sendCmdTimerHandler+0x16a>
		{
#ifdef FREERUN
			cmdBuffer->redIntensity[LED_ptr] = 0xFF;				// Green
    3250:	20 91 f3 07 	lds	r18, 0x07F3
    3254:	30 91 f4 07 	lds	r19, 0x07F4
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	9c 81       	ldd	r25, Y+4	; 0x04
    325c:	82 0f       	add	r24, r18
    325e:	93 1f       	adc	r25, r19
    3260:	02 96       	adiw	r24, 0x02	; 2
    3262:	2f ef       	ldi	r18, 0xFF	; 255
    3264:	fc 01       	movw	r30, r24
    3266:	20 83       	st	Z, r18
			cmdBuffer->grnIntensity[LED_ptr] = 0xFF;				// Red
    3268:	20 91 f3 07 	lds	r18, 0x07F3
    326c:	30 91 f4 07 	lds	r19, 0x07F4
    3270:	8b 81       	ldd	r24, Y+3	; 0x03
    3272:	9c 81       	ldd	r25, Y+4	; 0x04
    3274:	82 0f       	add	r24, r18
    3276:	93 1f       	adc	r25, r19
    3278:	42 96       	adiw	r24, 0x12	; 18
    327a:	2f ef       	ldi	r18, 0xFF	; 255
    327c:	fc 01       	movw	r30, r24
    327e:	20 83       	st	Z, r18
			cmdBuffer->bluIntensity[LED_ptr] = 0xFF;				// Blue
    3280:	20 91 f3 07 	lds	r18, 0x07F3
    3284:	30 91 f4 07 	lds	r19, 0x07F4
    3288:	8b 81       	ldd	r24, Y+3	; 0x03
    328a:	9c 81       	ldd	r25, Y+4	; 0x04
    328c:	82 0f       	add	r24, r18
    328e:	93 1f       	adc	r25, r19
    3290:	82 96       	adiw	r24, 0x22	; 34
    3292:	2f ef       	ldi	r18, 0xFF	; 255
    3294:	fc 01       	movw	r30, r24
    3296:	20 83       	st	Z, r18
	{
		shotCounter = 2;
#endif
		cmdBuffer->subMode = STATIC;
		cmdBuffer->period_mS = 255;
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    3298:	8b 81       	ldd	r24, Y+3	; 0x03
    329a:	9c 81       	ldd	r25, Y+4	; 0x04
    329c:	01 96       	adiw	r24, 0x01	; 1
    329e:	9c 83       	std	Y+4, r25	; 0x04
    32a0:	8b 83       	std	Y+3, r24	; 0x03
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	9c 81       	ldd	r25, Y+4	; 0x04
    32a6:	80 31       	cpi	r24, 0x10	; 16
    32a8:	91 05       	cpc	r25, r1
    32aa:	94 f2       	brlt	.-92     	; 0x3250 <sendCmdTimerHandler+0x118>
    32ac:	fc c1       	rjmp	.+1016   	; 0x36a6 <sendCmdTimerHandler+0x56e>
			cmdBuffer->grnIntensity[LED_ptr] = grnADC;				// Green
			cmdBuffer->bluIntensity[LED_ptr] = bluADC;				// Blue
#endif
		}
#ifdef FREERUN
	} else if (demoCounter < 15)
    32ae:	80 91 f6 07 	lds	r24, 0x07F6
    32b2:	8f 30       	cpi	r24, 0x0F	; 15
    32b4:	08 f0       	brcs	.+2      	; 0x32b8 <sendCmdTimerHandler+0x180>
    32b6:	4f c0       	rjmp	.+158    	; 0x3356 <sendCmdTimerHandler+0x21e>
	{
		if (demoCounter == 10)
    32b8:	80 91 f6 07 	lds	r24, 0x07F6
    32bc:	8a 30       	cpi	r24, 0x0A	; 10
    32be:	19 f4       	brne	.+6      	; 0x32c6 <sendCmdTimerHandler+0x18e>
		{
			shotCounter = 1;
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	80 93 f7 07 	sts	0x07F7, r24
		}
#else
	} else if (buttonMode == ROTATE)
	{
#endif
		cmdBuffer->subMode = ROTATE;
    32c6:	80 91 f3 07 	lds	r24, 0x07F3
    32ca:	90 91 f4 07 	lds	r25, 0x07F4
    32ce:	21 e0       	ldi	r18, 0x01	; 1
    32d0:	fc 01       	movw	r30, r24
    32d2:	21 83       	std	Z+1, r18	; 0x01
		cmdBuffer->period_mS = 62;
    32d4:	20 91 f3 07 	lds	r18, 0x07F3
    32d8:	30 91 f4 07 	lds	r19, 0x07F4
    32dc:	8e e3       	ldi	r24, 0x3E	; 62
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	a0 e0       	ldi	r26, 0x00	; 0
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	f9 01       	movw	r30, r18
    32e6:	84 ab       	sts	0x54, r24
    32e8:	95 ab       	sts	0x55, r25
    32ea:	a6 ab       	sts	0x56, r26
    32ec:	b7 ab       	sts	0x57, r27
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    32ee:	1e 82       	std	Y+6, r1	; 0x06
    32f0:	1d 82       	std	Y+5, r1	; 0x05
    32f2:	2b c0       	rjmp	.+86     	; 0x334a <sendCmdTimerHandler+0x212>
		{
#ifdef FREERUN
			cmdBuffer->redIntensity[LED_ptr] = LED_ptr*16-1;
    32f4:	20 91 f3 07 	lds	r18, 0x07F3
    32f8:	30 91 f4 07 	lds	r19, 0x07F4
    32fc:	8d 81       	ldd	r24, Y+5	; 0x05
    32fe:	82 95       	swap	r24
    3300:	80 7f       	andi	r24, 0xF0	; 240
    3302:	48 2f       	mov	r20, r24
    3304:	41 50       	subi	r20, 0x01	; 1
    3306:	8d 81       	ldd	r24, Y+5	; 0x05
    3308:	9e 81       	ldd	r25, Y+6	; 0x06
    330a:	82 0f       	add	r24, r18
    330c:	93 1f       	adc	r25, r19
    330e:	02 96       	adiw	r24, 0x02	; 2
    3310:	fc 01       	movw	r30, r24
    3312:	40 83       	st	Z, r20
			cmdBuffer->grnIntensity[LED_ptr] = 0;
    3314:	20 91 f3 07 	lds	r18, 0x07F3
    3318:	30 91 f4 07 	lds	r19, 0x07F4
    331c:	8d 81       	ldd	r24, Y+5	; 0x05
    331e:	9e 81       	ldd	r25, Y+6	; 0x06
    3320:	82 0f       	add	r24, r18
    3322:	93 1f       	adc	r25, r19
    3324:	42 96       	adiw	r24, 0x12	; 18
    3326:	fc 01       	movw	r30, r24
    3328:	10 82       	st	Z, r1
			cmdBuffer->bluIntensity[LED_ptr] = 0;
    332a:	20 91 f3 07 	lds	r18, 0x07F3
    332e:	30 91 f4 07 	lds	r19, 0x07F4
    3332:	8d 81       	ldd	r24, Y+5	; 0x05
    3334:	9e 81       	ldd	r25, Y+6	; 0x06
    3336:	82 0f       	add	r24, r18
    3338:	93 1f       	adc	r25, r19
    333a:	82 96       	adiw	r24, 0x22	; 34
    333c:	fc 01       	movw	r30, r24
    333e:	10 82       	st	Z, r1
	} else if (buttonMode == ROTATE)
	{
#endif
		cmdBuffer->subMode = ROTATE;
		cmdBuffer->period_mS = 62;
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    3340:	8d 81       	ldd	r24, Y+5	; 0x05
    3342:	9e 81       	ldd	r25, Y+6	; 0x06
    3344:	01 96       	adiw	r24, 0x01	; 1
    3346:	9e 83       	std	Y+6, r25	; 0x06
    3348:	8d 83       	std	Y+5, r24	; 0x05
    334a:	8d 81       	ldd	r24, Y+5	; 0x05
    334c:	9e 81       	ldd	r25, Y+6	; 0x06
    334e:	80 31       	cpi	r24, 0x10	; 16
    3350:	91 05       	cpc	r25, r1
    3352:	84 f2       	brlt	.-96     	; 0x32f4 <sendCmdTimerHandler+0x1bc>
    3354:	a8 c1       	rjmp	.+848    	; 0x36a6 <sendCmdTimerHandler+0x56e>
				cmdBuffer->bluIntensity[LED_ptr] = 0;
			}
#endif
		}
#ifdef FREERUN
	} else if (demoCounter < 20)
    3356:	80 91 f6 07 	lds	r24, 0x07F6
    335a:	84 31       	cpi	r24, 0x14	; 20
    335c:	08 f0       	brcs	.+2      	; 0x3360 <sendCmdTimerHandler+0x228>
    335e:	4d c0       	rjmp	.+154    	; 0x33fa <sendCmdTimerHandler+0x2c2>
	{
		if (demoCounter == 15)
    3360:	80 91 f6 07 	lds	r24, 0x07F6
    3364:	8f 30       	cpi	r24, 0x0F	; 15
    3366:	19 f4       	brne	.+6      	; 0x336e <sendCmdTimerHandler+0x236>
		{
			shotCounter = 1;
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	80 93 f7 07 	sts	0x07F7, r24
		}
#else
	} else if (buttonMode == FLASH)
	{
#endif
		cmdBuffer->subMode = FLASH;
    336e:	80 91 f3 07 	lds	r24, 0x07F3
    3372:	90 91 f4 07 	lds	r25, 0x07F4
    3376:	22 e0       	ldi	r18, 0x02	; 2
    3378:	fc 01       	movw	r30, r24
    337a:	21 83       	std	Z+1, r18	; 0x01
		cmdBuffer->period_mS = 250;
    337c:	20 91 f3 07 	lds	r18, 0x07F3
    3380:	30 91 f4 07 	lds	r19, 0x07F4
    3384:	8a ef       	ldi	r24, 0xFA	; 250
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	a0 e0       	ldi	r26, 0x00	; 0
    338a:	b0 e0       	ldi	r27, 0x00	; 0
    338c:	f9 01       	movw	r30, r18
    338e:	84 ab       	sts	0x54, r24
    3390:	95 ab       	sts	0x55, r25
    3392:	a6 ab       	sts	0x56, r26
    3394:	b7 ab       	sts	0x57, r27
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    3396:	18 86       	std	Y+8, r1	; 0x08
    3398:	1f 82       	std	Y+7, r1	; 0x07
    339a:	29 c0       	rjmp	.+82     	; 0x33ee <sendCmdTimerHandler+0x2b6>
		{
#ifdef FREERUN
			cmdBuffer->redIntensity[LED_ptr] = 0xFF;				// Green
    339c:	20 91 f3 07 	lds	r18, 0x07F3
    33a0:	30 91 f4 07 	lds	r19, 0x07F4
    33a4:	8f 81       	ldd	r24, Y+7	; 0x07
    33a6:	98 85       	ldd	r25, Y+8	; 0x08
    33a8:	82 0f       	add	r24, r18
    33aa:	93 1f       	adc	r25, r19
    33ac:	02 96       	adiw	r24, 0x02	; 2
    33ae:	2f ef       	ldi	r18, 0xFF	; 255
    33b0:	fc 01       	movw	r30, r24
    33b2:	20 83       	st	Z, r18
			cmdBuffer->grnIntensity[LED_ptr] = 0xFF;				// Red
    33b4:	20 91 f3 07 	lds	r18, 0x07F3
    33b8:	30 91 f4 07 	lds	r19, 0x07F4
    33bc:	8f 81       	ldd	r24, Y+7	; 0x07
    33be:	98 85       	ldd	r25, Y+8	; 0x08
    33c0:	82 0f       	add	r24, r18
    33c2:	93 1f       	adc	r25, r19
    33c4:	42 96       	adiw	r24, 0x12	; 18
    33c6:	2f ef       	ldi	r18, 0xFF	; 255
    33c8:	fc 01       	movw	r30, r24
    33ca:	20 83       	st	Z, r18
			cmdBuffer->bluIntensity[LED_ptr] = 0xFF;				// Blue
    33cc:	20 91 f3 07 	lds	r18, 0x07F3
    33d0:	30 91 f4 07 	lds	r19, 0x07F4
    33d4:	8f 81       	ldd	r24, Y+7	; 0x07
    33d6:	98 85       	ldd	r25, Y+8	; 0x08
    33d8:	82 0f       	add	r24, r18
    33da:	93 1f       	adc	r25, r19
    33dc:	82 96       	adiw	r24, 0x22	; 34
    33de:	2f ef       	ldi	r18, 0xFF	; 255
    33e0:	fc 01       	movw	r30, r24
    33e2:	20 83       	st	Z, r18
	} else if (buttonMode == FLASH)
	{
#endif
		cmdBuffer->subMode = FLASH;
		cmdBuffer->period_mS = 250;
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    33e4:	8f 81       	ldd	r24, Y+7	; 0x07
    33e6:	98 85       	ldd	r25, Y+8	; 0x08
    33e8:	01 96       	adiw	r24, 0x01	; 1
    33ea:	98 87       	std	Y+8, r25	; 0x08
    33ec:	8f 83       	std	Y+7, r24	; 0x07
    33ee:	8f 81       	ldd	r24, Y+7	; 0x07
    33f0:	98 85       	ldd	r25, Y+8	; 0x08
    33f2:	80 31       	cpi	r24, 0x10	; 16
    33f4:	91 05       	cpc	r25, r1
    33f6:	94 f2       	brlt	.-92     	; 0x339c <sendCmdTimerHandler+0x264>
    33f8:	56 c1       	rjmp	.+684    	; 0x36a6 <sendCmdTimerHandler+0x56e>
			cmdBuffer->bluIntensity[LED_ptr] = bluADC;				// Blue
#endif
		}

#ifdef FREERUN
	} else if (demoCounter < 25)
    33fa:	80 91 f6 07 	lds	r24, 0x07F6
    33fe:	89 31       	cpi	r24, 0x19	; 25
    3400:	08 f0       	brcs	.+2      	; 0x3404 <sendCmdTimerHandler+0x2cc>
    3402:	56 c0       	rjmp	.+172    	; 0x34b0 <sendCmdTimerHandler+0x378>
	{
		if (demoCounter == 20)
    3404:	80 91 f6 07 	lds	r24, 0x07F6
    3408:	84 31       	cpi	r24, 0x14	; 20
    340a:	19 f4       	brne	.+6      	; 0x3412 <sendCmdTimerHandler+0x2da>
		{
			shotCounter = 1;
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	80 93 f7 07 	sts	0x07F7, r24
		}
#else
	} else if (buttonMode == RANDOM)
	{
#endif
		cmdBuffer->subMode = RANDOM;
    3412:	80 91 f3 07 	lds	r24, 0x07F3
    3416:	90 91 f4 07 	lds	r25, 0x07F4
    341a:	23 e0       	ldi	r18, 0x03	; 3
    341c:	fc 01       	movw	r30, r24
    341e:	21 83       	std	Z+1, r18	; 0x01
		cmdBuffer->period_mS = 100;
    3420:	20 91 f3 07 	lds	r18, 0x07F3
    3424:	30 91 f4 07 	lds	r19, 0x07F4
    3428:	84 e6       	ldi	r24, 0x64	; 100
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	a0 e0       	ldi	r26, 0x00	; 0
    342e:	b0 e0       	ldi	r27, 0x00	; 0
    3430:	f9 01       	movw	r30, r18
    3432:	84 ab       	sts	0x54, r24
    3434:	95 ab       	sts	0x55, r25
    3436:	a6 ab       	sts	0x56, r26
    3438:	b7 ab       	sts	0x57, r27
		cmdBuffer->modeParam = 512;		// This is the probability for how often to flash
    343a:	80 91 f3 07 	lds	r24, 0x07F3
    343e:	90 91 f4 07 	lds	r25, 0x07F4
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	32 e0       	ldi	r19, 0x02	; 2
    3446:	fc 01       	movw	r30, r24
    3448:	33 ab       	sts	0x53, r19
    344a:	22 ab       	sts	0x52, r18
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    344c:	1a 86       	std	Y+10, r1	; 0x0a
    344e:	19 86       	std	Y+9, r1	; 0x09
    3450:	29 c0       	rjmp	.+82     	; 0x34a4 <sendCmdTimerHandler+0x36c>
		{
#ifdef FREERUN
			cmdBuffer->redIntensity[LED_ptr] = 0xFF;				// Green
    3452:	20 91 f3 07 	lds	r18, 0x07F3
    3456:	30 91 f4 07 	lds	r19, 0x07F4
    345a:	89 85       	ldd	r24, Y+9	; 0x09
    345c:	9a 85       	ldd	r25, Y+10	; 0x0a
    345e:	82 0f       	add	r24, r18
    3460:	93 1f       	adc	r25, r19
    3462:	02 96       	adiw	r24, 0x02	; 2
    3464:	2f ef       	ldi	r18, 0xFF	; 255
    3466:	fc 01       	movw	r30, r24
    3468:	20 83       	st	Z, r18
			cmdBuffer->grnIntensity[LED_ptr] = 0xFF;				// Red
    346a:	20 91 f3 07 	lds	r18, 0x07F3
    346e:	30 91 f4 07 	lds	r19, 0x07F4
    3472:	89 85       	ldd	r24, Y+9	; 0x09
    3474:	9a 85       	ldd	r25, Y+10	; 0x0a
    3476:	82 0f       	add	r24, r18
    3478:	93 1f       	adc	r25, r19
    347a:	42 96       	adiw	r24, 0x12	; 18
    347c:	2f ef       	ldi	r18, 0xFF	; 255
    347e:	fc 01       	movw	r30, r24
    3480:	20 83       	st	Z, r18
			cmdBuffer->bluIntensity[LED_ptr] = 0xFF;				// Blue
    3482:	20 91 f3 07 	lds	r18, 0x07F3
    3486:	30 91 f4 07 	lds	r19, 0x07F4
    348a:	89 85       	ldd	r24, Y+9	; 0x09
    348c:	9a 85       	ldd	r25, Y+10	; 0x0a
    348e:	82 0f       	add	r24, r18
    3490:	93 1f       	adc	r25, r19
    3492:	82 96       	adiw	r24, 0x22	; 34
    3494:	2f ef       	ldi	r18, 0xFF	; 255
    3496:	fc 01       	movw	r30, r24
    3498:	20 83       	st	Z, r18
	{
#endif
		cmdBuffer->subMode = RANDOM;
		cmdBuffer->period_mS = 100;
		cmdBuffer->modeParam = 512;		// This is the probability for how often to flash
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    349a:	89 85       	ldd	r24, Y+9	; 0x09
    349c:	9a 85       	ldd	r25, Y+10	; 0x0a
    349e:	01 96       	adiw	r24, 0x01	; 1
    34a0:	9a 87       	std	Y+10, r25	; 0x0a
    34a2:	89 87       	std	Y+9, r24	; 0x09
    34a4:	89 85       	ldd	r24, Y+9	; 0x09
    34a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a8:	80 31       	cpi	r24, 0x10	; 16
    34aa:	91 05       	cpc	r25, r1
    34ac:	94 f2       	brlt	.-92     	; 0x3452 <sendCmdTimerHandler+0x31a>
    34ae:	fb c0       	rjmp	.+502    	; 0x36a6 <sendCmdTimerHandler+0x56e>
			cmdBuffer->grnIntensity[LED_ptr] = grnADC;				// Green
			cmdBuffer->bluIntensity[LED_ptr] = bluADC;				// Blue
#endif
		}
#ifdef FREERUN
	} else if (demoCounter < 30)
    34b0:	80 91 f6 07 	lds	r24, 0x07F6
    34b4:	8e 31       	cpi	r24, 0x1E	; 30
    34b6:	08 f0       	brcs	.+2      	; 0x34ba <sendCmdTimerHandler+0x382>
    34b8:	56 c0       	rjmp	.+172    	; 0x3566 <sendCmdTimerHandler+0x42e>
	{
		if (demoCounter == 25)
    34ba:	80 91 f6 07 	lds	r24, 0x07F6
    34be:	89 31       	cpi	r24, 0x19	; 25
    34c0:	19 f4       	brne	.+6      	; 0x34c8 <sendCmdTimerHandler+0x390>
		{
			shotCounter = 1;
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	80 93 f7 07 	sts	0x07F7, r24
		}
#else
	} else if (buttonMode == THROB)
	{
#endif
		cmdBuffer->subMode = THROB;
    34c8:	80 91 f3 07 	lds	r24, 0x07F3
    34cc:	90 91 f4 07 	lds	r25, 0x07F4
    34d0:	24 e0       	ldi	r18, 0x04	; 4
    34d2:	fc 01       	movw	r30, r24
    34d4:	21 83       	std	Z+1, r18	; 0x01
		cmdBuffer->period_mS = 62;
    34d6:	20 91 f3 07 	lds	r18, 0x07F3
    34da:	30 91 f4 07 	lds	r19, 0x07F4
    34de:	8e e3       	ldi	r24, 0x3E	; 62
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	a0 e0       	ldi	r26, 0x00	; 0
    34e4:	b0 e0       	ldi	r27, 0x00	; 0
    34e6:	f9 01       	movw	r30, r18
    34e8:	84 ab       	sts	0x54, r24
    34ea:	95 ab       	sts	0x55, r25
    34ec:	a6 ab       	sts	0x56, r26
    34ee:	b7 ab       	sts	0x57, r27
		cmdBuffer->modeParam = 4;			// The rate at which is throbs
    34f0:	80 91 f3 07 	lds	r24, 0x07F3
    34f4:	90 91 f4 07 	lds	r25, 0x07F4
    34f8:	24 e0       	ldi	r18, 0x04	; 4
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	fc 01       	movw	r30, r24
    34fe:	33 ab       	sts	0x53, r19
    3500:	22 ab       	sts	0x52, r18
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    3502:	1c 86       	std	Y+12, r1	; 0x0c
    3504:	1b 86       	std	Y+11, r1	; 0x0b
    3506:	29 c0       	rjmp	.+82     	; 0x355a <sendCmdTimerHandler+0x422>
		{
#ifdef FREERUN
			cmdBuffer->redIntensity[LED_ptr] = 0xFF;				// Green
    3508:	20 91 f3 07 	lds	r18, 0x07F3
    350c:	30 91 f4 07 	lds	r19, 0x07F4
    3510:	8b 85       	ldd	r24, Y+11	; 0x0b
    3512:	9c 85       	ldd	r25, Y+12	; 0x0c
    3514:	82 0f       	add	r24, r18
    3516:	93 1f       	adc	r25, r19
    3518:	02 96       	adiw	r24, 0x02	; 2
    351a:	2f ef       	ldi	r18, 0xFF	; 255
    351c:	fc 01       	movw	r30, r24
    351e:	20 83       	st	Z, r18
			cmdBuffer->grnIntensity[LED_ptr] = 0xFF;				// Red
    3520:	20 91 f3 07 	lds	r18, 0x07F3
    3524:	30 91 f4 07 	lds	r19, 0x07F4
    3528:	8b 85       	ldd	r24, Y+11	; 0x0b
    352a:	9c 85       	ldd	r25, Y+12	; 0x0c
    352c:	82 0f       	add	r24, r18
    352e:	93 1f       	adc	r25, r19
    3530:	42 96       	adiw	r24, 0x12	; 18
    3532:	2f ef       	ldi	r18, 0xFF	; 255
    3534:	fc 01       	movw	r30, r24
    3536:	20 83       	st	Z, r18
			cmdBuffer->bluIntensity[LED_ptr] = 0xFF;				// Blue
    3538:	20 91 f3 07 	lds	r18, 0x07F3
    353c:	30 91 f4 07 	lds	r19, 0x07F4
    3540:	8b 85       	ldd	r24, Y+11	; 0x0b
    3542:	9c 85       	ldd	r25, Y+12	; 0x0c
    3544:	82 0f       	add	r24, r18
    3546:	93 1f       	adc	r25, r19
    3548:	82 96       	adiw	r24, 0x22	; 34
    354a:	2f ef       	ldi	r18, 0xFF	; 255
    354c:	fc 01       	movw	r30, r24
    354e:	20 83       	st	Z, r18
	{
#endif
		cmdBuffer->subMode = THROB;
		cmdBuffer->period_mS = 62;
		cmdBuffer->modeParam = 4;			// The rate at which is throbs
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    3550:	8b 85       	ldd	r24, Y+11	; 0x0b
    3552:	9c 85       	ldd	r25, Y+12	; 0x0c
    3554:	01 96       	adiw	r24, 0x01	; 1
    3556:	9c 87       	std	Y+12, r25	; 0x0c
    3558:	8b 87       	std	Y+11, r24	; 0x0b
    355a:	8b 85       	ldd	r24, Y+11	; 0x0b
    355c:	9c 85       	ldd	r25, Y+12	; 0x0c
    355e:	80 31       	cpi	r24, 0x10	; 16
    3560:	91 05       	cpc	r25, r1
    3562:	94 f2       	brlt	.-92     	; 0x3508 <sendCmdTimerHandler+0x3d0>
    3564:	a0 c0       	rjmp	.+320    	; 0x36a6 <sendCmdTimerHandler+0x56e>
			cmdBuffer->bluIntensity[LED_ptr] = bluADC;				// Blue
#endif
		}

#ifdef FREERUN
	} else if (demoCounter < 35)
    3566:	80 91 f6 07 	lds	r24, 0x07F6
    356a:	83 32       	cpi	r24, 0x23	; 35
    356c:	08 f0       	brcs	.+2      	; 0x3570 <sendCmdTimerHandler+0x438>
    356e:	4a c0       	rjmp	.+148    	; 0x3604 <sendCmdTimerHandler+0x4cc>
	{
		if (demoCounter == 30)
    3570:	80 91 f6 07 	lds	r24, 0x07F6
    3574:	8e 31       	cpi	r24, 0x1E	; 30
    3576:	19 f4       	brne	.+6      	; 0x357e <sendCmdTimerHandler+0x446>
		{
			shotCounter = 1;
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	80 93 f7 07 	sts	0x07F7, r24
		}
#else
	} else if (buttonMode == FIRECRACKER)
	{
#endif
		cmdBuffer->subMode = FIRECRACKER;
    357e:	80 91 f3 07 	lds	r24, 0x07F3
    3582:	90 91 f4 07 	lds	r25, 0x07F4
    3586:	25 e0       	ldi	r18, 0x05	; 5
    3588:	fc 01       	movw	r30, r24
    358a:	21 83       	std	Z+1, r18	; 0x01
		cmdBuffer->period_mS = 62;
    358c:	20 91 f3 07 	lds	r18, 0x07F3
    3590:	30 91 f4 07 	lds	r19, 0x07F4
    3594:	8e e3       	ldi	r24, 0x3E	; 62
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	a0 e0       	ldi	r26, 0x00	; 0
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	f9 01       	movw	r30, r18
    359e:	84 ab       	sts	0x54, r24
    35a0:	95 ab       	sts	0x55, r25
    35a2:	a6 ab       	sts	0x56, r26
    35a4:	b7 ab       	sts	0x57, r27
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    35a6:	1e 86       	std	Y+14, r1	; 0x0e
    35a8:	1d 86       	std	Y+13, r1	; 0x0d
    35aa:	26 c0       	rjmp	.+76     	; 0x35f8 <sendCmdTimerHandler+0x4c0>
		{
			cmdBuffer->redIntensity[LED_ptr] = 0;				// Green
    35ac:	20 91 f3 07 	lds	r18, 0x07F3
    35b0:	30 91 f4 07 	lds	r19, 0x07F4
    35b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b8:	82 0f       	add	r24, r18
    35ba:	93 1f       	adc	r25, r19
    35bc:	02 96       	adiw	r24, 0x02	; 2
    35be:	fc 01       	movw	r30, r24
    35c0:	10 82       	st	Z, r1
			cmdBuffer->grnIntensity[LED_ptr] = 0;				// Red
    35c2:	20 91 f3 07 	lds	r18, 0x07F3
    35c6:	30 91 f4 07 	lds	r19, 0x07F4
    35ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    35cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ce:	82 0f       	add	r24, r18
    35d0:	93 1f       	adc	r25, r19
    35d2:	42 96       	adiw	r24, 0x12	; 18
    35d4:	fc 01       	movw	r30, r24
    35d6:	10 82       	st	Z, r1
			cmdBuffer->bluIntensity[LED_ptr] = 0;				// Blue
    35d8:	20 91 f3 07 	lds	r18, 0x07F3
    35dc:	30 91 f4 07 	lds	r19, 0x07F4
    35e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e4:	82 0f       	add	r24, r18
    35e6:	93 1f       	adc	r25, r19
    35e8:	82 96       	adiw	r24, 0x22	; 34
    35ea:	fc 01       	movw	r30, r24
    35ec:	10 82       	st	Z, r1
	} else if (buttonMode == FIRECRACKER)
	{
#endif
		cmdBuffer->subMode = FIRECRACKER;
		cmdBuffer->period_mS = 62;
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    35ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f2:	01 96       	adiw	r24, 0x01	; 1
    35f4:	9e 87       	std	Y+14, r25	; 0x0e
    35f6:	8d 87       	std	Y+13, r24	; 0x0d
    35f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fc:	80 31       	cpi	r24, 0x10	; 16
    35fe:	91 05       	cpc	r25, r1
    3600:	ac f2       	brlt	.-86     	; 0x35ac <sendCmdTimerHandler+0x474>
    3602:	51 c0       	rjmp	.+162    	; 0x36a6 <sendCmdTimerHandler+0x56e>
			cmdBuffer->redIntensity[LED_ptr] = 0;				// Green
			cmdBuffer->grnIntensity[LED_ptr] = 0;				// Red
			cmdBuffer->bluIntensity[LED_ptr] = 0;				// Blue
		}
#ifdef FREERUN
	} else if (demoCounter < 40)
    3604:	80 91 f6 07 	lds	r24, 0x07F6
    3608:	88 32       	cpi	r24, 0x28	; 40
    360a:	08 f0       	brcs	.+2      	; 0x360e <sendCmdTimerHandler+0x4d6>
    360c:	4a c0       	rjmp	.+148    	; 0x36a2 <sendCmdTimerHandler+0x56a>
	{
		if (demoCounter == 35)
    360e:	80 91 f6 07 	lds	r24, 0x07F6
    3612:	83 32       	cpi	r24, 0x23	; 35
    3614:	19 f4       	brne	.+6      	; 0x361c <sendCmdTimerHandler+0x4e4>
		{
			shotCounter = 1;
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	80 93 f7 07 	sts	0x07F7, r24
#else
	} else if (buttonMode == ORBITALS)
	{
		shotCounter = 2;
#endif
		cmdBuffer->subMode = ORBITALS;
    361c:	80 91 f3 07 	lds	r24, 0x07F3
    3620:	90 91 f4 07 	lds	r25, 0x07F4
    3624:	26 e0       	ldi	r18, 0x06	; 6
    3626:	fc 01       	movw	r30, r24
    3628:	21 83       	std	Z+1, r18	; 0x01
		cmdBuffer->period_mS = 62;
    362a:	20 91 f3 07 	lds	r18, 0x07F3
    362e:	30 91 f4 07 	lds	r19, 0x07F4
    3632:	8e e3       	ldi	r24, 0x3E	; 62
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	a0 e0       	ldi	r26, 0x00	; 0
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	f9 01       	movw	r30, r18
    363c:	84 ab       	sts	0x54, r24
    363e:	95 ab       	sts	0x55, r25
    3640:	a6 ab       	sts	0x56, r26
    3642:	b7 ab       	sts	0x57, r27
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    3644:	18 8a       	std	Y+16, r1	; 0x10
    3646:	1f 86       	std	Y+15, r1	; 0x0f
    3648:	26 c0       	rjmp	.+76     	; 0x3696 <sendCmdTimerHandler+0x55e>
		{
			cmdBuffer->redIntensity[LED_ptr] = 0;				// Green
    364a:	20 91 f3 07 	lds	r18, 0x07F3
    364e:	30 91 f4 07 	lds	r19, 0x07F4
    3652:	8f 85       	ldd	r24, Y+15	; 0x0f
    3654:	98 89       	ldd	r25, Y+16	; 0x10
    3656:	82 0f       	add	r24, r18
    3658:	93 1f       	adc	r25, r19
    365a:	02 96       	adiw	r24, 0x02	; 2
    365c:	fc 01       	movw	r30, r24
    365e:	10 82       	st	Z, r1
			cmdBuffer->grnIntensity[LED_ptr] = 0;				// Red
    3660:	20 91 f3 07 	lds	r18, 0x07F3
    3664:	30 91 f4 07 	lds	r19, 0x07F4
    3668:	8f 85       	ldd	r24, Y+15	; 0x0f
    366a:	98 89       	ldd	r25, Y+16	; 0x10
    366c:	82 0f       	add	r24, r18
    366e:	93 1f       	adc	r25, r19
    3670:	42 96       	adiw	r24, 0x12	; 18
    3672:	fc 01       	movw	r30, r24
    3674:	10 82       	st	Z, r1
			cmdBuffer->bluIntensity[LED_ptr] = 0;				// Blue
    3676:	20 91 f3 07 	lds	r18, 0x07F3
    367a:	30 91 f4 07 	lds	r19, 0x07F4
    367e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3680:	98 89       	ldd	r25, Y+16	; 0x10
    3682:	82 0f       	add	r24, r18
    3684:	93 1f       	adc	r25, r19
    3686:	82 96       	adiw	r24, 0x22	; 34
    3688:	fc 01       	movw	r30, r24
    368a:	10 82       	st	Z, r1
	{
		shotCounter = 2;
#endif
		cmdBuffer->subMode = ORBITALS;
		cmdBuffer->period_mS = 62;
		for (int LED_ptr=0;LED_ptr<NUM_LEDS;LED_ptr++)
    368c:	8f 85       	ldd	r24, Y+15	; 0x0f
    368e:	98 89       	ldd	r25, Y+16	; 0x10
    3690:	01 96       	adiw	r24, 0x01	; 1
    3692:	98 8b       	std	Y+16, r25	; 0x10
    3694:	8f 87       	std	Y+15, r24	; 0x0f
    3696:	8f 85       	ldd	r24, Y+15	; 0x0f
    3698:	98 89       	ldd	r25, Y+16	; 0x10
    369a:	80 31       	cpi	r24, 0x10	; 16
    369c:	91 05       	cpc	r25, r1
    369e:	ac f2       	brlt	.-86     	; 0x364a <sendCmdTimerHandler+0x512>
    36a0:	02 c0       	rjmp	.+4      	; 0x36a6 <sendCmdTimerHandler+0x56e>
			cmdBuffer->bluIntensity[LED_ptr] = 0;				// Blue
		}

	} else
	{
		demoCounter = 0;
    36a2:	10 92 f6 07 	sts	0x07F6, r1
	}
	if (shotCounter > 0)
    36a6:	80 91 f7 07 	lds	r24, 0x07F7
    36aa:	88 23       	and	r24, r24
    36ac:	39 f0       	breq	.+14     	; 0x36bc <sendCmdTimerHandler+0x584>
	{
		appSendData();
    36ae:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <appSendData>
		shotCounter--;
    36b2:	80 91 f7 07 	lds	r24, 0x07F7
    36b6:	81 50       	subi	r24, 0x01	; 1
    36b8:	80 93 f7 07 	sts	0x07F7, r24
	}
	demoCounter++;
    36bc:	80 91 f6 07 	lds	r24, 0x07F6
    36c0:	8f 5f       	subi	r24, 0xFF	; 255
    36c2:	80 93 f6 07 	sts	0x07F6, r24
}
    36c6:	62 96       	adiw	r28, 0x12	; 18
    36c8:	0f b6       	in	r0, 0x3f	; 63
    36ca:	f8 94       	cli
    36cc:	de bf       	out	0x3e, r29	; 62
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	cd bf       	out	0x3d, r28	; 61
    36d2:	df 91       	pop	r29
    36d4:	cf 91       	pop	r28
    36d6:	08 95       	ret

000036d8 <appDataInd>:

/*****************************************************************************
	Callback function from the network stack with received data
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    36d8:	cf 93       	push	r28
    36da:	df 93       	push	r29
    36dc:	00 d0       	rcall	.+0      	; 0x36de <appDataInd+0x6>
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	9a 83       	std	Y+2, r25	; 0x02
    36e4:	89 83       	std	Y+1, r24	; 0x01
//			if (ind->dstEndpoint = ledCommand) {
	//				if  (ind->data[1] = ledBrightness) {
	memcpy(appWorkingBuffer, ind, ind->size);
    36e6:	89 81       	ldd	r24, Y+1	; 0x01
    36e8:	9a 81       	ldd	r25, Y+2	; 0x02
    36ea:	fc 01       	movw	r30, r24
    36ec:	87 81       	ldd	r24, Z+7	; 0x07
    36ee:	28 2f       	mov	r18, r24
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	49 81       	ldd	r20, Y+1	; 0x01
    36f4:	5a 81       	ldd	r21, Y+2	; 0x02
    36f6:	88 e8       	ldi	r24, 0x88	; 136
    36f8:	97 e0       	ldi	r25, 0x07	; 7
    36fa:	ba 01       	movw	r22, r20
    36fc:	a9 01       	movw	r20, r18
    36fe:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <memcpy>
	appWorkingBufferLen = ind->size;
    3702:	89 81       	ldd	r24, Y+1	; 0x01
    3704:	9a 81       	ldd	r25, Y+2	; 0x02
    3706:	fc 01       	movw	r30, r24
    3708:	87 81       	ldd	r24, Z+7	; 0x07
    370a:	80 93 f1 07 	sts	0x07F1, r24
	appState = APP_STATE_RECD;
    370e:	83 e0       	ldi	r24, 0x03	; 3
    3710:	80 93 e5 06 	sts	0x06E5, r24

	return true;
    3714:	81 e0       	ldi	r24, 0x01	; 1
}
    3716:	0f 90       	pop	r0
    3718:	0f 90       	pop	r0
    371a:	df 91       	pop	r29
    371c:	cf 91       	pop	r28
    371e:	08 95       	ret

00003720 <PHY_EdConf>:

/*****************************************************************************
	Callback function from the network stack for energy detection measurement
*****************************************************************************/
void PHY_EdConf(int8_t energyLevel)
{
    3720:	cf 93       	push	r28
    3722:	df 93       	push	r29
    3724:	0f 92       	push	r0
    3726:	cd b7       	in	r28, 0x3d	; 61
    3728:	de b7       	in	r29, 0x3e	; 62
    372a:	89 83       	std	Y+1, r24	; 0x01
	chanEnergy[currentChannel] = energyLevel;
    372c:	80 91 08 08 	lds	r24, 0x0808
    3730:	88 2f       	mov	r24, r24
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	29 81       	ldd	r18, Y+1	; 0x01
    3736:	88 50       	subi	r24, 0x08	; 8
    3738:	98 4f       	sbci	r25, 0xF8	; 248
    373a:	fc 01       	movw	r30, r24
    373c:	20 83       	st	Z, r18
	channelComplete = true;
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	80 93 09 08 	sts	0x0809, r24
}
    3744:	0f 90       	pop	r0
    3746:	df 91       	pop	r29
    3748:	cf 91       	pop	r28
    374a:	08 95       	ret

0000374c <appInit>:

/*****************************************************************************
	Initialization function, intended to be run only once as the node starts up
*****************************************************************************/
static void appInit(void)
{
    374c:	cf 93       	push	r28
    374e:	df 93       	push	r29
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
	eeprom_busy_wait();
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		myAddr = eeprom_read_word(&APP_ADDR);
	}
#else
	myAddr = APP_ADDR;
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	90 93 e4 06 	sts	0x06E4, r25
    375c:	80 93 e3 06 	sts	0x06E3, r24
#endif
//
// Initialize the network stack
	NWK_SetAddr(myAddr);
    3760:	80 91 e3 06 	lds	r24, 0x06E3
    3764:	90 91 e4 06 	lds	r25, 0x06E4
    3768:	0e 94 1b 05 	call	0xa36	; 0xa36 <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
    376c:	86 e4       	ldi	r24, 0x46	; 70
    376e:	96 e4       	ldi	r25, 0x46	; 70
    3770:	0e 94 31 05 	call	0xa62	; 0xa62 <NWK_SetPanId>
	for (currentChannel=LOW_CHANNEL;currentChannel<=HIGH_CHANNEL;currentChannel++)
    3774:	8b e0       	ldi	r24, 0x0B	; 11
    3776:	80 93 08 08 	sts	0x0808, r24
    377a:	16 c0       	rjmp	.+44     	; 0x37a8 <appInit+0x5c>
	{
		PHY_SetChannel(currentChannel);
    377c:	80 91 08 08 	lds	r24, 0x0808
    3780:	0e 94 9a 01 	call	0x334	; 0x334 <PHY_SetChannel>
		channelComplete = false;
    3784:	10 92 09 08 	sts	0x0809, r1
		PHY_EdReq();
    3788:	0e 94 4a 02 	call	0x494	; 0x494 <PHY_EdReq>
		while (!channelComplete)
    378c:	02 c0       	rjmp	.+4      	; 0x3792 <appInit+0x46>
		    SYS_TaskHandler();
    378e:	0e 94 6e 15 	call	0x2adc	; 0x2adc <SYS_TaskHandler>
	for (currentChannel=LOW_CHANNEL;currentChannel<=HIGH_CHANNEL;currentChannel++)
	{
		PHY_SetChannel(currentChannel);
		channelComplete = false;
		PHY_EdReq();
		while (!channelComplete)
    3792:	90 91 09 08 	lds	r25, 0x0809
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	89 27       	eor	r24, r25
    379a:	88 23       	and	r24, r24
    379c:	c1 f7       	brne	.-16     	; 0x378e <appInit+0x42>
#endif
//
// Initialize the network stack
	NWK_SetAddr(myAddr);
	NWK_SetPanId(APP_PANID);
	for (currentChannel=LOW_CHANNEL;currentChannel<=HIGH_CHANNEL;currentChannel++)
    379e:	80 91 08 08 	lds	r24, 0x0808
    37a2:	8f 5f       	subi	r24, 0xFF	; 255
    37a4:	80 93 08 08 	sts	0x0808, r24
    37a8:	80 91 08 08 	lds	r24, 0x0808
    37ac:	8b 31       	cpi	r24, 0x1B	; 27
    37ae:	30 f3       	brcs	.-52     	; 0x377c <appInit+0x30>
		channelComplete = false;
		PHY_EdReq();
		while (!channelComplete)
		    SYS_TaskHandler();
	}
	PHY_SetChannel(APP_CHANNEL);
    37b0:	8d e0       	ldi	r24, 0x0D	; 13
    37b2:	0e 94 9a 01 	call	0x334	; 0x334 <PHY_SetChannel>
	PHY_SetRxState(true);
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	0e 94 88 01 	call	0x310	; 0x310 <PHY_SetRxState>
	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    37bc:	2c e6       	ldi	r18, 0x6C	; 108
    37be:	3b e1       	ldi	r19, 0x1B	; 27
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	b9 01       	movw	r22, r18
    37c4:	0e 94 47 05 	call	0xa8e	; 0xa8e <NWK_OpenEndpoint>
//
// Define a timer that periodically triggers a command into the mesh
	sendCmdTimer.interval = APP_SEND_TIMER_INTERVAL;
    37c8:	84 ef       	ldi	r24, 0xF4	; 244
    37ca:	91 e0       	ldi	r25, 0x01	; 1
    37cc:	a0 e0       	ldi	r26, 0x00	; 0
    37ce:	b0 e0       	ldi	r27, 0x00	; 0
    37d0:	80 93 ec 06 	sts	0x06EC, r24
    37d4:	90 93 ed 06 	sts	0x06ED, r25
    37d8:	a0 93 ee 06 	sts	0x06EE, r26
    37dc:	b0 93 ef 06 	sts	0x06EF, r27
	sendCmdTimer.mode = SYS_TIMER_PERIODIC_MODE;
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	80 93 f0 06 	sts	0x06F0, r24
	sendCmdTimer.handler = sendCmdTimerHandler;
    37e6:	8c e9       	ldi	r24, 0x9C	; 156
    37e8:	98 e1       	ldi	r25, 0x18	; 24
    37ea:	90 93 f2 06 	sts	0x06F2, r25
    37ee:	80 93 f1 06 	sts	0x06F1, r24
	SYS_TimerStart(&sendCmdTimer);
    37f2:	86 ee       	ldi	r24, 0xE6	; 230
    37f4:	96 e0       	ldi	r25, 0x06	; 6
    37f6:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <SYS_TimerStart>
//
// Define a timer that periodically triggers a command into the mesh
	meshHeartbeatTimer.interval = COMMAND_TIMEOUT_INTERVAL;
    37fa:	88 ea       	ldi	r24, 0xA8	; 168
    37fc:	91 e6       	ldi	r25, 0x61	; 97
    37fe:	a0 e0       	ldi	r26, 0x00	; 0
    3800:	b0 e0       	ldi	r27, 0x00	; 0
    3802:	80 93 06 07 	sts	0x0706, r24
    3806:	90 93 07 07 	sts	0x0707, r25
    380a:	a0 93 08 07 	sts	0x0708, r26
    380e:	b0 93 09 07 	sts	0x0709, r27
	meshHeartbeatTimer.mode = SYS_TIMER_PERIODIC_MODE;
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	80 93 0a 07 	sts	0x070A, r24
	meshHeartbeatTimer.handler = meshHeartbeatTimerHandler;
    3818:	8e e7       	ldi	r24, 0x7E	; 126
    381a:	98 e1       	ldi	r25, 0x18	; 24
    381c:	90 93 0c 07 	sts	0x070C, r25
    3820:	80 93 0b 07 	sts	0x070B, r24
	SYS_TimerStart(&meshHeartbeatTimer);
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	97 e0       	ldi	r25, 0x07	; 7
    3828:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <SYS_TimerStart>
//
// Define a timer that periodically triggers a poll of the inputs
	pollInputsTimer.interval = IO_POLL_TIMER_INTERVAL;
    382c:	8a ef       	ldi	r24, 0xFA	; 250
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	a0 e0       	ldi	r26, 0x00	; 0
    3832:	b0 e0       	ldi	r27, 0x00	; 0
    3834:	80 93 f9 06 	sts	0x06F9, r24
    3838:	90 93 fa 06 	sts	0x06FA, r25
    383c:	a0 93 fb 06 	sts	0x06FB, r26
    3840:	b0 93 fc 06 	sts	0x06FC, r27
	pollInputsTimer.mode = SYS_TIMER_PERIODIC_MODE;
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	80 93 fd 06 	sts	0x06FD, r24
	pollInputsTimer.handler = pollIOTimerHandler;
    384a:	8d e1       	ldi	r24, 0x1D	; 29
    384c:	98 e1       	ldi	r25, 0x18	; 24
    384e:	90 93 ff 06 	sts	0x06FF, r25
    3852:	80 93 fe 06 	sts	0x06FE, r24
	SYS_TimerStart(&pollInputsTimer);
    3856:	83 ef       	ldi	r24, 0xF3	; 243
    3858:	96 e0       	ldi	r25, 0x06	; 6
    385a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <SYS_TimerStart>
#if BOARD_VERSION == 1
	HAL_GPIO_PIN(hbLED, E, 0)
	HAL_GPIO_PIN(statusLED, E, 1)
	HAL_GPIO_PIN(sendStatusLED, E, 2)
#elif BOARD_VERSION == 2
	HAL_GPIO_PIN(hbLED, G, 0)
    385e:	83 e3       	ldi	r24, 0x33	; 51
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	23 e3       	ldi	r18, 0x33	; 51
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	f9 01       	movw	r30, r18
    3868:	20 81       	ld	r18, Z
    386a:	21 60       	ori	r18, 0x01	; 1
    386c:	fc 01       	movw	r30, r24
    386e:	20 83       	st	Z, r18
    3870:	84 e3       	ldi	r24, 0x34	; 52
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	24 e3       	ldi	r18, 0x34	; 52
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	f9 01       	movw	r30, r18
    387a:	20 81       	ld	r18, Z
    387c:	2e 7f       	andi	r18, 0xFE	; 254
    387e:	fc 01       	movw	r30, r24
    3880:	20 83       	st	Z, r18
	HAL_GPIO_PIN(statusLED, D, 7)
    3882:	8a e2       	ldi	r24, 0x2A	; 42
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	2a e2       	ldi	r18, 0x2A	; 42
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	f9 01       	movw	r30, r18
    388c:	20 81       	ld	r18, Z
    388e:	20 68       	ori	r18, 0x80	; 128
    3890:	fc 01       	movw	r30, r24
    3892:	20 83       	st	Z, r18
    3894:	8b e2       	ldi	r24, 0x2B	; 43
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	2b e2       	ldi	r18, 0x2B	; 43
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	f9 01       	movw	r30, r18
    389e:	20 81       	ld	r18, Z
    38a0:	2f 77       	andi	r18, 0x7F	; 127
    38a2:	fc 01       	movw	r30, r24
    38a4:	20 83       	st	Z, r18
	HAL_GPIO_PIN(sendStatusLED, E, 0)
    38a6:	8d e2       	ldi	r24, 0x2D	; 45
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	2d e2       	ldi	r18, 0x2D	; 45
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	f9 01       	movw	r30, r18
    38b0:	20 81       	ld	r18, Z
    38b2:	21 60       	ori	r18, 0x01	; 1
    38b4:	fc 01       	movw	r30, r24
    38b6:	20 83       	st	Z, r18
    38b8:	8e e2       	ldi	r24, 0x2E	; 46
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	2e e2       	ldi	r18, 0x2E	; 46
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	f9 01       	movw	r30, r18
    38c2:	20 81       	ld	r18, Z
    38c4:	2e 7f       	andi	r18, 0xFE	; 254
    38c6:	fc 01       	movw	r30, r24
    38c8:	20 83       	st	Z, r18
	HAL_GPIO_hbLED_clr();
	HAL_GPIO_statusLED_out();
	HAL_GPIO_statusLED_clr();
	HAL_GPIO_sendStatusLED_out();
	HAL_GPIO_sendStatusLED_clr();
	InitADC();
    38ca:	0e 94 b2 00 	call	0x164	; 0x164 <InitADC>
#else
#endif
	HAL_GPIO_PIN(leftBttn, E, 6)
    38ce:	8d e2       	ldi	r24, 0x2D	; 45
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	2d e2       	ldi	r18, 0x2D	; 45
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	f9 01       	movw	r30, r18
    38d8:	20 81       	ld	r18, Z
    38da:	2f 7b       	andi	r18, 0xBF	; 191
    38dc:	fc 01       	movw	r30, r24
    38de:	20 83       	st	Z, r18
    38e0:	8e e2       	ldi	r24, 0x2E	; 46
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	2e e2       	ldi	r18, 0x2E	; 46
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	f9 01       	movw	r30, r18
    38ea:	20 81       	ld	r18, Z
    38ec:	2f 7b       	andi	r18, 0xBF	; 191
    38ee:	fc 01       	movw	r30, r24
    38f0:	20 83       	st	Z, r18
    38f2:	8e e2       	ldi	r24, 0x2E	; 46
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	2e e2       	ldi	r18, 0x2E	; 46
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	f9 01       	movw	r30, r18
    38fc:	20 81       	ld	r18, Z
    38fe:	20 64       	ori	r18, 0x40	; 64
    3900:	fc 01       	movw	r30, r24
    3902:	20 83       	st	Z, r18
	HAL_GPIO_PIN(rightBttn, E, 7)
    3904:	8d e2       	ldi	r24, 0x2D	; 45
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	2d e2       	ldi	r18, 0x2D	; 45
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	f9 01       	movw	r30, r18
    390e:	20 81       	ld	r18, Z
    3910:	2f 77       	andi	r18, 0x7F	; 127
    3912:	fc 01       	movw	r30, r24
    3914:	20 83       	st	Z, r18
    3916:	8e e2       	ldi	r24, 0x2E	; 46
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	2e e2       	ldi	r18, 0x2E	; 46
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	f9 01       	movw	r30, r18
    3920:	20 81       	ld	r18, Z
    3922:	2f 77       	andi	r18, 0x7F	; 127
    3924:	fc 01       	movw	r30, r24
    3926:	20 83       	st	Z, r18
    3928:	8e e2       	ldi	r24, 0x2E	; 46
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	2e e2       	ldi	r18, 0x2E	; 46
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	f9 01       	movw	r30, r18
    3932:	20 81       	ld	r18, Z
    3934:	20 68       	ori	r18, 0x80	; 128
    3936:	fc 01       	movw	r30, r24
    3938:	20 83       	st	Z, r18
	HAL_GPIO_PIN(potPullup, F, 3)
    393a:	80 e3       	ldi	r24, 0x30	; 48
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	20 e3       	ldi	r18, 0x30	; 48
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	f9 01       	movw	r30, r18
    3944:	20 81       	ld	r18, Z
    3946:	28 60       	ori	r18, 0x08	; 8
    3948:	fc 01       	movw	r30, r24
    394a:	20 83       	st	Z, r18
    394c:	81 e3       	ldi	r24, 0x31	; 49
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	21 e3       	ldi	r18, 0x31	; 49
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	f9 01       	movw	r30, r18
    3956:	20 81       	ld	r18, Z
    3958:	28 60       	ori	r18, 0x08	; 8
    395a:	fc 01       	movw	r30, r24
    395c:	20 83       	st	Z, r18
	HAL_GPIO_leftBttn_pullup();
	HAL_GPIO_rightBttn_in();
	HAL_GPIO_rightBttn_pullup();
	HAL_GPIO_potPullup_out();
	HAL_GPIO_potPullup_set();
	currentLEDmode = LED_MODE_IDLE;
    395e:	10 92 f5 07 	sts	0x07F5, r1
	redADC = 127;
    3962:	8f e7       	ldi	r24, 0x7F	; 127
    3964:	80 93 0a 08 	sts	0x080A, r24
	grnADC = 127;
    3968:	8f e7       	ldi	r24, 0x7F	; 127
    396a:	80 93 0b 08 	sts	0x080B, r24
	bluADC = 127;
    396e:	8f e7       	ldi	r24, 0x7F	; 127
    3970:	80 93 0c 08 	sts	0x080C, r24
	demoCounter = 0;
    3974:	10 92 f6 07 	sts	0x07F6, r1

// This is the initial value for the destination address for commands (for testing)
	targetAddr = BROADCAST_ADDR;
    3978:	8f ef       	ldi	r24, 0xFF	; 255
    397a:	9f ef       	ldi	r25, 0xFF	; 255
    397c:	90 93 14 08 	sts	0x0814, r25
    3980:	80 93 13 08 	sts	0x0813, r24
// Initialize counter(s)
	mainLoopBlink = 0;
    3984:	10 92 12 08 	sts	0x0812, r1
    3988:	10 92 11 08 	sts	0x0811, r1
		if (chanEnergy[bestChannel] > chanEnergy[currentChannel])
		bestChannel = currentChannel;
	}
	PHY_SetChannel(bestChannel);
*/
}
    398c:	df 91       	pop	r29
    398e:	cf 91       	pop	r28
    3990:	08 95       	ret

00003992 <APP_TaskHandler>:
/*****************************************************************************
	Task Handler - does whatever needs to be done on a regular basis as fast as possible
*****************************************************************************/
static void APP_TaskHandler(void)
{
    3992:	cf 93       	push	r28
    3994:	df 93       	push	r29
    3996:	cd b7       	in	r28, 0x3d	; 61
    3998:	de b7       	in	r29, 0x3e	; 62
//	appState implements a state machine
//	As the app state changes (possibly via callback functions) there may be
//	things that need to be done here.
    switch (appState)
    399a:	80 91 e5 06 	lds	r24, 0x06E5
    399e:	88 2f       	mov	r24, r24
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	00 97       	sbiw	r24, 0x00	; 0
    39a4:	21 f0       	breq	.+8      	; 0x39ae <APP_TaskHandler+0x1c>
    39a6:	81 30       	cpi	r24, 0x01	; 1
    39a8:	91 05       	cpc	r25, r1
    39aa:	49 f0       	breq	.+18     	; 0x39be <APP_TaskHandler+0x2c>
    39ac:	06 c0       	rjmp	.+12     	; 0x39ba <APP_TaskHandler+0x28>
	{
		case APP_STATE_INITIAL:
		{
			appInit();
    39ae:	0e 94 a6 1b 	call	0x374c	; 0x374c <appInit>
			appState = APP_STATE_IDLE;
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	80 93 e5 06 	sts	0x06E5, r24
		} break;
    39b8:	03 c0       	rjmp	.+6      	; 0x39c0 <APP_TaskHandler+0x2e>

		case APP_STATE_IDLE:
		break;

		default:
		break;
    39ba:	00 00       	nop
    39bc:	01 c0       	rjmp	.+2      	; 0x39c0 <APP_TaskHandler+0x2e>
			appInit();
			appState = APP_STATE_IDLE;
		} break;

		case APP_STATE_IDLE:
		break;
    39be:	00 00       	nop

		default:
		break;
	}
}
    39c0:	df 91       	pop	r29
    39c2:	cf 91       	pop	r28
    39c4:	08 95       	ret

000039c6 <main>:

/*****************************************************************************
	Main Program - main loop that executes non-time-critical things
*****************************************************************************/
int main(void)
{
    39c6:	cf 93       	push	r28
    39c8:	df 93       	push	r29
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
// Initialize the system and network function infrastructure
  SYS_Init();
    39ce:	0e 94 5f 15 	call	0x2abe	; 0x2abe <SYS_Init>
    39d2:	01 c0       	rjmp	.+2      	; 0x39d6 <main+0x10>
	mainLoopBlink++;
	if (mainLoopBlink > 25000) {
		mainLoopBlink = 0;
		HAL_GPIO_hbLED_toggle();
	}
  }
    39d4:	00 00       	nop
// Then loops indefinitely, alternating between processing system tasks and app tasks
  while (1)
  {
// Execute all of the pending system and network stacks that make everything else work
// Note that this is where callbacks will be executed!
    SYS_TaskHandler();
    39d6:	0e 94 6e 15 	call	0x2adc	; 0x2adc <SYS_TaskHandler>
// Go do whatever the app state machine says is needed, if anything
// There may be nothing to do here if periodic timer handlers and callbacks can
// accomplish everything in an as-needed manner without polling.
    APP_TaskHandler();
    39da:	0e 94 c9 1c 	call	0x3992	; 0x3992 <APP_TaskHandler>
// This is just the heartbeat LED output that visually tells the observer that
// the application loop is running and also gives an indication of the loop execution
// time.  Each time the LED changes state, 25,000 loops have been executed.  For each on-off
// combination, that's 50,000 loops.
	mainLoopBlink++;
    39de:	80 91 11 08 	lds	r24, 0x0811
    39e2:	90 91 12 08 	lds	r25, 0x0812
    39e6:	01 96       	adiw	r24, 0x01	; 1
    39e8:	90 93 12 08 	sts	0x0812, r25
    39ec:	80 93 11 08 	sts	0x0811, r24
	if (mainLoopBlink > 25000) {
    39f0:	80 91 11 08 	lds	r24, 0x0811
    39f4:	90 91 12 08 	lds	r25, 0x0812
    39f8:	21 e6       	ldi	r18, 0x61	; 97
    39fa:	89 3a       	cpi	r24, 0xA9	; 169
    39fc:	92 07       	cpc	r25, r18
    39fe:	50 f3       	brcs	.-44     	; 0x39d4 <main+0xe>
		mainLoopBlink = 0;
    3a00:	10 92 12 08 	sts	0x0812, r1
    3a04:	10 92 11 08 	sts	0x0811, r1
#if BOARD_VERSION == 1
	HAL_GPIO_PIN(hbLED, E, 0)
	HAL_GPIO_PIN(statusLED, E, 1)
	HAL_GPIO_PIN(sendStatusLED, E, 2)
#elif BOARD_VERSION == 2
	HAL_GPIO_PIN(hbLED, G, 0)
    3a08:	84 e3       	ldi	r24, 0x34	; 52
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	24 e3       	ldi	r18, 0x34	; 52
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	f9 01       	movw	r30, r18
    3a12:	30 81       	ld	r19, Z
    3a14:	21 e0       	ldi	r18, 0x01	; 1
    3a16:	23 27       	eor	r18, r19
    3a18:	fc 01       	movw	r30, r24
    3a1a:	20 83       	st	Z, r18
		HAL_GPIO_hbLED_toggle();
	}
  }
    3a1c:	db cf       	rjmp	.-74     	; 0x39d4 <main+0xe>

00003a1e <__mulsi3>:
    3a1e:	62 9f       	mul	r22, r18
    3a20:	d0 01       	movw	r26, r0
    3a22:	73 9f       	mul	r23, r19
    3a24:	f0 01       	movw	r30, r0
    3a26:	82 9f       	mul	r24, r18
    3a28:	e0 0d       	add	r30, r0
    3a2a:	f1 1d       	adc	r31, r1
    3a2c:	64 9f       	mul	r22, r20
    3a2e:	e0 0d       	add	r30, r0
    3a30:	f1 1d       	adc	r31, r1
    3a32:	92 9f       	mul	r25, r18
    3a34:	f0 0d       	add	r31, r0
    3a36:	83 9f       	mul	r24, r19
    3a38:	f0 0d       	add	r31, r0
    3a3a:	74 9f       	mul	r23, r20
    3a3c:	f0 0d       	add	r31, r0
    3a3e:	65 9f       	mul	r22, r21
    3a40:	f0 0d       	add	r31, r0
    3a42:	99 27       	eor	r25, r25
    3a44:	72 9f       	mul	r23, r18
    3a46:	b0 0d       	add	r27, r0
    3a48:	e1 1d       	adc	r30, r1
    3a4a:	f9 1f       	adc	r31, r25
    3a4c:	63 9f       	mul	r22, r19
    3a4e:	b0 0d       	add	r27, r0
    3a50:	e1 1d       	adc	r30, r1
    3a52:	f9 1f       	adc	r31, r25
    3a54:	bd 01       	movw	r22, r26
    3a56:	cf 01       	movw	r24, r30
    3a58:	11 24       	eor	r1, r1
    3a5a:	08 95       	ret

00003a5c <memcpy>:
    3a5c:	fb 01       	movw	r30, r22
    3a5e:	dc 01       	movw	r26, r24
    3a60:	02 c0       	rjmp	.+4      	; 0x3a66 <memcpy+0xa>
    3a62:	01 90       	ld	r0, Z+
    3a64:	0d 92       	st	X+, r0
    3a66:	41 50       	subi	r20, 0x01	; 1
    3a68:	50 40       	sbci	r21, 0x00	; 0
    3a6a:	d8 f7       	brcc	.-10     	; 0x3a62 <memcpy+0x6>
    3a6c:	08 95       	ret

00003a6e <_exit>:
    3a6e:	f8 94       	cli

00003a70 <__stop_program>:
    3a70:	ff cf       	rjmp	.-2      	; 0x3a70 <__stop_program>
