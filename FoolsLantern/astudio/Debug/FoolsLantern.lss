
FoolsLantern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00003d2c  00003de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d2c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000945  00800206  00800206  00003de6  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00003de6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000009fc  00000000  00000000  00003de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000274  00000000  00000000  000047e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000650  00000000  00000000  00004a58  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000050ff  00000000  00000000  000050a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000145a  00000000  00000000  0000a1a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004d8d  00000000  00000000  0000b601  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000105c  00000000  00000000  00010390  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001c6e  00000000  00000000  000113ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002113  00000000  00000000  0001305a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 001207e6  00000000  00000000  0001516d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000418  00000000  00000000  00135953  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	operation of this function, so interrupts are left on, if they are already enabled.
		
*/

outPortE:
			ldi		r18,0xFF
       0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
			out		0x0D,r18
			out		0x0E,r24
       4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
       8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
       c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      34:	0c 94 a8 03 	jmp	0x750	; 0x750 <__vector_13>
      38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      54:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      58:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      60:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      64:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      68:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      6c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      70:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      74:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      78:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      7c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      80:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      84:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      88:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      8c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      90:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__vector_36>
      94:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_37>
      98:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      9c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      a0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      a4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      a8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_42>
      ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_43>
      b0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      b4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      b8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      bc:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      c0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      c4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      c8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      cc:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      d0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      d4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      d8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      dc:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      e0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      e4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      e8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      ec:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      f0:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__vector_60>
      f4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      f8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      fc:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_63>
     100:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
     104:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
     108:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
     10c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
     110:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
     114:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
     118:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
     11c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d1 e4       	ldi	r29, 0x41	; 65
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	12 e0       	ldi	r17, 0x02	; 2
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b2 e0       	ldi	r27, 0x02	; 2
     132:	ec e2       	ldi	r30, 0x2C	; 44
     134:	fd e3       	ldi	r31, 0x3D	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0b bf       	out	0x3b, r16	; 59
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x14>
     13c:	07 90       	elpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	a6 30       	cpi	r26, 0x06	; 6
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0x10>
     146:	1b be       	out	0x3b, r1	; 59

00000148 <__do_clear_bss>:
     148:	1b e0       	ldi	r17, 0x0B	; 11
     14a:	a6 e0       	ldi	r26, 0x06	; 6
     14c:	b2 e0       	ldi	r27, 0x02	; 2
     14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
     150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
     152:	ab 34       	cpi	r26, 0x4B	; 75
     154:	b1 07       	cpc	r27, r17
     156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>
     158:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <main>
     15c:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <_exit>

00000160 <__bad_interrupt>:
     160:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000164 <updateLEDs>:
#define PD4 4
#else
#endif

updateLEDs:			// Preamble to  load parameters, save state, and prevent interrupts
			mov		r30, r24				// Get the pointer to the array of bytes
     164:	e8 2f       	mov	r30, r24
			mov		r31, r25				// Put it into the Z register (R30/R31)
     166:	f9 2f       	mov	r31, r25
			mov		r26, r22				// Load the outer loop counter
     168:	a6 2f       	mov	r26, r22
			mov		r27, r23				// Load the outer loop counter
     16a:	b7 2f       	mov	r27, r23
			adiw 	r26, 1					// Add one to outer loop count so last bit goes out
     16c:	11 96       	adiw	r26, 0x01	; 1

			in 		r18, 0x3F				// Save status register
     16e:	2f b7       	in	r18, 0x3f	; 63
			cli								// Turn off interrupts
     170:	f8 94       	cli
//			sbi		0x0e,7
			ld		r19, Z+					// Get the first byte and increment the array pointer
     172:	31 91       	ld	r19, Z+

00000174 <ByteLoop>:
/**************************************************************************************/
ByteLoop:
			ldi 	r20, 8					//1 Load/reload bit count
     174:	48 e0       	ldi	r20, 0x08	; 8

00000176 <BitLoop>:
/* Loop over 8 bits */
BitLoop:
			sbi  	PORTD,PD4				//2 Output high; does not occur until end of instruction
     176:	73 9a       	sbi	0x0e, 3	; 14
			nop								//1 62.5 nS delay
     178:	00 00       	nop
			sbrc 	r19, 7					//1/2 Check if upper bit is 0 or 1
     17a:	37 fd       	sbrc	r19, 7
			rjmp 	Bit1					//2 For 1, this branch is taken (not skipped)
     17c:	01 c0       	rjmp	.+2      	; 0x180 <Bit1>
			cbi  	PORTD,PD4				//2 For 0, the previous branch is skipped and this is done
     17e:	73 98       	cbi	0x0e, 3	; 14

00000180 <Bit1>:
Bit1:										// (For 1, the output is cleared later)
			sbrc 	r19, 7					//1/2 Check if upper bit is 0 or 1
     180:	37 fd       	sbrc	r19, 7
			rjmp 	Here					//2 For 1, this adds an instruction cycle
     182:	00 c0       	rjmp	.+0      	; 0x184 <Here>

00000184 <Here>:
Here:
			nop								//1 62.5 nS delay
     184:	00 00       	nop
			sbiw 	r26, 1					//2 Decrement outer loop counter
     186:	11 97       	sbiw	r26, 0x01	; 1
			breq 	Exit					//1/2 exit outer loop if zero
     188:	41 f0       	breq	.+16     	; 0x19a <Exit>
			adiw 	r26, 1					//2 Bump outer loop counter back up
     18a:	11 96       	adiw	r26, 0x01	; 1
			lsl 	r19						//1 Move next bit in
     18c:	33 0f       	add	r19, r19
			dec 	r20						//1 Decrement inner loop counter
     18e:	4a 95       	dec	r20
			cbi 	PORTD,PD4				//2 Clear output to low
     190:	73 98       	cbi	0x0e, 3	; 14
			brne 	BitLoop					//1/2 Send next bit
     192:	89 f7       	brne	.-30     	; 0x176 <BitLoop>
			ld 		r19, Z+					//2 load in next byte
     194:	31 91       	ld	r19, Z+
			sbiw 	r26, 1					//2 Decrement outer loop counter
     196:	11 97       	sbiw	r26, 0x01	; 1
			rjmp 	ByteLoop				//2 Restart loop with new byte
     198:	ed cf       	rjmp	.-38     	; 0x174 <ByteLoop>

0000019a <Exit>:
/**************************************************************************************/
Exit:
			nop								//1 62.5 nS delay
     19a:	00 00       	nop
			cbi 	PORTD,PD4				// Make sure output is low
     19c:	73 98       	cbi	0x0e, 3	; 14
			out 	0x3F, r18				// Restore the status register
     19e:	2f bf       	out	0x3f, r18	; 63
//			cbi		0x0e,7
			sei								// Turn interrupts back on
     1a0:	78 94       	sei
     1a2:	08 95       	ret

000001a4 <HAL_Init>:
#include "halTimer.h"

/*****************************************************************************
*****************************************************************************/
void HAL_Init(void)
{
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
  MCUSR = 0;
     1ac:	84 e5       	ldi	r24, 0x54	; 84
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	fc 01       	movw	r30, r24
     1b2:	10 82       	st	Z, r1
  wdt_disable();
     1b4:	88 e1       	ldi	r24, 0x18	; 24
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	80 93 60 00 	sts	0x0060, r24
     1be:	10 92 60 00 	sts	0x0060, r1
     1c2:	0f be       	out	0x3f, r0	; 63
  SYS_EnableInterrupts();
     1c4:	78 94       	sei

  HAL_TimerInit();
     1c6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <HAL_TimerInit>
}
     1ca:	df 91       	pop	r29
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <HAL_TimerInit>:
static volatile uint8_t halTimerDelayInt;

/*****************************************************************************
*****************************************************************************/
void HAL_TimerInit(void)
{
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
  halTimerIrqCount = 0;
     1d8:	10 92 3c 0b 	sts	0x0B3C, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
     1dc:	88 ea       	ldi	r24, 0xA8	; 168
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	20 e2       	ldi	r18, 0x20	; 32
     1e2:	3e e4       	ldi	r19, 0x4E	; 78
     1e4:	fc 01       	movw	r30, r24
     1e6:	31 83       	std	Z+1, r19	; 0x01
     1e8:	20 83       	st	Z, r18
  TCCR4B = (1 << WGM12);              // CTC mode
     1ea:	81 ea       	ldi	r24, 0xA1	; 161
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	28 e0       	ldi	r18, 0x08	; 8
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 83       	st	Z, r18
  TCCR4B |= (1 << CS11);              // Prescaler 8
     1f4:	81 ea       	ldi	r24, 0xA1	; 161
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	21 ea       	ldi	r18, 0xA1	; 161
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	f9 01       	movw	r30, r18
     1fe:	20 81       	ld	r18, Z
     200:	22 60       	ori	r18, 0x02	; 2
     202:	fc 01       	movw	r30, r24
     204:	20 83       	st	Z, r18
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
     206:	82 e7       	ldi	r24, 0x72	; 114
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	22 e7       	ldi	r18, 0x72	; 114
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	f9 01       	movw	r30, r18
     210:	20 81       	ld	r18, Z
     212:	22 60       	ori	r18, 0x02	; 2
     214:	fc 01       	movw	r30, r24
     216:	20 83       	st	Z, r18
}
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <__vector_42>:
}

/*****************************************************************************
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     21e:	1f 92       	push	r1
     220:	0f 92       	push	r0
     222:	0f b6       	in	r0, 0x3f	; 63
     224:	0f 92       	push	r0
     226:	11 24       	eor	r1, r1
     228:	8f 93       	push	r24
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
  halTimerIrqCount++;
     232:	80 91 3c 0b 	lds	r24, 0x0B3C
     236:	8f 5f       	subi	r24, 0xFF	; 255
     238:	80 93 3c 0b 	sts	0x0B3C, r24
}
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	8f 91       	pop	r24
     242:	0f 90       	pop	r0
     244:	0f be       	out	0x3f, r0	; 63
     246:	0f 90       	pop	r0
     248:	1f 90       	pop	r1
     24a:	18 95       	reti

0000024c <__vector_43>:

/*****************************************************************************
*****************************************************************************/
ISR(TIMER4_COMPB_vect)
{
     24c:	1f 92       	push	r1
     24e:	0f 92       	push	r0
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	0f 92       	push	r0
     254:	11 24       	eor	r1, r1
     256:	8f 93       	push	r24
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
  halTimerDelayInt = 1;
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	80 93 06 02 	sts	0x0206, r24
}
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	8f 91       	pop	r24
     26c:	0f 90       	pop	r0
     26e:	0f be       	out	0x3f, r0	; 63
     270:	0f 90       	pop	r0
     272:	1f 90       	pop	r1
     274:	18 95       	reti

00000276 <PHY_Init>:
static uint8_t              phyRxBuffer[128];

/*****************************************************************************
*****************************************************************************/
void PHY_Init(void)
{
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
  TRXPR_REG_s.trxrst = 1;
     27e:	89 e3       	ldi	r24, 0x39	; 57
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	fc 01       	movw	r30, r24
     284:	20 81       	ld	r18, Z
     286:	21 60       	ori	r18, 0x01	; 1
     288:	fc 01       	movw	r30, r24
     28a:	20 83       	st	Z, r18

  phyTrxSetState(TRX_CMD_TRX_OFF);
     28c:	88 e0       	ldi	r24, 0x08	; 8
     28e:	0e 94 0a 03 	call	0x614	; 0x614 <phyTrxSetState>

  CSMA_SEED_1_REG_s.aackSetPd = 1;
     292:	8e e6       	ldi	r24, 0x6E	; 110
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	fc 01       	movw	r30, r24
     298:	20 81       	ld	r18, Z
     29a:	20 62       	ori	r18, 0x20	; 32
     29c:	fc 01       	movw	r30, r24
     29e:	20 83       	st	Z, r18
  CSMA_SEED_1_REG_s.aackDisAck = 0;
     2a0:	8e e6       	ldi	r24, 0x6E	; 110
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 81       	ld	r18, Z
     2a8:	2f 7e       	andi	r18, 0xEF	; 239
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18

  IRQ_STATUS_REG = IRQ_STATUS_CLEAR_VALUE;
     2ae:	8f e4       	ldi	r24, 0x4F	; 79
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	2f ef       	ldi	r18, 0xFF	; 255
     2b4:	fc 01       	movw	r30, r24
     2b6:	20 83       	st	Z, r18
  IRQ_MASK_REG_s.rxEndEn = 1;
     2b8:	8e e4       	ldi	r24, 0x4E	; 78
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	fc 01       	movw	r30, r24
     2be:	20 81       	ld	r18, Z
     2c0:	28 60       	ori	r18, 0x08	; 8
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
  IRQ_MASK_REG_s.txEndEn = 1;
     2c6:	8e e4       	ldi	r24, 0x4E	; 78
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	fc 01       	movw	r30, r24
     2cc:	20 81       	ld	r18, Z
     2ce:	20 64       	ori	r18, 0x40	; 64
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 83       	st	Z, r18

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
     2d4:	8c e4       	ldi	r24, 0x4C	; 76
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	fc 01       	movw	r30, r24
     2da:	20 81       	ld	r18, Z
     2dc:	20 68       	ori	r18, 0x80	; 128
     2de:	fc 01       	movw	r30, r24
     2e0:	20 83       	st	Z, r18

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = (uint8_t)phyGetRandomNumber();
#else
  CSMA_SEED_0_REG = 0x11;
     2e2:	8d e6       	ldi	r24, 0x6D	; 109
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	21 e1       	ldi	r18, 0x11	; 17
     2e8:	fc 01       	movw	r30, r24
     2ea:	20 83       	st	Z, r18
#endif

  phyIb.request = PHY_REQ_NONE;
     2ec:	10 92 07 02 	sts	0x0207, r1
  phyIb.rx = false;
     2f0:	10 92 0d 02 	sts	0x020D, r1
  phyState = PHY_STATE_IDLE;
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	80 93 0e 02 	sts	0x020E, r24
}
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <PHY_SetRxState>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	0f 92       	push	r0
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	89 83       	std	Y+1, r24	; 0x01
  phyIb.request |= PHY_REQ_RX;
     30c:	80 91 07 02 	lds	r24, 0x0207
     310:	88 60       	ori	r24, 0x08	; 8
     312:	80 93 07 02 	sts	0x0207, r24
  phyIb.rx = rx;
     316:	89 81       	ldd	r24, Y+1	; 0x01
     318:	80 93 0d 02 	sts	0x020D, r24
}
     31c:	0f 90       	pop	r0
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <PHY_SetChannel>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	0f 92       	push	r0
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	89 83       	std	Y+1, r24	; 0x01
  phyIb.request |= PHY_REQ_CHANNEL;
     330:	80 91 07 02 	lds	r24, 0x0207
     334:	81 60       	ori	r24, 0x01	; 1
     336:	80 93 07 02 	sts	0x0207, r24
  phyIb.channel = channel;
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	80 93 08 02 	sts	0x0208, r24
}
     340:	0f 90       	pop	r0
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <PHY_SetPanId>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	00 d0       	rcall	.+0      	; 0x34e <PHY_SetPanId+0x6>
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	9a 83       	std	Y+2, r25	; 0x02
     354:	89 83       	std	Y+1, r24	; 0x01
  phyIb.request |= PHY_REQ_PANID;
     356:	80 91 07 02 	lds	r24, 0x0207
     35a:	82 60       	ori	r24, 0x02	; 2
     35c:	80 93 07 02 	sts	0x0207, r24
  phyIb.panId = panId;
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	9a 81       	ldd	r25, Y+2	; 0x02
     364:	90 93 0a 02 	sts	0x020A, r25
     368:	80 93 09 02 	sts	0x0209, r24
}
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	08 95       	ret

00000376 <PHY_SetShortAddr>:

/*****************************************************************************
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	00 d0       	rcall	.+0      	; 0x37c <PHY_SetShortAddr+0x6>
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	9a 83       	std	Y+2, r25	; 0x02
     382:	89 83       	std	Y+1, r24	; 0x01
  phyIb.request |= PHY_REQ_ADDR;
     384:	80 91 07 02 	lds	r24, 0x0207
     388:	84 60       	ori	r24, 0x04	; 4
     38a:	80 93 07 02 	sts	0x0207, r24
  phyIb.addr = addr;
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	9a 81       	ldd	r25, Y+2	; 0x02
     392:	90 93 0c 02 	sts	0x020C, r25
     396:	80 93 0b 02 	sts	0x020B, r24
}
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	08 95       	ret

000003a4 <PHY_Busy>:

/*****************************************************************************
*****************************************************************************/
bool PHY_Busy(void)
{
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
  return PHY_STATE_IDLE != phyState || PHY_REQ_NONE != phyIb.request;
     3ac:	80 91 0e 02 	lds	r24, 0x020E
     3b0:	81 30       	cpi	r24, 0x01	; 1
     3b2:	21 f4       	brne	.+8      	; 0x3bc <PHY_Busy+0x18>
     3b4:	80 91 07 02 	lds	r24, 0x0207
     3b8:	88 23       	and	r24, r24
     3ba:	19 f0       	breq	.+6      	; 0x3c2 <PHY_Busy+0x1e>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <PHY_Busy+0x22>
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
}
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <PHY_DataReq>:

/*****************************************************************************
	Starts the transmission of a frame
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	00 d0       	rcall	.+0      	; 0x3d2 <PHY_DataReq+0x6>
     3d2:	00 d0       	rcall	.+0      	; 0x3d4 <PHY_DataReq+0x8>
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	9b 83       	std	Y+3, r25	; 0x03
     3da:	8a 83       	std	Y+2, r24	; 0x02
     3dc:	6c 83       	std	Y+4, r22	; 0x04
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
     3de:	89 e1       	ldi	r24, 0x19	; 25
     3e0:	0e 94 0a 03 	call	0x614	; 0x614 <phyTrxSetState>

  TRX_FRAME_BUFFER(0) = size + 2/*crc*/;
     3e4:	80 e8       	ldi	r24, 0x80	; 128
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	2c 81       	ldd	r18, Y+4	; 0x04
     3ea:	2e 5f       	subi	r18, 0xFE	; 254
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
  for (uint8_t i = 0; i < size; i++)
     3f0:	19 82       	std	Y+1, r1	; 0x01
     3f2:	13 c0       	rjmp	.+38     	; 0x41a <PHY_DataReq+0x4e>
    TRX_FRAME_BUFFER(i+1) = data[i];
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	88 2f       	mov	r24, r24
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	8f 57       	subi	r24, 0x7F	; 127
     3fc:	9e 4f       	sbci	r25, 0xFE	; 254
     3fe:	29 81       	ldd	r18, Y+1	; 0x01
     400:	22 2f       	mov	r18, r18
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	4a 81       	ldd	r20, Y+2	; 0x02
     406:	5b 81       	ldd	r21, Y+3	; 0x03
     408:	24 0f       	add	r18, r20
     40a:	35 1f       	adc	r19, r21
     40c:	f9 01       	movw	r30, r18
     40e:	20 81       	ld	r18, Z
     410:	fc 01       	movw	r30, r24
     412:	20 83       	st	Z, r18
void PHY_DataReq(uint8_t *data, uint8_t size)
{
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  TRX_FRAME_BUFFER(0) = size + 2/*crc*/;
  for (uint8_t i = 0; i < size; i++)
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	8f 5f       	subi	r24, 0xFF	; 255
     418:	89 83       	std	Y+1, r24	; 0x01
     41a:	99 81       	ldd	r25, Y+1	; 0x01
     41c:	8c 81       	ldd	r24, Y+4	; 0x04
     41e:	98 17       	cp	r25, r24
     420:	48 f3       	brcs	.-46     	; 0x3f4 <PHY_DataReq+0x28>
    TRX_FRAME_BUFFER(i+1) = data[i];

  TRX_STATE_REG = TRX_CMD_TX_START;			// Start the TX_ARET transaction
     422:	82 e4       	ldi	r24, 0x42	; 66
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	22 e0       	ldi	r18, 0x02	; 2
     428:	fc 01       	movw	r30, r24
     42a:	20 83       	st	Z, r18

  phyState = PHY_STATE_TX_WAIT_END;
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	80 93 0e 02 	sts	0x020E, r24
}
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <__vector_63>:
#endif

/*****************************************************************************
*****************************************************************************/
ISR(TRX24_TX_END_vect)
{
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	00 90 5b 00 	lds	r0, 0x005B
     44c:	0f 92       	push	r0
     44e:	11 24       	eor	r1, r1
     450:	2f 93       	push	r18
     452:	3f 93       	push	r19
     454:	4f 93       	push	r20
     456:	5f 93       	push	r21
     458:	6f 93       	push	r22
     45a:	7f 93       	push	r23
     45c:	8f 93       	push	r24
     45e:	9f 93       	push	r25
     460:	af 93       	push	r26
     462:	bf 93       	push	r27
     464:	ef 93       	push	r30
     466:	ff 93       	push	r31
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
  if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
     470:	81 e4       	ldi	r24, 0x41	; 65
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	fc 01       	movw	r30, r24
     476:	80 81       	ld	r24, Z
     478:	8f 71       	andi	r24, 0x1F	; 31
     47a:	89 31       	cpi	r24, 0x19	; 25
     47c:	79 f4       	brne	.+30     	; 0x49c <__vector_63+0x5c>
  {
    //TRX_STATE_REG = TRX_CMD_PLL_ON; // Don't wait for this to complete
    phyTrxSetState(TRX_CMD_PLL_ON);
     47e:	89 e0       	ldi	r24, 0x09	; 9
     480:	0e 94 0a 03 	call	0x614	; 0x614 <phyTrxSetState>

    phyState = PHY_STATE_TX_CONFIRM;
     484:	84 e0       	ldi	r24, 0x04	; 4
     486:	80 93 0e 02 	sts	0x020E, r24
    phyTxStatus = TRX_STATE_REG_s.tracStatus;
     48a:	82 e4       	ldi	r24, 0x42	; 66
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	fc 01       	movw	r30, r24
     490:	80 81       	ld	r24, Z
     492:	82 95       	swap	r24
     494:	86 95       	lsr	r24
     496:	87 70       	andi	r24, 0x07	; 7
     498:	80 93 0f 02 	sts	0x020F, r24
  }
  else
  {
    // Auto ACK transmission completed
  }
}
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	ff 91       	pop	r31
     4a2:	ef 91       	pop	r30
     4a4:	bf 91       	pop	r27
     4a6:	af 91       	pop	r26
     4a8:	9f 91       	pop	r25
     4aa:	8f 91       	pop	r24
     4ac:	7f 91       	pop	r23
     4ae:	6f 91       	pop	r22
     4b0:	5f 91       	pop	r21
     4b2:	4f 91       	pop	r20
     4b4:	3f 91       	pop	r19
     4b6:	2f 91       	pop	r18
     4b8:	0f 90       	pop	r0
     4ba:	00 92 5b 00 	sts	0x005B, r0
     4be:	0f 90       	pop	r0
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	0f 90       	pop	r0
     4c4:	1f 90       	pop	r1
     4c6:	18 95       	reti

000004c8 <__vector_60>:

/*****************************************************************************
	Interrupt service routine for receipt of a frame at the radio
*****************************************************************************/
ISR(TRX24_RX_END_vect)
{
     4c8:	1f 92       	push	r1
     4ca:	0f 92       	push	r0
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	0f 92       	push	r0
     4d0:	00 90 5b 00 	lds	r0, 0x005B
     4d4:	0f 92       	push	r0
     4d6:	11 24       	eor	r1, r1
     4d8:	2f 93       	push	r18
     4da:	8f 93       	push	r24
     4dc:	9f 93       	push	r25
     4de:	ef 93       	push	r30
     4e0:	ff 93       	push	r31
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
  TRX_STATE_REG = TRX_CMD_PLL_ON;			// Don't wait for this to complete
     4ea:	82 e4       	ldi	r24, 0x42	; 66
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	29 e0       	ldi	r18, 0x09	; 9
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 83       	st	Z, r18
  phyRxRssi = (int8_t)PHY_ED_LEVEL_REG;		// 0-83dB, 0xFF means no measurement started
     4f4:	87 e4       	ldi	r24, 0x47	; 71
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	fc 01       	movw	r30, r24
     4fa:	80 81       	ld	r24, Z
     4fc:	80 93 10 02 	sts	0x0210, r24
  phyRxSize = TST_RX_LENGTH_REG;
     500:	8b e7       	ldi	r24, 0x7B	; 123
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	fc 01       	movw	r30, r24
     506:	80 81       	ld	r24, Z
     508:	80 93 11 02 	sts	0x0211, r24
  phyState = PHY_STATE_RX_IND;
     50c:	85 e0       	ldi	r24, 0x05	; 5
     50e:	80 93 0e 02 	sts	0x020E, r24
}
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	ff 91       	pop	r31
     518:	ef 91       	pop	r30
     51a:	9f 91       	pop	r25
     51c:	8f 91       	pop	r24
     51e:	2f 91       	pop	r18
     520:	0f 90       	pop	r0
     522:	00 92 5b 00 	sts	0x005B, r0
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti

00000530 <phySetRxState>:
/*****************************************************************************
	Put the radio into the waiting or receive state, depending upon the rx
	flag in the phyIb variable.
*****************************************************************************/
static void phySetRxState(void)
{
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
  if (phyIb.rx)
     538:	80 91 0d 02 	lds	r24, 0x020D
     53c:	88 23       	and	r24, r24
     53e:	21 f0       	breq	.+8      	; 0x548 <phySetRxState+0x18>
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
     540:	86 e1       	ldi	r24, 0x16	; 22
     542:	0e 94 0a 03 	call	0x614	; 0x614 <phyTrxSetState>
     546:	03 c0       	rjmp	.+6      	; 0x54e <phySetRxState+0x1e>
  else
    phyTrxSetState(TRX_CMD_TRX_OFF);
     548:	88 e0       	ldi	r24, 0x08	; 8
     54a:	0e 94 0a 03 	call	0x614	; 0x614 <phyTrxSetState>
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <phyHandleSetRequests>:
	Handles the accumulated requests to set various values and service
	requests that have accumulated since the last system tasks update.
	Each request corresponds to a bit in the request variable.
*****************************************************************************/
static void phyHandleSetRequests(void)
{
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	00 d0       	rcall	.+0      	; 0x55a <phyHandleSetRequests+0x6>
     55a:	00 d0       	rcall	.+0      	; 0x55c <phyHandleSetRequests+0x8>
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
// Put the radio in idle mode
  phyTrxSetState(TRX_CMD_TRX_OFF);
     560:	88 e0       	ldi	r24, 0x08	; 8
     562:	0e 94 0a 03 	call	0x614	; 0x614 <phyTrxSetState>

  if (phyIb.request & PHY_REQ_CHANNEL)
     566:	80 91 07 02 	lds	r24, 0x0207
     56a:	88 2f       	mov	r24, r24
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	81 70       	andi	r24, 0x01	; 1
     570:	90 70       	andi	r25, 0x00	; 0
     572:	88 23       	and	r24, r24
     574:	61 f0       	breq	.+24     	; 0x58e <phyHandleSetRequests+0x3a>
  {
    PHY_CC_CCA_REG_s.channel = phyIb.channel;
     576:	88 e4       	ldi	r24, 0x48	; 72
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	20 91 08 02 	lds	r18, 0x0208
     57e:	2f 71       	andi	r18, 0x1F	; 31
     580:	2f 71       	andi	r18, 0x1F	; 31
     582:	fc 01       	movw	r30, r24
     584:	30 81       	ld	r19, Z
     586:	30 7e       	andi	r19, 0xE0	; 224
     588:	23 2b       	or	r18, r19
     58a:	fc 01       	movw	r30, r24
     58c:	20 83       	st	Z, r18
  }

  if (phyIb.request & PHY_REQ_PANID)
     58e:	80 91 07 02 	lds	r24, 0x0207
     592:	88 2f       	mov	r24, r24
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	82 70       	andi	r24, 0x02	; 2
     598:	90 70       	andi	r25, 0x00	; 0
     59a:	00 97       	sbiw	r24, 0x00	; 0
     59c:	a1 f0       	breq	.+40     	; 0x5c6 <phyHandleSetRequests+0x72>
  {
    uint8_t *d = (uint8_t *)&phyIb.panId;
     59e:	89 e0       	ldi	r24, 0x09	; 9
     5a0:	92 e0       	ldi	r25, 0x02	; 2
     5a2:	9a 83       	std	Y+2, r25	; 0x02
     5a4:	89 83       	std	Y+1, r24	; 0x01
    PAN_ID_0_REG = d[0];
     5a6:	82 e6       	ldi	r24, 0x62	; 98
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	29 81       	ldd	r18, Y+1	; 0x01
     5ac:	3a 81       	ldd	r19, Y+2	; 0x02
     5ae:	f9 01       	movw	r30, r18
     5b0:	20 81       	ld	r18, Z
     5b2:	fc 01       	movw	r30, r24
     5b4:	20 83       	st	Z, r18
    PAN_ID_1_REG = d[1];
     5b6:	83 e6       	ldi	r24, 0x63	; 99
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	29 81       	ldd	r18, Y+1	; 0x01
     5bc:	3a 81       	ldd	r19, Y+2	; 0x02
     5be:	f9 01       	movw	r30, r18
     5c0:	21 81       	ldd	r18, Z+1	; 0x01
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 83       	st	Z, r18
  }

  if (phyIb.request & PHY_REQ_ADDR)
     5c6:	80 91 07 02 	lds	r24, 0x0207
     5ca:	88 2f       	mov	r24, r24
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	84 70       	andi	r24, 0x04	; 4
     5d0:	90 70       	andi	r25, 0x00	; 0
     5d2:	00 97       	sbiw	r24, 0x00	; 0
     5d4:	a1 f0       	breq	.+40     	; 0x5fe <phyHandleSetRequests+0xaa>
  {
    uint8_t *d = (uint8_t *)&phyIb.addr;
     5d6:	8b e0       	ldi	r24, 0x0B	; 11
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	9c 83       	std	Y+4, r25	; 0x04
     5dc:	8b 83       	std	Y+3, r24	; 0x03
    SHORT_ADDR_0_REG = d[0];
     5de:	80 e6       	ldi	r24, 0x60	; 96
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	2b 81       	ldd	r18, Y+3	; 0x03
     5e4:	3c 81       	ldd	r19, Y+4	; 0x04
     5e6:	f9 01       	movw	r30, r18
     5e8:	20 81       	ld	r18, Z
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 83       	st	Z, r18
    SHORT_ADDR_1_REG = d[1];
     5ee:	81 e6       	ldi	r24, 0x61	; 97
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	2b 81       	ldd	r18, Y+3	; 0x03
     5f4:	3c 81       	ldd	r19, Y+4	; 0x04
     5f6:	f9 01       	movw	r30, r18
     5f8:	21 81       	ldd	r18, Z+1	; 0x01
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 83       	st	Z, r18
// unless there is an energy detection request in progress.
#ifdef PHY_ENABLE_ENERGY_DETECTION	// Add in this feature if energy detection is desired
  if (!(phyIb.request & PHY_REQ_ED))
    phySetRxState();
#else	// No energy detection request in progress
  phySetRxState();
     5fe:	0e 94 98 02 	call	0x530	; 0x530 <phySetRxState>
#endif
// Clear the request flags
  phyIb.request = PHY_REQ_NONE;
     602:	10 92 07 02 	sts	0x0207, r1
}
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <phyTrxSetState>:

/*****************************************************************************
	Sets the radio to the state provided, then waits for the state to take effect
*****************************************************************************/
static inline void phyTrxSetState(uint8_t state)
{
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	0f 92       	push	r0
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	89 83       	std	Y+1, r24	; 0x01
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
     620:	82 e4       	ldi	r24, 0x42	; 66
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	23 e0       	ldi	r18, 0x03	; 3
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
  TRX_STATE_REG = state;
     62a:	82 e4       	ldi	r24, 0x42	; 66
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	29 81       	ldd	r18, Y+1	; 0x01
     630:	fc 01       	movw	r30, r24
     632:	20 83       	st	Z, r18
  while (state != TRX_STATUS_REG_s.trxStatus);
     634:	00 00       	nop
     636:	81 e4       	ldi	r24, 0x41	; 65
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	fc 01       	movw	r30, r24
     63c:	80 81       	ld	r24, Z
     63e:	8f 71       	andi	r24, 0x1F	; 31
     640:	98 2f       	mov	r25, r24
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	98 17       	cp	r25, r24
     646:	b9 f7       	brne	.-18     	; 0x636 <phyTrxSetState+0x22>
}
     648:	0f 90       	pop	r0
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <PHY_TaskHandler>:

/*****************************************************************************
*****************************************************************************/
void PHY_TaskHandler(void)
{
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	00 d0       	rcall	.+0      	; 0x656 <PHY_TaskHandler+0x6>
     656:	00 d0       	rcall	.+0      	; 0x658 <PHY_TaskHandler+0x8>
     658:	00 d0       	rcall	.+0      	; 0x65a <PHY_TaskHandler+0xa>
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
  switch (phyState)
     65e:	80 91 0e 02 	lds	r24, 0x020E
     662:	88 2f       	mov	r24, r24
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	84 30       	cpi	r24, 0x04	; 4
     668:	91 05       	cpc	r25, r1
     66a:	79 f0       	breq	.+30     	; 0x68a <PHY_TaskHandler+0x3a>
     66c:	85 30       	cpi	r24, 0x05	; 5
     66e:	91 05       	cpc	r25, r1
     670:	f1 f0       	breq	.+60     	; 0x6ae <PHY_TaskHandler+0x5e>
     672:	81 30       	cpi	r24, 0x01	; 1
     674:	91 05       	cpc	r25, r1
     676:	09 f0       	breq	.+2      	; 0x67a <PHY_TaskHandler+0x2a>
     678:	5f c0       	rjmp	.+190    	; 0x738 <PHY_TaskHandler+0xe8>
  {
//	If in the idle state, can process the accumulated requests
    case PHY_STATE_IDLE:
    {
      if (phyIb.request)
     67a:	80 91 07 02 	lds	r24, 0x0207
     67e:	88 23       	and	r24, r24
     680:	09 f4       	brne	.+2      	; 0x684 <PHY_TaskHandler+0x34>
     682:	5c c0       	rjmp	.+184    	; 0x73c <PHY_TaskHandler+0xec>
        phyHandleSetRequests();
     684:	0e 94 aa 02 	call	0x554	; 0x554 <phyHandleSetRequests>
    } break;
     688:	59 c0       	rjmp	.+178    	; 0x73c <PHY_TaskHandler+0xec>
//	Invoke the callback to notify the application
    case PHY_STATE_TX_CONFIRM:
    {
      PHY_DataConf(phyTxStatus);
     68a:	80 91 0f 02 	lds	r24, 0x020F
     68e:	0e 94 06 11 	call	0x220c	; 0x220c <PHY_DataConf>

      while (TRX_CMD_PLL_ON != TRX_STATUS_REG_s.trxStatus);
     692:	00 00       	nop
     694:	81 e4       	ldi	r24, 0x41	; 65
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	fc 01       	movw	r30, r24
     69a:	80 81       	ld	r24, Z
     69c:	8f 71       	andi	r24, 0x1F	; 31
     69e:	89 30       	cpi	r24, 0x09	; 9
     6a0:	c9 f7       	brne	.-14     	; 0x694 <PHY_TaskHandler+0x44>
      phyState = PHY_STATE_IDLE;
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	80 93 0e 02 	sts	0x020E, r24
      phySetRxState();
     6a8:	0e 94 98 02 	call	0x530	; 0x530 <phySetRxState>
    } break;
     6ac:	48 c0       	rjmp	.+144    	; 0x73e <PHY_TaskHandler+0xee>
//	Message was received, so transfer the radio buffer data and process it
    case PHY_STATE_RX_IND:
    {
      PHY_DataInd_t ind;

      for (uint8_t i = 0; i < phyRxSize + 1/*lqi*/; i++)
     6ae:	19 82       	std	Y+1, r1	; 0x01
     6b0:	11 c0       	rjmp	.+34     	; 0x6d4 <PHY_TaskHandler+0x84>
        phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	88 2f       	mov	r24, r24
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	29 81       	ldd	r18, Y+1	; 0x01
     6ba:	22 2f       	mov	r18, r18
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	20 58       	subi	r18, 0x80	; 128
     6c0:	3e 4f       	sbci	r19, 0xFE	; 254
     6c2:	f9 01       	movw	r30, r18
     6c4:	20 81       	ld	r18, Z
     6c6:	8e 5e       	subi	r24, 0xEE	; 238
     6c8:	9d 4f       	sbci	r25, 0xFD	; 253
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18
//	Message was received, so transfer the radio buffer data and process it
    case PHY_STATE_RX_IND:
    {
      PHY_DataInd_t ind;

      for (uint8_t i = 0; i < phyRxSize + 1/*lqi*/; i++)
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	8f 5f       	subi	r24, 0xFF	; 255
     6d2:	89 83       	std	Y+1, r24	; 0x01
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	28 2f       	mov	r18, r24
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	80 91 11 02 	lds	r24, 0x0211
     6de:	88 2f       	mov	r24, r24
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	28 17       	cp	r18, r24
     6e6:	39 07       	cpc	r19, r25
     6e8:	24 f3       	brlt	.-56     	; 0x6b2 <PHY_TaskHandler+0x62>
        phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

      ind.data = phyRxBuffer;
     6ea:	82 e1       	ldi	r24, 0x12	; 18
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	9b 83       	std	Y+3, r25	; 0x03
     6f0:	8a 83       	std	Y+2, r24	; 0x02
      ind.size = phyRxSize - 2/*crc*/;
     6f2:	80 91 11 02 	lds	r24, 0x0211
     6f6:	82 50       	subi	r24, 0x02	; 2
     6f8:	8c 83       	std	Y+4, r24	; 0x04
      ind.lqi  = phyRxBuffer[phyRxSize];
     6fa:	80 91 11 02 	lds	r24, 0x0211
     6fe:	88 2f       	mov	r24, r24
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	8e 5e       	subi	r24, 0xEE	; 238
     704:	9d 4f       	sbci	r25, 0xFD	; 253
     706:	fc 01       	movw	r30, r24
     708:	80 81       	ld	r24, Z
     70a:	8d 83       	std	Y+5, r24	; 0x05
      ind.rssi = phyRxRssi + PHY_RSSI_BASE_VAL;
     70c:	80 91 10 02 	lds	r24, 0x0210
     710:	8a 55       	subi	r24, 0x5A	; 90
     712:	8e 83       	std	Y+6, r24	; 0x06
      PHY_DataInd(&ind);
     714:	ce 01       	movw	r24, r28
     716:	02 96       	adiw	r24, 0x02	; 2
     718:	0e 94 c0 0a 	call	0x1580	; 0x1580 <PHY_DataInd>

      while (TRX_CMD_PLL_ON != TRX_STATUS_REG_s.trxStatus);
     71c:	00 00       	nop
     71e:	81 e4       	ldi	r24, 0x41	; 65
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	fc 01       	movw	r30, r24
     724:	80 81       	ld	r24, Z
     726:	8f 71       	andi	r24, 0x1F	; 31
     728:	89 30       	cpi	r24, 0x09	; 9
     72a:	c9 f7       	brne	.-14     	; 0x71e <PHY_TaskHandler+0xce>
      phyState = PHY_STATE_IDLE;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 0e 02 	sts	0x020E, r24
      phySetRxState();
     732:	0e 94 98 02 	call	0x530	; 0x530 <phySetRxState>
    } break;
     736:	03 c0       	rjmp	.+6      	; 0x73e <PHY_TaskHandler+0xee>
      phySetRxState();
    } break;
#endif

    default:
      break;
     738:	00 00       	nop
     73a:	01 c0       	rjmp	.+2      	; 0x73e <PHY_TaskHandler+0xee>
//	If in the idle state, can process the accumulated requests
    case PHY_STATE_IDLE:
    {
      if (phyIb.request)
        phyHandleSetRequests();
    } break;
     73c:	00 00       	nop
#endif

    default:
      break;
  }
}
     73e:	26 96       	adiw	r28, 0x06	; 6
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <__vector_13>:
}

/*****************************************************************************
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     750:	1f 92       	push	r1
     752:	0f 92       	push	r0
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	0f 92       	push	r0
     758:	11 24       	eor	r1, r1
     75a:	8f 93       	push	r24
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
  halSleepTimerEvent = true;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	80 93 92 02 	sts	0x0292, r24
}
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	8f 91       	pop	r24
     770:	0f 90       	pop	r0
     772:	0f be       	out	0x3f, r0	; 63
     774:	0f 90       	pop	r0
     776:	1f 90       	pop	r1
     778:	18 95       	reti

0000077a <__vector_37>:
}

/*****************************************************************************
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	00 90 5b 00 	lds	r0, 0x005B
     786:	0f 92       	push	r0
     788:	11 24       	eor	r1, r1
     78a:	2f 93       	push	r18
     78c:	3f 93       	push	r19
     78e:	8f 93       	push	r24
     790:	9f 93       	push	r25
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
  udrEmpty = true;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	80 93 9d 02 	sts	0x029D, r24
  UCSRxB &= ~(1 << UDRIE1);
     7a4:	89 ec       	ldi	r24, 0xC9	; 201
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	29 ec       	ldi	r18, 0xC9	; 201
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	f9 01       	movw	r30, r18
     7ae:	20 81       	ld	r18, Z
     7b0:	2f 7d       	andi	r18, 0xDF	; 223
     7b2:	fc 01       	movw	r30, r24
     7b4:	20 83       	st	Z, r18
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	ff 91       	pop	r31
     7bc:	ef 91       	pop	r30
     7be:	9f 91       	pop	r25
     7c0:	8f 91       	pop	r24
     7c2:	3f 91       	pop	r19
     7c4:	2f 91       	pop	r18
     7c6:	0f 90       	pop	r0
     7c8:	00 92 5b 00 	sts	0x005B, r0
     7cc:	0f 90       	pop	r0
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	0f 90       	pop	r0
     7d2:	1f 90       	pop	r1
     7d4:	18 95       	reti

000007d6 <__vector_36>:

/*****************************************************************************
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     7d6:	1f 92       	push	r1
     7d8:	0f 92       	push	r0
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	0f 92       	push	r0
     7de:	00 90 5b 00 	lds	r0, 0x005B
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	2f 93       	push	r18
     7e8:	3f 93       	push	r19
     7ea:	4f 93       	push	r20
     7ec:	8f 93       	push	r24
     7ee:	9f 93       	push	r25
     7f0:	ef 93       	push	r30
     7f2:	ff 93       	push	r31
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	00 d0       	rcall	.+0      	; 0x7fa <__vector_36+0x24>
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     7fe:	88 ec       	ldi	r24, 0xC8	; 200
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	fc 01       	movw	r30, r24
     804:	80 81       	ld	r24, Z
     806:	89 83       	std	Y+1, r24	; 0x01
  uint8_t byte = UDRx;
     808:	8e ec       	ldi	r24, 0xCE	; 206
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	fc 01       	movw	r30, r24
     80e:	80 81       	ld	r24, Z
     810:	8a 83       	std	Y+2, r24	; 0x02

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	88 2f       	mov	r24, r24
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	8c 71       	andi	r24, 0x1C	; 28
     81a:	90 70       	andi	r25, 0x00	; 0
     81c:	00 97       	sbiw	r24, 0x00	; 0
     81e:	d1 f5       	brne	.+116    	; 0x894 <__vector_36+0xbe>
  {
    if (rxFifo.bytes == rxFifo.size)
     820:	20 91 99 02 	lds	r18, 0x0299
     824:	30 91 9a 02 	lds	r19, 0x029A
     828:	80 91 97 02 	lds	r24, 0x0297
     82c:	90 91 98 02 	lds	r25, 0x0298
     830:	28 17       	cp	r18, r24
     832:	39 07       	cpc	r19, r25
     834:	71 f1       	breq	.+92     	; 0x892 <__vector_36+0xbc>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     836:	20 91 9b 02 	lds	r18, 0x029B
     83a:	30 91 9c 02 	lds	r19, 0x029C
     83e:	80 91 95 02 	lds	r24, 0x0295
     842:	90 91 96 02 	lds	r25, 0x0296
     846:	28 0f       	add	r18, r24
     848:	39 1f       	adc	r19, r25
     84a:	4a 81       	ldd	r20, Y+2	; 0x02
     84c:	f9 01       	movw	r30, r18
     84e:	40 83       	st	Z, r20
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	90 93 96 02 	sts	0x0296, r25
     856:	80 93 95 02 	sts	0x0295, r24
    if (rxFifo.tail == rxFifo.size)
     85a:	20 91 95 02 	lds	r18, 0x0295
     85e:	30 91 96 02 	lds	r19, 0x0296
     862:	80 91 97 02 	lds	r24, 0x0297
     866:	90 91 98 02 	lds	r25, 0x0298
     86a:	28 17       	cp	r18, r24
     86c:	39 07       	cpc	r19, r25
     86e:	21 f4       	brne	.+8      	; 0x878 <__vector_36+0xa2>
      rxFifo.tail = 0;
     870:	10 92 96 02 	sts	0x0296, r1
     874:	10 92 95 02 	sts	0x0295, r1
    rxFifo.bytes++;
     878:	80 91 99 02 	lds	r24, 0x0299
     87c:	90 91 9a 02 	lds	r25, 0x029A
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	90 93 9a 02 	sts	0x029A, r25
     886:	80 93 99 02 	sts	0x0299, r24

    newData = true;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	80 93 9e 02 	sts	0x029E, r24
     890:	01 c0       	rjmp	.+2      	; 0x894 <__vector_36+0xbe>
  uint8_t byte = UDRx;

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
  {
    if (rxFifo.bytes == rxFifo.size)
      return;
     892:	00 00       	nop

    newData = true;
  }

  PRAGMA(diag_default=Pa082);
}
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	ff 91       	pop	r31
     89e:	ef 91       	pop	r30
     8a0:	9f 91       	pop	r25
     8a2:	8f 91       	pop	r24
     8a4:	4f 91       	pop	r20
     8a6:	3f 91       	pop	r19
     8a8:	2f 91       	pop	r18
     8aa:	0f 90       	pop	r0
     8ac:	00 92 5b 00 	sts	0x005B, r0
     8b0:	0f 90       	pop	r0
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	0f 90       	pop	r0
     8b6:	1f 90       	pop	r1
     8b8:	18 95       	reti

000008ba <NWK_Init>:
NwkIb_t nwkIb;

/*****************************************************************************
*****************************************************************************/
void NWK_Init(void)
{
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	0f 92       	push	r0
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
  nwkIb.nwkSeqNum = 0;
     8c4:	10 92 41 0b 	sts	0x0B41, r1
  nwkIb.macSeqNum = 0;
     8c8:	10 92 42 0b 	sts	0x0B42, r1
  nwkIb.addr = 0;
     8cc:	10 92 3e 0b 	sts	0x0B3E, r1
     8d0:	10 92 3d 0b 	sts	0x0B3D, r1

  for (uint8_t i = 0; i < NWK_MAX_ENDPOINTS_AMOUNT; i++)
     8d4:	19 82       	std	Y+1, r1	; 0x01
     8d6:	0e c0       	rjmp	.+28     	; 0x8f4 <NWK_Init+0x3a>
    nwkIb.endpoint[i] = NULL;
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	88 2f       	mov	r24, r24
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	03 96       	adiw	r24, 0x03	; 3
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	83 5c       	subi	r24, 0xC3	; 195
     8e6:	94 4f       	sbci	r25, 0xF4	; 244
     8e8:	fc 01       	movw	r30, r24
     8ea:	11 82       	std	Z+1, r1	; 0x01
     8ec:	10 82       	st	Z, r1
{
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;

  for (uint8_t i = 0; i < NWK_MAX_ENDPOINTS_AMOUNT; i++)
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	8f 5f       	subi	r24, 0xFF	; 255
     8f2:	89 83       	std	Y+1, r24	; 0x01
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	84 30       	cpi	r24, 0x04	; 4
     8f8:	78 f3       	brcs	.-34     	; 0x8d8 <NWK_Init+0x1e>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
     8fa:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <nwkTxInit>
  nwkRxInit();
     8fe:	0e 94 84 0a 	call	0x1508	; 0x1508 <nwkRxInit>
  nwkFrameInit();
     902:	0e 94 c9 06 	call	0xd92	; 0xd92 <nwkFrameInit>
  nwkDataReqInit();
     906:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <nwkDataReqInit>

#ifdef NWK_ENABLE_ROUTING
  nwkRouteInit();
     90a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <nwkRouteInit>
#endif

#ifdef NWK_ENABLE_SECURITY
  nwkSecurityInit();
#endif
}
     90e:	0f 90       	pop	r0
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <NWK_SetAddr>:

/*****************************************************************************
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	00 d0       	rcall	.+0      	; 0x91c <NWK_SetAddr+0x6>
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	9a 83       	std	Y+2, r25	; 0x02
     922:	89 83       	std	Y+1, r24	; 0x01
  nwkIb.addr = addr;
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	9a 81       	ldd	r25, Y+2	; 0x02
     928:	90 93 3e 0b 	sts	0x0B3E, r25
     92c:	80 93 3d 0b 	sts	0x0B3D, r24
  PHY_SetShortAddr(addr);
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	0e 94 bb 01 	call	0x376	; 0x376 <PHY_SetShortAddr>
}
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	08 95       	ret

00000942 <NWK_SetPanId>:

/*****************************************************************************
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	00 d0       	rcall	.+0      	; 0x948 <NWK_SetPanId+0x6>
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	9a 83       	std	Y+2, r25	; 0x02
     94e:	89 83       	std	Y+1, r24	; 0x01
  nwkIb.panId = panId;
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	9a 81       	ldd	r25, Y+2	; 0x02
     954:	90 93 40 0b 	sts	0x0B40, r25
     958:	80 93 3f 0b 	sts	0x0B3F, r24
  PHY_SetPanId(panId);
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	9a 81       	ldd	r25, Y+2	; 0x02
     960:	0e 94 a4 01 	call	0x348	; 0x348 <PHY_SetPanId>
}
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <NWK_OpenEndpoint>:

/*****************************************************************************
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	00 d0       	rcall	.+0      	; 0x974 <NWK_OpenEndpoint+0x6>
     974:	0f 92       	push	r0
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	7b 83       	std	Y+3, r23	; 0x03
     97e:	6a 83       	std	Y+2, r22	; 0x02
  nwkIb.endpoint[id] = handler;
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	88 2f       	mov	r24, r24
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	03 96       	adiw	r24, 0x03	; 3
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	83 5c       	subi	r24, 0xC3	; 195
     98e:	94 4f       	sbci	r25, 0xF4	; 244
     990:	2a 81       	ldd	r18, Y+2	; 0x02
     992:	3b 81       	ldd	r19, Y+3	; 0x03
     994:	fc 01       	movw	r30, r24
     996:	31 83       	std	Z+1, r19	; 0x01
     998:	20 83       	st	Z, r18
}
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	08 95       	ret

000009a6 <NWK_TaskHandler>:
}

/*****************************************************************************
*****************************************************************************/
void NWK_TaskHandler(void)
{
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
  nwkRxTaskHandler();
     9ae:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     9b2:	0e 94 2c 11 	call	0x2258	; 0x2258 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     9b6:	0e 94 93 06 	call	0xd26	; 0xd26 <nwkDataReqTaskHandler>
#ifdef NWK_ENABLE_SECURITY
  nwkSecurityTaskHandler();
#endif
}
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <nwkDataReqInit>:
static NWK_DataReq_t *nwkDataReqQueue;

/*****************************************************************************
*****************************************************************************/
void nwkDataReqInit(void)
{
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
  nwkDataReqQueue = NULL;
     9c8:	10 92 a0 02 	sts	0x02A0, r1
     9cc:	10 92 9f 02 	sts	0x029F, r1
}
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <NWK_DataReq>:

/*****************************************************************************
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	00 d0       	rcall	.+0      	; 0x9dc <NWK_DataReq+0x6>
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
     9e0:	9a 83       	std	Y+2, r25	; 0x02
     9e2:	89 83       	std	Y+1, r24	; 0x01
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	9a 81       	ldd	r25, Y+2	; 0x02
     9e8:	fc 01       	movw	r30, r24
     9ea:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
     9ee:	9a 81       	ldd	r25, Y+2	; 0x02
     9f0:	fc 01       	movw	r30, r24
     9f2:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	9a 81       	ldd	r25, Y+2	; 0x02
     9f8:	fc 01       	movw	r30, r24
     9fa:	13 82       	std	Z+3, r1	; 0x03
     9fc:	12 82       	std	Z+2, r1	; 0x02

  if (NULL == nwkDataReqQueue)
     9fe:	80 91 9f 02 	lds	r24, 0x029F
     a02:	90 91 a0 02 	lds	r25, 0x02A0
     a06:	00 97       	sbiw	r24, 0x00	; 0
     a08:	61 f4       	brne	.+24     	; 0xa22 <NWK_DataReq+0x4c>
  {
    req->next = NULL;
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	9a 81       	ldd	r25, Y+2	; 0x02
     a0e:	fc 01       	movw	r30, r24
     a10:	11 82       	std	Z+1, r1	; 0x01
     a12:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	9a 81       	ldd	r25, Y+2	; 0x02
     a18:	90 93 a0 02 	sts	0x02A0, r25
     a1c:	80 93 9f 02 	sts	0x029F, r24
     a20:	0f c0       	rjmp	.+30     	; 0xa40 <NWK_DataReq+0x6a>
  }
  else
  {
    req->next = nwkDataReqQueue;
     a22:	20 91 9f 02 	lds	r18, 0x029F
     a26:	30 91 a0 02 	lds	r19, 0x02A0
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	9a 81       	ldd	r25, Y+2	; 0x02
     a2e:	fc 01       	movw	r30, r24
     a30:	31 83       	std	Z+1, r19	; 0x01
     a32:	20 83       	st	Z, r18
    nwkDataReqQueue = req;
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	9a 81       	ldd	r25, Y+2	; 0x02
     a38:	90 93 a0 02 	sts	0x02A0, r25
     a3c:	80 93 9f 02 	sts	0x029F, r24
  }
}
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <nwkDataReqSendFrame>:

/*****************************************************************************
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <nwkDataReqSendFrame+0x6>
     a50:	00 d0       	rcall	.+0      	; 0xa52 <nwkDataReqSendFrame+0x8>
     a52:	0f 92       	push	r0
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	9d 83       	std	Y+5, r25	; 0x05
     a5a:	8c 83       	std	Y+4, r24	; 0x04
  NwkFrame_t *frame;
  uint8_t size = req->size;
     a5c:	8c 81       	ldd	r24, Y+4	; 0x04
     a5e:	9d 81       	ldd	r25, Y+5	; 0x05
     a60:	fc 01       	movw	r30, r24
     a62:	84 85       	ldd	r24, Z+12	; 0x0c
     a64:	89 83       	std	Y+1, r24	; 0x01
#ifdef NWK_ENABLE_SECURITY
  if (req->options & NWK_OPT_ENABLE_SECURITY)
    size += NWK_SECURITY_MIC_SIZE;
#endif

  if (NULL == (frame = nwkFrameAlloc(size)))
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	0e 94 ef 06 	call	0xdde	; 0xdde <nwkFrameAlloc>
     a6c:	9b 83       	std	Y+3, r25	; 0x03
     a6e:	8a 83       	std	Y+2, r24	; 0x02
     a70:	8a 81       	ldd	r24, Y+2	; 0x02
     a72:	9b 81       	ldd	r25, Y+3	; 0x03
     a74:	00 97       	sbiw	r24, 0x00	; 0
     a76:	59 f4       	brne	.+22     	; 0xa8e <nwkDataReqSendFrame+0x44>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     a78:	8c 81       	ldd	r24, Y+4	; 0x04
     a7a:	9d 81       	ldd	r25, Y+5	; 0x05
     a7c:	22 e0       	ldi	r18, 0x02	; 2
     a7e:	fc 01       	movw	r30, r24
     a80:	24 83       	std	Z+4, r18	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     a82:	8c 81       	ldd	r24, Y+4	; 0x04
     a84:	9d 81       	ldd	r25, Y+5	; 0x05
     a86:	22 e0       	ldi	r18, 0x02	; 2
     a88:	fc 01       	movw	r30, r24
     a8a:	27 87       	std	Z+15, r18	; 0x0f
    return;
     a8c:	a9 c0       	rjmp	.+338    	; 0xbe0 <nwkDataReqSendFrame+0x196>
  }

  req->frame = frame;
     a8e:	8c 81       	ldd	r24, Y+4	; 0x04
     a90:	9d 81       	ldd	r25, Y+5	; 0x05
     a92:	2a 81       	ldd	r18, Y+2	; 0x02
     a94:	3b 81       	ldd	r19, Y+3	; 0x03
     a96:	fc 01       	movw	r30, r24
     a98:	33 83       	std	Z+3, r19	; 0x03
     a9a:	22 83       	std	Z+2, r18	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     a9c:	8c 81       	ldd	r24, Y+4	; 0x04
     a9e:	9d 81       	ldd	r25, Y+5	; 0x05
     aa0:	21 e0       	ldi	r18, 0x01	; 1
     aa2:	fc 01       	movw	r30, r24
     aa4:	24 83       	std	Z+4, r18	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     aa6:	8a 81       	ldd	r24, Y+2	; 0x02
     aa8:	9b 81       	ldd	r25, Y+3	; 0x03
     aaa:	8d 57       	subi	r24, 0x7D	; 125
     aac:	9f 4f       	sbci	r25, 0xFF	; 255
     aae:	28 ef       	ldi	r18, 0xF8	; 248
     ab0:	35 e0       	ldi	r19, 0x05	; 5
     ab2:	fc 01       	movw	r30, r24
     ab4:	31 83       	std	Z+1, r19	; 0x01
     ab6:	20 83       	st	Z, r18
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     ab8:	8c 81       	ldd	r24, Y+4	; 0x04
     aba:	9d 81       	ldd	r25, Y+5	; 0x05
     abc:	fc 01       	movw	r30, r24
     abe:	81 85       	ldd	r24, Z+9	; 0x09
     ac0:	88 2f       	mov	r24, r24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	84 70       	andi	r24, 0x04	; 4
     ac6:	90 70       	andi	r25, 0x00	; 0
     ac8:	21 e0       	ldi	r18, 0x01	; 1
     aca:	00 97       	sbiw	r24, 0x00	; 0
     acc:	09 f4       	brne	.+2      	; 0xad0 <nwkDataReqSendFrame+0x86>
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	8a 81       	ldd	r24, Y+2	; 0x02
     ad2:	9b 81       	ldd	r25, Y+3	; 0x03
     ad4:	8e 57       	subi	r24, 0x7E	; 126
     ad6:	9f 4f       	sbci	r25, 0xFF	; 255
     ad8:	fc 01       	movw	r30, r24
     ada:	20 83       	st	Z, r18

  frame->data.header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     adc:	8c 81       	ldd	r24, Y+4	; 0x04
     ade:	9d 81       	ldd	r25, Y+5	; 0x05
     ae0:	fc 01       	movw	r30, r24
     ae2:	81 85       	ldd	r24, Z+9	; 0x09
     ae4:	81 70       	andi	r24, 0x01	; 1
     ae6:	28 2f       	mov	r18, r24
     ae8:	21 70       	andi	r18, 0x01	; 1
     aea:	21 70       	andi	r18, 0x01	; 1
     aec:	8a 81       	ldd	r24, Y+2	; 0x02
     aee:	9b 81       	ldd	r25, Y+3	; 0x03
     af0:	21 70       	andi	r18, 0x01	; 1
     af2:	fc 01       	movw	r30, r24
     af4:	33 85       	ldd	r19, Z+11	; 0x0b
     af6:	3e 7f       	andi	r19, 0xFE	; 254
     af8:	23 2b       	or	r18, r19
     afa:	fc 01       	movw	r30, r24
     afc:	23 87       	std	Z+11, r18	; 0x0b
#ifdef NWK_ENABLE_SECURITY
  frame->data.header.nwkFcf.securityEnabled = req->options & NWK_OPT_ENABLE_SECURITY ? 1 : 0;
#endif
  frame->data.header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     afe:	8c 81       	ldd	r24, Y+4	; 0x04
     b00:	9d 81       	ldd	r25, Y+5	; 0x05
     b02:	fc 01       	movw	r30, r24
     b04:	81 85       	ldd	r24, Z+9	; 0x09
     b06:	88 2f       	mov	r24, r24
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	88 70       	andi	r24, 0x08	; 8
     b0c:	90 70       	andi	r25, 0x00	; 0
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	00 97       	sbiw	r24, 0x00	; 0
     b12:	09 f4       	brne	.+2      	; 0xb16 <nwkDataReqSendFrame+0xcc>
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	8a 81       	ldd	r24, Y+2	; 0x02
     b18:	9b 81       	ldd	r25, Y+3	; 0x03
     b1a:	21 70       	andi	r18, 0x01	; 1
     b1c:	22 0f       	add	r18, r18
     b1e:	22 0f       	add	r18, r18
     b20:	fc 01       	movw	r30, r24
     b22:	33 85       	ldd	r19, Z+11	; 0x0b
     b24:	3b 7f       	andi	r19, 0xFB	; 251
     b26:	23 2b       	or	r18, r19
     b28:	fc 01       	movw	r30, r24
     b2a:	23 87       	std	Z+11, r18	; 0x0b
  frame->data.header.nwkFcf.reserved = 0;
     b2c:	8a 81       	ldd	r24, Y+2	; 0x02
     b2e:	9b 81       	ldd	r25, Y+3	; 0x03
     b30:	fc 01       	movw	r30, r24
     b32:	23 85       	ldd	r18, Z+11	; 0x0b
     b34:	27 70       	andi	r18, 0x07	; 7
     b36:	fc 01       	movw	r30, r24
     b38:	23 87       	std	Z+11, r18	; 0x0b
  frame->data.header.nwkSeq = ++nwkIb.nwkSeqNum;
     b3a:	80 91 41 0b 	lds	r24, 0x0B41
     b3e:	8f 5f       	subi	r24, 0xFF	; 255
     b40:	80 93 41 0b 	sts	0x0B41, r24
     b44:	20 91 41 0b 	lds	r18, 0x0B41
     b48:	8a 81       	ldd	r24, Y+2	; 0x02
     b4a:	9b 81       	ldd	r25, Y+3	; 0x03
     b4c:	fc 01       	movw	r30, r24
     b4e:	24 87       	std	Z+12, r18	; 0x0c
  frame->data.header.nwkSrcAddr = nwkIb.addr;
     b50:	20 91 3d 0b 	lds	r18, 0x0B3D
     b54:	30 91 3e 0b 	lds	r19, 0x0B3E
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	fc 01       	movw	r30, r24
     b5e:	36 87       	std	Z+14, r19	; 0x0e
     b60:	25 87       	std	Z+13, r18	; 0x0d
  frame->data.header.nwkDstAddr = req->dstAddr;
     b62:	8c 81       	ldd	r24, Y+4	; 0x04
     b64:	9d 81       	ldd	r25, Y+5	; 0x05
     b66:	fc 01       	movw	r30, r24
     b68:	25 81       	ldd	r18, Z+5	; 0x05
     b6a:	36 81       	ldd	r19, Z+6	; 0x06
     b6c:	8a 81       	ldd	r24, Y+2	; 0x02
     b6e:	9b 81       	ldd	r25, Y+3	; 0x03
     b70:	fc 01       	movw	r30, r24
     b72:	30 8b       	std	Z+16, r19	; 0x10
     b74:	27 87       	std	Z+15, r18	; 0x0f
  frame->data.header.nwkSrcEndpoint = req->srcEndpoint;
     b76:	8c 81       	ldd	r24, Y+4	; 0x04
     b78:	9d 81       	ldd	r25, Y+5	; 0x05
     b7a:	fc 01       	movw	r30, r24
     b7c:	80 85       	ldd	r24, Z+8	; 0x08
     b7e:	28 2f       	mov	r18, r24
     b80:	2f 70       	andi	r18, 0x0F	; 15
     b82:	8a 81       	ldd	r24, Y+2	; 0x02
     b84:	9b 81       	ldd	r25, Y+3	; 0x03
     b86:	2f 70       	andi	r18, 0x0F	; 15
     b88:	fc 01       	movw	r30, r24
     b8a:	31 89       	ldd	r19, Z+17	; 0x11
     b8c:	30 7f       	andi	r19, 0xF0	; 240
     b8e:	23 2b       	or	r18, r19
     b90:	fc 01       	movw	r30, r24
     b92:	21 8b       	std	Z+17, r18	; 0x11
  frame->data.header.nwkDstEndpoint = req->dstEndpoint;
     b94:	8c 81       	ldd	r24, Y+4	; 0x04
     b96:	9d 81       	ldd	r25, Y+5	; 0x05
     b98:	fc 01       	movw	r30, r24
     b9a:	87 81       	ldd	r24, Z+7	; 0x07
     b9c:	28 2f       	mov	r18, r24
     b9e:	2f 70       	andi	r18, 0x0F	; 15
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	9b 81       	ldd	r25, Y+3	; 0x03
     ba4:	22 95       	swap	r18
     ba6:	20 7f       	andi	r18, 0xF0	; 240
     ba8:	fc 01       	movw	r30, r24
     baa:	31 89       	ldd	r19, Z+17	; 0x11
     bac:	3f 70       	andi	r19, 0x0F	; 15
     bae:	23 2b       	or	r18, r19
     bb0:	fc 01       	movw	r30, r24
     bb2:	21 8b       	std	Z+17, r18	; 0x11

  memcpy(frame->data.payload, req->data, req->size);
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	9b 81       	ldd	r25, Y+3	; 0x03
     bb8:	42 96       	adiw	r24, 0x12	; 18
     bba:	2c 81       	ldd	r18, Y+4	; 0x04
     bbc:	3d 81       	ldd	r19, Y+5	; 0x05
     bbe:	f9 01       	movw	r30, r18
     bc0:	42 85       	ldd	r20, Z+10	; 0x0a
     bc2:	53 85       	ldd	r21, Z+11	; 0x0b
     bc4:	2c 81       	ldd	r18, Y+4	; 0x04
     bc6:	3d 81       	ldd	r19, Y+5	; 0x05
     bc8:	f9 01       	movw	r30, r18
     bca:	24 85       	ldd	r18, Z+12	; 0x0c
     bcc:	22 2f       	mov	r18, r18
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	ba 01       	movw	r22, r20
     bd2:	a9 01       	movw	r20, r18
     bd4:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <memcpy>

  nwkTxFrame(frame);
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	9b 81       	ldd	r25, Y+3	; 0x03
     bdc:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <nwkTxFrame>
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <nwkDataReqTxConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <nwkDataReqTxConf+0x6>
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <nwkDataReqTxConf+0x8>
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	9c 83       	std	Y+4, r25	; 0x04
     bfe:	8b 83       	std	Y+3, r24	; 0x03
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     c00:	80 91 9f 02 	lds	r24, 0x029F
     c04:	90 91 a0 02 	lds	r25, 0x02A0
     c08:	9a 83       	std	Y+2, r25	; 0x02
     c0a:	89 83       	std	Y+1, r24	; 0x01
     c0c:	2b c0       	rjmp	.+86     	; 0xc64 <nwkDataReqTxConf+0x74>
  {
    if (req->frame == frame)
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	9a 81       	ldd	r25, Y+2	; 0x02
     c12:	fc 01       	movw	r30, r24
     c14:	22 81       	ldd	r18, Z+2	; 0x02
     c16:	33 81       	ldd	r19, Z+3	; 0x03
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	28 17       	cp	r18, r24
     c1e:	39 07       	cpc	r19, r25
     c20:	d1 f4       	brne	.+52     	; 0xc56 <nwkDataReqTxConf+0x66>
    {
      req->status = frame->tx.status;
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	9c 81       	ldd	r25, Y+4	; 0x04
     c26:	81 58       	subi	r24, 0x81	; 129
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 81       	ld	r18, Z
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	9a 81       	ldd	r25, Y+2	; 0x02
     c32:	fc 01       	movw	r30, r24
     c34:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
     c3a:	8e 57       	subi	r24, 0x7E	; 126
     c3c:	9f 4f       	sbci	r25, 0xFF	; 255
     c3e:	fc 01       	movw	r30, r24
     c40:	20 81       	ld	r18, Z
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	fc 01       	movw	r30, r24
     c48:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	22 e0       	ldi	r18, 0x02	; 2
     c50:	fc 01       	movw	r30, r24
     c52:	24 83       	std	Z+4, r18	; 0x04
      break;
     c54:	0b c0       	rjmp	.+22     	; 0xc6c <nwkDataReqTxConf+0x7c>

/*****************************************************************************
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	9a 81       	ldd	r25, Y+2	; 0x02
     c5a:	fc 01       	movw	r30, r24
     c5c:	80 81       	ld	r24, Z
     c5e:	91 81       	ldd	r25, Z+1	; 0x01
     c60:	9a 83       	std	Y+2, r25	; 0x02
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	9a 81       	ldd	r25, Y+2	; 0x02
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	89 f6       	brne	.-94     	; 0xc0e <nwkDataReqTxConf+0x1e>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	0e 94 3c 07 	call	0xe78	; 0xe78 <nwkFrameFree>
}
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <nwkDataReqConfirm>:

/*****************************************************************************
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	00 d0       	rcall	.+0      	; 0xc88 <nwkDataReqConfirm+0x6>
     c88:	00 d0       	rcall	.+0      	; 0xc8a <nwkDataReqConfirm+0x8>
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	9c 83       	std	Y+4, r25	; 0x04
     c90:	8b 83       	std	Y+3, r24	; 0x03
  if (nwkDataReqQueue == req)
     c92:	20 91 9f 02 	lds	r18, 0x029F
     c96:	30 91 a0 02 	lds	r19, 0x02A0
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	28 17       	cp	r18, r24
     ca0:	39 07       	cpc	r19, r25
     ca2:	61 f4       	brne	.+24     	; 0xcbc <nwkDataReqConfirm+0x3a>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     ca4:	80 91 9f 02 	lds	r24, 0x029F
     ca8:	90 91 a0 02 	lds	r25, 0x02A0
     cac:	fc 01       	movw	r30, r24
     cae:	80 81       	ld	r24, Z
     cb0:	91 81       	ldd	r25, Z+1	; 0x01
     cb2:	90 93 a0 02 	sts	0x02A0, r25
     cb6:	80 93 9f 02 	sts	0x029F, r24
     cba:	25 c0       	rjmp	.+74     	; 0xd06 <nwkDataReqConfirm+0x84>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
     cbc:	80 91 9f 02 	lds	r24, 0x029F
     cc0:	90 91 a0 02 	lds	r25, 0x02A0
     cc4:	9a 83       	std	Y+2, r25	; 0x02
     cc6:	89 83       	std	Y+1, r24	; 0x01
    while (prev->next != req)
     cc8:	07 c0       	rjmp	.+14     	; 0xcd8 <nwkDataReqConfirm+0x56>
      prev = prev->next;
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	fc 01       	movw	r30, r24
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	9a 83       	std	Y+2, r25	; 0x02
     cd6:	89 83       	std	Y+1, r24	; 0x01
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	9a 81       	ldd	r25, Y+2	; 0x02
     cdc:	fc 01       	movw	r30, r24
     cde:	20 81       	ld	r18, Z
     ce0:	31 81       	ldd	r19, Z+1	; 0x01
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	28 17       	cp	r18, r24
     ce8:	39 07       	cpc	r19, r25
     cea:	79 f7       	brne	.-34     	; 0xcca <nwkDataReqConfirm+0x48>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	9a 81       	ldd	r25, Y+2	; 0x02
     cf0:	fc 01       	movw	r30, r24
     cf2:	80 81       	ld	r24, Z
     cf4:	91 81       	ldd	r25, Z+1	; 0x01
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 81       	ld	r18, Z
     cfa:	31 81       	ldd	r19, Z+1	; 0x01
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	9a 81       	ldd	r25, Y+2	; 0x02
     d00:	fc 01       	movw	r30, r24
     d02:	31 83       	std	Z+1, r19	; 0x01
     d04:	20 83       	st	Z, r18
  }

  req->confirm(req);
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	fc 01       	movw	r30, r24
     d0c:	25 85       	ldd	r18, Z+13	; 0x0d
     d0e:	36 85       	ldd	r19, Z+14	; 0x0e
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	9c 81       	ldd	r25, Y+4	; 0x04
     d14:	f9 01       	movw	r30, r18
     d16:	09 95       	icall
}
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <nwkDataReqTaskHandler>:
}

/*****************************************************************************
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <nwkDataReqTaskHandler+0x6>
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     d30:	80 91 9f 02 	lds	r24, 0x029F
     d34:	90 91 a0 02 	lds	r25, 0x02A0
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01
     d3c:	21 c0       	rjmp	.+66     	; 0xd80 <nwkDataReqTaskHandler+0x5a>
  {
    switch (req->state)
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	9a 81       	ldd	r25, Y+2	; 0x02
     d42:	fc 01       	movw	r30, r24
     d44:	84 81       	ldd	r24, Z+4	; 0x04
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	91 05       	cpc	r25, r1
     d4e:	81 f0       	breq	.+32     	; 0xd70 <nwkDataReqTaskHandler+0x4a>
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	91 05       	cpc	r25, r1
     d54:	39 f0       	breq	.+14     	; 0xd64 <nwkDataReqTaskHandler+0x3e>
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	51 f4       	brne	.+20     	; 0xd6e <nwkDataReqTaskHandler+0x48>
    {
      case NWK_DATA_REQ_STATE_INITIAL:
      {
        nwkDataReqSendFrame(req);
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	9a 81       	ldd	r25, Y+2	; 0x02
     d5e:	0e 94 25 05 	call	0xa4a	; 0xa4a <nwkDataReqSendFrame>
        return;
     d62:	12 c0       	rjmp	.+36     	; 0xd88 <nwkDataReqTaskHandler+0x62>
      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;

      case NWK_DATA_REQ_STATE_CONFIRM:
      {
        nwkDataReqConfirm(req);
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	0e 94 41 06 	call	0xc82	; 0xc82 <nwkDataReqConfirm>
        return;
     d6c:	0d c0       	rjmp	.+26     	; 0xd88 <nwkDataReqTaskHandler+0x62>
      } break;

      default:
        break;
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <nwkDataReqTaskHandler+0x4c>
        nwkDataReqSendFrame(req);
        return;
      } break;

      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;
     d70:	00 00       	nop

/*****************************************************************************
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	9a 81       	ldd	r25, Y+2	; 0x02
     d76:	fc 01       	movw	r30, r24
     d78:	80 81       	ld	r24, Z
     d7a:	91 81       	ldd	r25, Z+1	; 0x01
     d7c:	9a 83       	std	Y+2, r25	; 0x02
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	d9 f6       	brne	.-74     	; 0xd3e <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <nwkFrameInit>:
static NwkFrame_t nwkFrameFrames[NWK_BUFFERS_AMOUNT];

/*****************************************************************************
*****************************************************************************/
void nwkFrameInit(void)
{
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	00 d0       	rcall	.+0      	; 0xd98 <nwkFrameInit+0x6>
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     d9c:	1a 82       	std	Y+2, r1	; 0x02
     d9e:	19 82       	std	Y+1, r1	; 0x01
     da0:	14 c0       	rjmp	.+40     	; 0xdca <nwkFrameInit+0x38>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     da2:	49 81       	ldd	r20, Y+1	; 0x01
     da4:	5a 81       	ldd	r21, Y+2	; 0x02
     da6:	25 e8       	ldi	r18, 0x85	; 133
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	42 9f       	mul	r20, r18
     dac:	c0 01       	movw	r24, r0
     dae:	43 9f       	mul	r20, r19
     db0:	90 0d       	add	r25, r0
     db2:	52 9f       	mul	r21, r18
     db4:	90 0d       	add	r25, r0
     db6:	11 24       	eor	r1, r1
     db8:	8f 55       	subi	r24, 0x5F	; 95
     dba:	9d 4f       	sbci	r25, 0xFD	; 253
     dbc:	fc 01       	movw	r30, r24
     dbe:	10 82       	st	Z, r1

/*****************************************************************************
*****************************************************************************/
void nwkFrameInit(void)
{
  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	9a 81       	ldd	r25, Y+2	; 0x02
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	9a 83       	std	Y+2, r25	; 0x02
     dc8:	89 83       	std	Y+1, r24	; 0x01
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	9a 81       	ldd	r25, Y+2	; 0x02
     dce:	88 30       	cpi	r24, 0x08	; 8
     dd0:	91 05       	cpc	r25, r1
     dd2:	3c f3       	brlt	.-50     	; 0xda2 <nwkFrameInit+0x10>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <nwkFrameAlloc>:
/*****************************************************************************
	Allocate a buffer, if one is available.  Returns a pointer to the frame, if
	one is available, or NULL otherwise.
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(uint8_t size)
{
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	00 d0       	rcall	.+0      	; 0xde4 <nwkFrameAlloc+0x6>
     de4:	0f 92       	push	r0
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	8b 83       	std	Y+3, r24	; 0x03
  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     dec:	1a 82       	std	Y+2, r1	; 0x02
     dee:	19 82       	std	Y+1, r1	; 0x01
     df0:	36 c0       	rjmp	.+108    	; 0xe5e <nwkFrameAlloc+0x80>
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     df2:	49 81       	ldd	r20, Y+1	; 0x01
     df4:	5a 81       	ldd	r21, Y+2	; 0x02
     df6:	25 e8       	ldi	r18, 0x85	; 133
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	42 9f       	mul	r20, r18
     dfc:	c0 01       	movw	r24, r0
     dfe:	43 9f       	mul	r20, r19
     e00:	90 0d       	add	r25, r0
     e02:	52 9f       	mul	r21, r18
     e04:	90 0d       	add	r25, r0
     e06:	11 24       	eor	r1, r1
     e08:	8f 55       	subi	r24, 0x5F	; 95
     e0a:	9d 4f       	sbci	r25, 0xFD	; 253
     e0c:	fc 01       	movw	r30, r24
     e0e:	80 81       	ld	r24, Z
     e10:	88 23       	and	r24, r24
     e12:	01 f5       	brne	.+64     	; 0xe54 <nwkFrameAlloc+0x76>
    {
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t) + size;
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	68 2f       	mov	r22, r24
     e18:	60 5f       	subi	r22, 0xF0	; 240
     e1a:	49 81       	ldd	r20, Y+1	; 0x01
     e1c:	5a 81       	ldd	r21, Y+2	; 0x02
     e1e:	25 e8       	ldi	r18, 0x85	; 133
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	42 9f       	mul	r20, r18
     e24:	c0 01       	movw	r24, r0
     e26:	43 9f       	mul	r20, r19
     e28:	90 0d       	add	r25, r0
     e2a:	52 9f       	mul	r21, r18
     e2c:	90 0d       	add	r25, r0
     e2e:	11 24       	eor	r1, r1
     e30:	8e 55       	subi	r24, 0x5E	; 94
     e32:	9d 4f       	sbci	r25, 0xFD	; 253
     e34:	fc 01       	movw	r30, r24
     e36:	60 83       	st	Z, r22
      return &nwkFrameFrames[i];
     e38:	49 81       	ldd	r20, Y+1	; 0x01
     e3a:	5a 81       	ldd	r21, Y+2	; 0x02
     e3c:	25 e8       	ldi	r18, 0x85	; 133
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	42 9f       	mul	r20, r18
     e42:	c0 01       	movw	r24, r0
     e44:	43 9f       	mul	r20, r19
     e46:	90 0d       	add	r25, r0
     e48:	52 9f       	mul	r21, r18
     e4a:	90 0d       	add	r25, r0
     e4c:	11 24       	eor	r1, r1
     e4e:	8f 55       	subi	r24, 0x5F	; 95
     e50:	9d 4f       	sbci	r25, 0xFD	; 253
     e52:	0c c0       	rjmp	.+24     	; 0xe6c <nwkFrameAlloc+0x8e>
	Allocate a buffer, if one is available.  Returns a pointer to the frame, if
	one is available, or NULL otherwise.
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(uint8_t size)
{
  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	9a 83       	std	Y+2, r25	; 0x02
     e5c:	89 83       	std	Y+1, r24	; 0x01
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	88 30       	cpi	r24, 0x08	; 8
     e64:	91 05       	cpc	r25, r1
     e66:	2c f2       	brlt	.-118    	; 0xdf2 <nwkFrameAlloc+0x14>
    {
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t) + size;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <nwkFrameFree>:

/*****************************************************************************
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <nwkFrameFree+0x6>
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	9a 83       	std	Y+2, r25	; 0x02
     e84:	89 83       	std	Y+1, r24	; 0x01
  frame->state = NWK_FRAME_STATE_FREE;
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	fc 01       	movw	r30, r24
     e8c:	10 82       	st	Z, r1
}
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <nwkFrameByIndex>:

/*****************************************************************************
*****************************************************************************/
NwkFrame_t *nwkFrameByIndex(uint8_t i)
{
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	0f 92       	push	r0
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	89 83       	std	Y+1, r24	; 0x01
  return &nwkFrameFrames[i];
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	48 2f       	mov	r20, r24
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	25 e8       	ldi	r18, 0x85	; 133
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	42 9f       	mul	r20, r18
     eb0:	c0 01       	movw	r24, r0
     eb2:	43 9f       	mul	r20, r19
     eb4:	90 0d       	add	r25, r0
     eb6:	52 9f       	mul	r21, r18
     eb8:	90 0d       	add	r25, r0
     eba:	11 24       	eor	r1, r1
     ebc:	8f 55       	subi	r24, 0x5F	; 95
     ebe:	9d 4f       	sbci	r25, 0xFD	; 253
}
     ec0:	0f 90       	pop	r0
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <nwkFrameCommandInit>:

/*****************************************************************************
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	00 d0       	rcall	.+0      	; 0xece <nwkFrameCommandInit+0x6>
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	89 83       	std	Y+1, r24	; 0x01
  frame->tx.status = NWK_SUCCESS_STATUS;
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	81 58       	subi	r24, 0x81	; 129
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	fc 01       	movw	r30, r24
     ee0:	10 82       	st	Z, r1
  frame->tx.timeout = 0;
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	80 58       	subi	r24, 0x80	; 128
     ee8:	9f 4f       	sbci	r25, 0xFF	; 255
     eea:	fc 01       	movw	r30, r24
     eec:	11 82       	std	Z+1, r1	; 0x01
     eee:	10 82       	st	Z, r1
  frame->tx.control = 0;
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	8e 57       	subi	r24, 0x7E	; 126
     ef6:	9f 4f       	sbci	r25, 0xFF	; 255
     ef8:	fc 01       	movw	r30, r24
     efa:	10 82       	st	Z, r1
  frame->tx.confirm = NULL;
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	8d 57       	subi	r24, 0x7D	; 125
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	fc 01       	movw	r30, r24
     f06:	11 82       	std	Z+1, r1	; 0x01
     f08:	10 82       	st	Z, r1

  frame->data.header.nwkFcf.ackRequest = 0;
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	fc 01       	movw	r30, r24
     f10:	23 85       	ldd	r18, Z+11	; 0x0b
     f12:	2e 7f       	andi	r18, 0xFE	; 254
     f14:	fc 01       	movw	r30, r24
     f16:	23 87       	std	Z+11, r18	; 0x0b
  frame->data.header.nwkFcf.securityEnabled = 0;
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	9a 81       	ldd	r25, Y+2	; 0x02
     f1c:	fc 01       	movw	r30, r24
     f1e:	23 85       	ldd	r18, Z+11	; 0x0b
     f20:	2d 7f       	andi	r18, 0xFD	; 253
     f22:	fc 01       	movw	r30, r24
     f24:	23 87       	std	Z+11, r18	; 0x0b
  frame->data.header.nwkFcf.linkLocal = 0;
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	fc 01       	movw	r30, r24
     f2c:	23 85       	ldd	r18, Z+11	; 0x0b
     f2e:	2b 7f       	andi	r18, 0xFB	; 251
     f30:	fc 01       	movw	r30, r24
     f32:	23 87       	std	Z+11, r18	; 0x0b
  frame->data.header.nwkFcf.reserved = 0;
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	fc 01       	movw	r30, r24
     f3a:	23 85       	ldd	r18, Z+11	; 0x0b
     f3c:	27 70       	andi	r18, 0x07	; 7
     f3e:	fc 01       	movw	r30, r24
     f40:	23 87       	std	Z+11, r18	; 0x0b
  frame->data.header.nwkSeq = ++nwkIb.nwkSeqNum;
     f42:	80 91 41 0b 	lds	r24, 0x0B41
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	80 93 41 0b 	sts	0x0B41, r24
     f4c:	20 91 41 0b 	lds	r18, 0x0B41
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	9a 81       	ldd	r25, Y+2	; 0x02
     f54:	fc 01       	movw	r30, r24
     f56:	24 87       	std	Z+12, r18	; 0x0c
  frame->data.header.nwkSrcAddr = nwkIb.addr;
     f58:	20 91 3d 0b 	lds	r18, 0x0B3D
     f5c:	30 91 3e 0b 	lds	r19, 0x0B3E
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	fc 01       	movw	r30, r24
     f66:	36 87       	std	Z+14, r19	; 0x0e
     f68:	25 87       	std	Z+13, r18	; 0x0d
  frame->data.header.nwkDstAddr = 0;
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	fc 01       	movw	r30, r24
     f70:	10 8a       	std	Z+16, r1	; 0x10
     f72:	17 86       	std	Z+15, r1	; 0x0f
  frame->data.header.nwkSrcEndpoint = 0;
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	9a 81       	ldd	r25, Y+2	; 0x02
     f78:	fc 01       	movw	r30, r24
     f7a:	21 89       	ldd	r18, Z+17	; 0x11
     f7c:	20 7f       	andi	r18, 0xF0	; 240
     f7e:	fc 01       	movw	r30, r24
     f80:	21 8b       	std	Z+17, r18	; 0x11
  frame->data.header.nwkDstEndpoint = 0;
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	9a 81       	ldd	r25, Y+2	; 0x02
     f86:	fc 01       	movw	r30, r24
     f88:	21 89       	ldd	r18, Z+17	; 0x11
     f8a:	2f 70       	andi	r18, 0x0F	; 15
     f8c:	fc 01       	movw	r30, r24
     f8e:	21 8b       	std	Z+17, r18	; 0x11
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <nwkRouteInit>:
static NwkRouteTableRecord_t nwkRouteTable[NWK_ROUTE_TABLE_SIZE];

/*****************************************************************************
*****************************************************************************/
void nwkRouteInit(void)
{
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	0f 92       	push	r0
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	14 c0       	rjmp	.+40     	; 0xfd0 <nwkRouteInit+0x36>
    nwkRouteTable[i].dst = NWK_ROUTE_UNKNOWN;
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	c9 01       	movw	r24, r18
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	82 0f       	add	r24, r18
     fb6:	93 1f       	adc	r25, r19
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	87 53       	subi	r24, 0x37	; 55
     fbe:	99 4f       	sbci	r25, 0xF9	; 249
     fc0:	2f ef       	ldi	r18, 0xFF	; 255
     fc2:	3f ef       	ldi	r19, 0xFF	; 255
     fc4:	fc 01       	movw	r30, r24
     fc6:	31 83       	std	Z+1, r19	; 0x01
     fc8:	20 83       	st	Z, r18

/*****************************************************************************
*****************************************************************************/
void nwkRouteInit(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	8f 5f       	subi	r24, 0xFF	; 255
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	84 36       	cpi	r24, 0x64	; 100
     fd4:	48 f3       	brcs	.-46     	; 0xfa8 <nwkRouteInit+0xe>
    nwkRouteTable[i].dst = NWK_ROUTE_UNKNOWN;
}
     fd6:	0f 90       	pop	r0
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	08 95       	ret

00000fde <nwkRouteFindRecord>:

/*****************************************************************************
*****************************************************************************/
static NwkRouteTableRecord_t *nwkRouteFindRecord(uint16_t dst)
{
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <nwkRouteFindRecord+0x6>
     fe4:	0f 92       	push	r0
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	9b 83       	std	Y+3, r25	; 0x03
     fec:	8a 83       	std	Y+2, r24	; 0x02
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	24 c0       	rjmp	.+72     	; 0x103a <nwkRouteFindRecord+0x5c>
    if (nwkRouteTable[i].dst == dst)
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	c9 01       	movw	r24, r18
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	82 0f       	add	r24, r18
    1000:	93 1f       	adc	r25, r19
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	87 53       	subi	r24, 0x37	; 55
    1008:	99 4f       	sbci	r25, 0xF9	; 249
    100a:	fc 01       	movw	r30, r24
    100c:	20 81       	ld	r18, Z
    100e:	31 81       	ldd	r19, Z+1	; 0x01
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	9b 81       	ldd	r25, Y+3	; 0x03
    1014:	28 17       	cp	r18, r24
    1016:	39 07       	cpc	r19, r25
    1018:	69 f4       	brne	.+26     	; 0x1034 <nwkRouteFindRecord+0x56>
      return &nwkRouteTable[i];
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	c9 01       	movw	r24, r18
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	82 0f       	add	r24, r18
    1028:	93 1f       	adc	r25, r19
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	87 53       	subi	r24, 0x37	; 55
    1030:	99 4f       	sbci	r25, 0xF9	; 249
    1032:	11 c0       	rjmp	.+34     	; 0x1056 <nwkRouteFindRecord+0x78>

/*****************************************************************************
*****************************************************************************/
static NwkRouteTableRecord_t *nwkRouteFindRecord(uint16_t dst)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	8f 5f       	subi	r24, 0xFF	; 255
    1038:	89 83       	std	Y+1, r24	; 0x01
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	84 36       	cpi	r24, 0x64	; 100
    103e:	c8 f2       	brcs	.-78     	; 0xff2 <nwkRouteFindRecord+0x14>
    if (nwkRouteTable[i].dst == dst)
      return &nwkRouteTable[i];

  if (NWK_ROUTE_UNKNOWN == dst)
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	9b 81       	ldd	r25, Y+3	; 0x03
    1044:	ff ef       	ldi	r31, 0xFF	; 255
    1046:	8f 3f       	cpi	r24, 0xFF	; 255
    1048:	9f 07       	cpc	r25, r31
    104a:	19 f4       	brne	.+6      	; 0x1052 <nwkRouteFindRecord+0x74>
    return &nwkRouteTable[NWK_ROUTE_TABLE_SIZE - 1];
    104c:	8b e1       	ldi	r24, 0x1B	; 27
    104e:	99 e0       	ldi	r25, 0x09	; 9
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <nwkRouteFindRecord+0x78>

  return NULL;
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	08 95       	ret

00001062 <nwkRouteRemove>:

/*****************************************************************************
*****************************************************************************/
void nwkRouteRemove(uint16_t dst)
{
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	00 d0       	rcall	.+0      	; 0x1068 <nwkRouteRemove+0x6>
    1068:	00 d0       	rcall	.+0      	; 0x106a <nwkRouteRemove+0x8>
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	9c 83       	std	Y+4, r25	; 0x04
    1070:	8b 83       	std	Y+3, r24	; 0x03
  NwkRouteTableRecord_t *rec;

  rec = nwkRouteFindRecord(dst);
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	0e 94 ef 07 	call	0xfde	; 0xfde <nwkRouteFindRecord>
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	89 83       	std	Y+1, r24	; 0x01
  if (rec)
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	9a 81       	ldd	r25, Y+2	; 0x02
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	39 f0       	breq	.+14     	; 0x1094 <nwkRouteRemove+0x32>
    rec->dst = NWK_ROUTE_UNKNOWN;
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	2f ef       	ldi	r18, 0xFF	; 255
    108c:	3f ef       	ldi	r19, 0xFF	; 255
    108e:	fc 01       	movw	r30, r24
    1090:	31 83       	std	Z+1, r19	; 0x01
    1092:	20 83       	st	Z, r18
}
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <nwkRouteFrameReceived>:

/*****************************************************************************
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <nwkRouteFrameReceived+0x6>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <nwkRouteFrameReceived+0x8>
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <nwkRouteFrameReceived+0xa>
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	9e 83       	std	Y+6, r25	; 0x06
    10b2:	8d 83       	std	Y+5, r24	; 0x05
  NwkRouteTableRecord_t *rec;
  NwkFrameHeader_t *header = &frame->data.header;
    10b4:	8d 81       	ldd	r24, Y+5	; 0x05
    10b6:	9e 81       	ldd	r25, Y+6	; 0x06
    10b8:	02 96       	adiw	r24, 0x02	; 2
    10ba:	9c 83       	std	Y+4, r25	; 0x04
    10bc:	8b 83       	std	Y+3, r24	; 0x03

  if ((header->macSrcAddr & NWK_ROUTE_TRANSIT_MASK) &&
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	9c 81       	ldd	r25, Y+4	; 0x04
    10c2:	fc 01       	movw	r30, r24
    10c4:	87 81       	ldd	r24, Z+7	; 0x07
    10c6:	90 85       	ldd	r25, Z+8	; 0x08
    10c8:	99 23       	and	r25, r25
    10ca:	74 f4       	brge	.+28     	; 0x10e8 <nwkRouteFrameReceived+0x46>
      (header->macSrcAddr != header->nwkSrcAddr))
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	9c 81       	ldd	r25, Y+4	; 0x04
    10d0:	fc 01       	movw	r30, r24
    10d2:	27 81       	ldd	r18, Z+7	; 0x07
    10d4:	30 85       	ldd	r19, Z+8	; 0x08
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	fc 01       	movw	r30, r24
    10dc:	83 85       	ldd	r24, Z+11	; 0x0b
    10de:	94 85       	ldd	r25, Z+12	; 0x0c
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
  NwkRouteTableRecord_t *rec;
  NwkFrameHeader_t *header = &frame->data.header;

  if ((header->macSrcAddr & NWK_ROUTE_TRANSIT_MASK) &&
    10e0:	28 17       	cp	r18, r24
    10e2:	39 07       	cpc	r19, r25
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <nwkRouteFrameReceived+0x46>
    10e6:	6a c0       	rjmp	.+212    	; 0x11bc <nwkRouteFrameReceived+0x11a>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (0xffff == header->macDstPanId)
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	fc 01       	movw	r30, r24
    10ee:	83 81       	ldd	r24, Z+3	; 0x03
    10f0:	94 81       	ldd	r25, Z+4	; 0x04
    10f2:	ff ef       	ldi	r31, 0xFF	; 255
    10f4:	8f 3f       	cpi	r24, 0xFF	; 255
    10f6:	9f 07       	cpc	r25, r31
    10f8:	09 f4       	brne	.+2      	; 0x10fc <nwkRouteFrameReceived+0x5a>
    10fa:	62 c0       	rjmp	.+196    	; 0x11c0 <nwkRouteFrameReceived+0x11e>
    return;

  rec = nwkRouteFindRecord(header->nwkSrcAddr);
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	fc 01       	movw	r30, r24
    1102:	83 85       	ldd	r24, Z+11	; 0x0b
    1104:	94 85       	ldd	r25, Z+12	; 0x0c
    1106:	0e 94 ef 07 	call	0xfde	; 0xfde <nwkRouteFindRecord>
    110a:	9a 83       	std	Y+2, r25	; 0x02
    110c:	89 83       	std	Y+1, r24	; 0x01
  if (rec)
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	9a 81       	ldd	r25, Y+2	; 0x02
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	49 f1       	breq	.+82     	; 0x1168 <nwkRouteFrameReceived+0xc6>
  {
    if (rec->nextHop != header->macSrcAddr && frame->rx.lqi > rec->lqi)
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	9a 81       	ldd	r25, Y+2	; 0x02
    111a:	fc 01       	movw	r30, r24
    111c:	22 81       	ldd	r18, Z+2	; 0x02
    111e:	33 81       	ldd	r19, Z+3	; 0x03
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	fc 01       	movw	r30, r24
    1126:	87 81       	ldd	r24, Z+7	; 0x07
    1128:	90 85       	ldd	r25, Z+8	; 0x08
    112a:	28 17       	cp	r18, r24
    112c:	39 07       	cpc	r19, r25
    112e:	d9 f1       	breq	.+118    	; 0x11a6 <nwkRouteFrameReceived+0x104>
    1130:	8d 81       	ldd	r24, Y+5	; 0x05
    1132:	9e 81       	ldd	r25, Y+6	; 0x06
    1134:	81 58       	subi	r24, 0x81	; 129
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	fc 01       	movw	r30, r24
    113a:	20 81       	ld	r18, Z
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	9a 81       	ldd	r25, Y+2	; 0x02
    1140:	fc 01       	movw	r30, r24
    1142:	85 81       	ldd	r24, Z+5	; 0x05
    1144:	82 17       	cp	r24, r18
    1146:	78 f5       	brcc	.+94     	; 0x11a6 <nwkRouteFrameReceived+0x104>
    {
      rec->nextHop = header->macSrcAddr;
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	fc 01       	movw	r30, r24
    114e:	27 81       	ldd	r18, Z+7	; 0x07
    1150:	30 85       	ldd	r19, Z+8	; 0x08
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	fc 01       	movw	r30, r24
    1158:	33 83       	std	Z+3, r19	; 0x03
    115a:	22 83       	std	Z+2, r18	; 0x02
      rec->score = NWK_ROUTE_DEFAULT_SCORE;
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	23 e0       	ldi	r18, 0x03	; 3
    1162:	fc 01       	movw	r30, r24
    1164:	24 83       	std	Z+4, r18	; 0x04
    1166:	1f c0       	rjmp	.+62     	; 0x11a6 <nwkRouteFrameReceived+0x104>
    }
  }
  else
  {
    rec = nwkRouteFindRecord(NWK_ROUTE_UNKNOWN);
    1168:	8f ef       	ldi	r24, 0xFF	; 255
    116a:	9f ef       	ldi	r25, 0xFF	; 255
    116c:	0e 94 ef 07 	call	0xfde	; 0xfde <nwkRouteFindRecord>
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01

    rec->dst = header->nwkSrcAddr;
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	fc 01       	movw	r30, r24
    117a:	23 85       	ldd	r18, Z+11	; 0x0b
    117c:	34 85       	ldd	r19, Z+12	; 0x0c
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	fc 01       	movw	r30, r24
    1184:	31 83       	std	Z+1, r19	; 0x01
    1186:	20 83       	st	Z, r18
    rec->nextHop = header->macSrcAddr;
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	fc 01       	movw	r30, r24
    118e:	27 81       	ldd	r18, Z+7	; 0x07
    1190:	30 85       	ldd	r19, Z+8	; 0x08
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	fc 01       	movw	r30, r24
    1198:	33 83       	std	Z+3, r19	; 0x03
    119a:	22 83       	std	Z+2, r18	; 0x02
    rec->score = NWK_ROUTE_DEFAULT_SCORE;
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	23 e0       	ldi	r18, 0x03	; 3
    11a2:	fc 01       	movw	r30, r24
    11a4:	24 83       	std	Z+4, r18	; 0x04
  }

  rec->lqi = frame->rx.lqi;
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	81 58       	subi	r24, 0x81	; 129
    11ac:	9f 4f       	sbci	r25, 0xFF	; 255
    11ae:	fc 01       	movw	r30, r24
    11b0:	20 81       	ld	r18, Z
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	9a 81       	ldd	r25, Y+2	; 0x02
    11b6:	fc 01       	movw	r30, r24
    11b8:	25 83       	std	Z+5, r18	; 0x05
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <nwkRouteFrameReceived+0x120>
  NwkRouteTableRecord_t *rec;
  NwkFrameHeader_t *header = &frame->data.header;

  if ((header->macSrcAddr & NWK_ROUTE_TRANSIT_MASK) &&
      (header->macSrcAddr != header->nwkSrcAddr))
    return;
    11bc:	00 00       	nop
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <nwkRouteFrameReceived+0x120>

  if (0xffff == header->macDstPanId)
    return;
    11c0:	00 00       	nop
    rec->nextHop = header->macSrcAddr;
    rec->score = NWK_ROUTE_DEFAULT_SCORE;
  }

  rec->lqi = frame->rx.lqi;
}
    11c2:	26 96       	adiw	r28, 0x06	; 6
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	08 95       	ret

000011d4 <nwkRouteFrameSent>:

/*****************************************************************************
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	2c 97       	sbiw	r28, 0x0c	; 12
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	9c 87       	std	Y+12, r25	; 0x0c
    11ea:	8b 87       	std	Y+11, r24	; 0x0b
  NwkRouteTableRecord_t *rec;

  rec = nwkRouteFindRecord(frame->data.header.nwkDstAddr);
    11ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    11f0:	fc 01       	movw	r30, r24
    11f2:	87 85       	ldd	r24, Z+15	; 0x0f
    11f4:	90 89       	ldd	r25, Z+16	; 0x10
    11f6:	0e 94 ef 07 	call	0xfde	; 0xfde <nwkRouteFindRecord>
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	89 83       	std	Y+1, r24	; 0x01
  if (NULL == rec)
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	9a 81       	ldd	r25, Y+2	; 0x02
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	09 f4       	brne	.+2      	; 0x1208 <nwkRouteFrameSent+0x34>
    1206:	65 c0       	rjmp	.+202    	; 0x12d2 <nwkRouteFrameSent+0xfe>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    1208:	8b 85       	ldd	r24, Y+11	; 0x0b
    120a:	9c 85       	ldd	r25, Y+12	; 0x0c
    120c:	81 58       	subi	r24, 0x81	; 129
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	fc 01       	movw	r30, r24
    1212:	80 81       	ld	r24, Z
    1214:	88 23       	and	r24, r24
    1216:	31 f4       	brne	.+12     	; 0x1224 <nwkRouteFrameSent+0x50>
  {
    rec->score = NWK_ROUTE_DEFAULT_SCORE;
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	23 e0       	ldi	r18, 0x03	; 3
    121e:	fc 01       	movw	r30, r24
    1220:	24 83       	std	Z+4, r18	; 0x04
    1222:	18 c0       	rjmp	.+48     	; 0x1254 <nwkRouteFrameSent+0x80>
  }
  else
  {
    rec->score--;
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	9a 81       	ldd	r25, Y+2	; 0x02
    1228:	fc 01       	movw	r30, r24
    122a:	84 81       	ldd	r24, Z+4	; 0x04
    122c:	28 2f       	mov	r18, r24
    122e:	21 50       	subi	r18, 0x01	; 1
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	fc 01       	movw	r30, r24
    1236:	24 83       	std	Z+4, r18	; 0x04
    if (0 == rec->score)
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	9a 81       	ldd	r25, Y+2	; 0x02
    123c:	fc 01       	movw	r30, r24
    123e:	84 81       	ldd	r24, Z+4	; 0x04
    1240:	88 23       	and	r24, r24
    1242:	41 f4       	brne	.+16     	; 0x1254 <nwkRouteFrameSent+0x80>
    {
      rec->dst = NWK_ROUTE_UNKNOWN;
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	2f ef       	ldi	r18, 0xFF	; 255
    124a:	3f ef       	ldi	r19, 0xFF	; 255
    124c:	fc 01       	movw	r30, r24
    124e:	31 83       	std	Z+1, r19	; 0x01
    1250:	20 83       	st	Z, r18
      return;
    1252:	40 c0       	rjmp	.+128    	; 0x12d4 <nwkRouteFrameSent+0x100>
    }
  }

  if ((rec - &nwkRouteTable[0]) > 0)
    1254:	29 81       	ldd	r18, Y+1	; 0x01
    1256:	3a 81       	ldd	r19, Y+2	; 0x02
    1258:	89 ec       	ldi	r24, 0xC9	; 201
    125a:	96 e0       	ldi	r25, 0x06	; 6
    125c:	a9 01       	movw	r20, r18
    125e:	48 1b       	sub	r20, r24
    1260:	59 0b       	sbc	r21, r25
    1262:	ca 01       	movw	r24, r20
    1264:	86 30       	cpi	r24, 0x06	; 6
    1266:	91 05       	cpc	r25, r1
    1268:	ac f1       	brlt	.+106    	; 0x12d4 <nwkRouteFrameSent+0x100>
  {
    NwkRouteTableRecord_t *prev = rec - 1;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	06 97       	sbiw	r24, 0x06	; 6
    1270:	9c 83       	std	Y+4, r25	; 0x04
    1272:	8b 83       	std	Y+3, r24	; 0x03
    NwkRouteTableRecord_t tmp;

    tmp = *prev;
    1274:	2b 81       	ldd	r18, Y+3	; 0x03
    1276:	3c 81       	ldd	r19, Y+4	; 0x04
    1278:	ce 01       	movw	r24, r28
    127a:	05 96       	adiw	r24, 0x05	; 5
    127c:	46 e0       	ldi	r20, 0x06	; 6
    127e:	f9 01       	movw	r30, r18
    1280:	00 80       	ld	r0, Z
    1282:	2f 5f       	subi	r18, 0xFF	; 255
    1284:	3f 4f       	sbci	r19, 0xFF	; 255
    1286:	fc 01       	movw	r30, r24
    1288:	00 82       	st	Z, r0
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	41 50       	subi	r20, 0x01	; 1
    128e:	44 23       	and	r20, r20
    1290:	b1 f7       	brne	.-20     	; 0x127e <nwkRouteFrameSent+0xaa>
    *prev = *rec;
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	29 81       	ldd	r18, Y+1	; 0x01
    1298:	3a 81       	ldd	r19, Y+2	; 0x02
    129a:	46 e0       	ldi	r20, 0x06	; 6
    129c:	f9 01       	movw	r30, r18
    129e:	00 80       	ld	r0, Z
    12a0:	2f 5f       	subi	r18, 0xFF	; 255
    12a2:	3f 4f       	sbci	r19, 0xFF	; 255
    12a4:	fc 01       	movw	r30, r24
    12a6:	00 82       	st	Z, r0
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	41 50       	subi	r20, 0x01	; 1
    12ac:	44 23       	and	r20, r20
    12ae:	b1 f7       	brne	.-20     	; 0x129c <nwkRouteFrameSent+0xc8>
    *rec = tmp;
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	9e 01       	movw	r18, r28
    12b6:	2b 5f       	subi	r18, 0xFB	; 251
    12b8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ba:	46 e0       	ldi	r20, 0x06	; 6
    12bc:	f9 01       	movw	r30, r18
    12be:	00 80       	ld	r0, Z
    12c0:	2f 5f       	subi	r18, 0xFF	; 255
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	fc 01       	movw	r30, r24
    12c6:	00 82       	st	Z, r0
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	41 50       	subi	r20, 0x01	; 1
    12cc:	44 23       	and	r20, r20
    12ce:	b1 f7       	brne	.-20     	; 0x12bc <nwkRouteFrameSent+0xe8>
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <nwkRouteFrameSent+0x100>
{
  NwkRouteTableRecord_t *rec;

  rec = nwkRouteFindRecord(frame->data.header.nwkDstAddr);
  if (NULL == rec)
    return;
    12d2:	00 00       	nop

    tmp = *prev;
    *prev = *rec;
    *rec = tmp;
  }
}
    12d4:	2c 96       	adiw	r28, 0x0c	; 12
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	08 95       	ret

000012e6 <nwkRouteNextHop>:

/*****************************************************************************
*****************************************************************************/
uint16_t nwkRouteNextHop(uint16_t dst)
{
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <nwkRouteNextHop+0x6>
    12ec:	0f 92       	push	r0
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	9b 83       	std	Y+3, r25	; 0x03
    12f4:	8a 83       	std	Y+2, r24	; 0x02
  if (0xffff == dst)
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	9b 81       	ldd	r25, Y+3	; 0x03
    12fa:	2f ef       	ldi	r18, 0xFF	; 255
    12fc:	8f 3f       	cpi	r24, 0xFF	; 255
    12fe:	92 07       	cpc	r25, r18
    1300:	19 f4       	brne	.+6      	; 0x1308 <nwkRouteNextHop+0x22>
    return NWK_ROUTE_UNKNOWN;
    1302:	8f ef       	ldi	r24, 0xFF	; 255
    1304:	9f ef       	ldi	r25, 0xFF	; 255
    1306:	2e c0       	rjmp	.+92     	; 0x1364 <nwkRouteNextHop+0x7e>

  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1308:	19 82       	std	Y+1, r1	; 0x01
    130a:	27 c0       	rjmp	.+78     	; 0x135a <nwkRouteNextHop+0x74>
    if (nwkRouteTable[i].dst == dst)
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	c9 01       	movw	r24, r18
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	82 0f       	add	r24, r18
    131a:	93 1f       	adc	r25, r19
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	87 53       	subi	r24, 0x37	; 55
    1322:	99 4f       	sbci	r25, 0xF9	; 249
    1324:	fc 01       	movw	r30, r24
    1326:	20 81       	ld	r18, Z
    1328:	31 81       	ldd	r19, Z+1	; 0x01
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	9b 81       	ldd	r25, Y+3	; 0x03
    132e:	28 17       	cp	r18, r24
    1330:	39 07       	cpc	r19, r25
    1332:	81 f4       	brne	.+32     	; 0x1354 <nwkRouteNextHop+0x6e>
      return nwkRouteTable[i].nextHop;
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	c9 01       	movw	r24, r18
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	82 0f       	add	r24, r18
    1342:	93 1f       	adc	r25, r19
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	85 53       	subi	r24, 0x35	; 53
    134a:	99 4f       	sbci	r25, 0xF9	; 249
    134c:	fc 01       	movw	r30, r24
    134e:	80 81       	ld	r24, Z
    1350:	91 81       	ldd	r25, Z+1	; 0x01
    1352:	08 c0       	rjmp	.+16     	; 0x1364 <nwkRouteNextHop+0x7e>
uint16_t nwkRouteNextHop(uint16_t dst)
{
  if (0xffff == dst)
    return NWK_ROUTE_UNKNOWN;

  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	8f 5f       	subi	r24, 0xFF	; 255
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	84 36       	cpi	r24, 0x64	; 100
    135e:	b0 f2       	brcs	.-84     	; 0x130c <nwkRouteNextHop+0x26>
    if (nwkRouteTable[i].dst == dst)
      return nwkRouteTable[i].nextHop;

  return NWK_ROUTE_UNKNOWN;
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	9f ef       	ldi	r25, 0xFF	; 255
}
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	08 95       	ret

00001370 <nwkRouteFrame>:

/*****************************************************************************
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	00 d0       	rcall	.+0      	; 0x1376 <nwkRouteFrame+0x6>
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	9a 83       	std	Y+2, r25	; 0x02
    137c:	89 83       	std	Y+1, r24	; 0x01
  if (NWK_ROUTE_UNKNOWN != nwkRouteNextHop(frame->data.header.nwkDstAddr))
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	9a 81       	ldd	r25, Y+2	; 0x02
    1382:	fc 01       	movw	r30, r24
    1384:	87 85       	ldd	r24, Z+15	; 0x0f
    1386:	90 89       	ldd	r25, Z+16	; 0x10
    1388:	0e 94 73 09 	call	0x12e6	; 0x12e6 <nwkRouteNextHop>
    138c:	ff ef       	ldi	r31, 0xFF	; 255
    138e:	8f 3f       	cpi	r24, 0xFF	; 255
    1390:	9f 07       	cpc	r25, r31
    1392:	a9 f0       	breq	.+42     	; 0x13be <nwkRouteFrame+0x4e>
  {
    frame->tx.confirm = nwkRouteTxFrameConf;
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	8d 57       	subi	r24, 0x7D	; 125
    139a:	9f 4f       	sbci	r25, 0xFF	; 255
    139c:	25 ef       	ldi	r18, 0xF5	; 245
    139e:	39 e0       	ldi	r19, 0x09	; 9
    13a0:	fc 01       	movw	r30, r24
    13a2:	31 83       	std	Z+1, r19	; 0x01
    13a4:	20 83       	st	Z, r18
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	9a 81       	ldd	r25, Y+2	; 0x02
    13aa:	8e 57       	subi	r24, 0x7E	; 126
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
    13ae:	22 e0       	ldi	r18, 0x02	; 2
    13b0:	fc 01       	movw	r30, r24
    13b2:	20 83       	st	Z, r18
    nwkTxFrame(frame);
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	9a 81       	ldd	r25, Y+2	; 0x02
    13b8:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <nwkTxFrame>
    13bc:	11 c0       	rjmp	.+34     	; 0x13e0 <nwkRouteFrame+0x70>
  }
  else
  {
    nwkRouteSendRouteError(frame->data.header.nwkSrcAddr, frame->data.header.nwkDstAddr);
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	9a 81       	ldd	r25, Y+2	; 0x02
    13c2:	fc 01       	movw	r30, r24
    13c4:	85 85       	ldd	r24, Z+13	; 0x0d
    13c6:	96 85       	ldd	r25, Z+14	; 0x0e
    13c8:	29 81       	ldd	r18, Y+1	; 0x01
    13ca:	3a 81       	ldd	r19, Y+2	; 0x02
    13cc:	f9 01       	movw	r30, r18
    13ce:	27 85       	ldd	r18, Z+15	; 0x0f
    13d0:	30 89       	ldd	r19, Z+16	; 0x10
    13d2:	b9 01       	movw	r22, r18
    13d4:	0e 94 05 0a 	call	0x140a	; 0x140a <nwkRouteSendRouteError>
    nwkFrameFree(frame);
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	9a 81       	ldd	r25, Y+2	; 0x02
    13dc:	0e 94 3c 07 	call	0xe78	; 0xe78 <nwkFrameFree>
  }
}
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

000013ea <nwkRouteTxFrameConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkRouteTxFrameConf(NwkFrame_t *frame)
{
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <nwkRouteTxFrameConf+0x6>
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	9a 83       	std	Y+2, r25	; 0x02
    13f6:	89 83       	std	Y+1, r24	; 0x01
  nwkFrameFree(frame);
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	0e 94 3c 07 	call	0xe78	; 0xe78 <nwkFrameFree>
}
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <nwkRouteSendRouteError>:

/*****************************************************************************
*****************************************************************************/
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst)
{
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	28 97       	sbiw	r28, 0x08	; 8
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	9e 83       	std	Y+6, r25	; 0x06
    1420:	8d 83       	std	Y+5, r24	; 0x05
    1422:	78 87       	std	Y+8, r23	; 0x08
    1424:	6f 83       	std	Y+7, r22	; 0x07
  NwkFrame_t *frame;
  NwkRouteErrorCommand_t *command;

  if (NULL == (frame = nwkFrameAlloc(sizeof(NwkRouteErrorCommand_t))))
    1426:	85 e0       	ldi	r24, 0x05	; 5
    1428:	0e 94 ef 06 	call	0xdde	; 0xdde <nwkFrameAlloc>
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	9a 81       	ldd	r25, Y+2	; 0x02
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	89 f1       	breq	.+98     	; 0x149a <nwkRouteSendRouteError+0x90>
    return;

  nwkFrameCommandInit(frame);
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	9a 81       	ldd	r25, Y+2	; 0x02
    143c:	0e 94 64 07 	call	0xec8	; 0xec8 <nwkFrameCommandInit>

  frame->tx.confirm = nwkRouteErrorConf;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	8d 57       	subi	r24, 0x7D	; 125
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	27 e5       	ldi	r18, 0x57	; 87
    144a:	3a e0       	ldi	r19, 0x0A	; 10
    144c:	fc 01       	movw	r30, r24
    144e:	31 83       	std	Z+1, r19	; 0x01
    1450:	20 83       	st	Z, r18

  frame->data.header.nwkDstAddr = src;
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	9a 81       	ldd	r25, Y+2	; 0x02
    1456:	2d 81       	ldd	r18, Y+5	; 0x05
    1458:	3e 81       	ldd	r19, Y+6	; 0x06
    145a:	fc 01       	movw	r30, r24
    145c:	30 8b       	std	Z+16, r19	; 0x10
    145e:	27 87       	std	Z+15, r18	; 0x0f

  command = (NwkRouteErrorCommand_t *)frame->data.payload;
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	9a 81       	ldd	r25, Y+2	; 0x02
    1464:	42 96       	adiw	r24, 0x12	; 18
    1466:	9c 83       	std	Y+4, r25	; 0x04
    1468:	8b 83       	std	Y+3, r24	; 0x03

  command->id = NWK_COMMAND_ROUTE_ERROR;
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	21 e0       	ldi	r18, 0x01	; 1
    1470:	fc 01       	movw	r30, r24
    1472:	20 83       	st	Z, r18
  command->srcAddr = src;
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	2d 81       	ldd	r18, Y+5	; 0x05
    147a:	3e 81       	ldd	r19, Y+6	; 0x06
    147c:	fc 01       	movw	r30, r24
    147e:	32 83       	std	Z+2, r19	; 0x02
    1480:	21 83       	std	Z+1, r18	; 0x01
  command->dstAddr = dst;
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	2f 81       	ldd	r18, Y+7	; 0x07
    1488:	38 85       	ldd	r19, Y+8	; 0x08
    148a:	fc 01       	movw	r30, r24
    148c:	34 83       	std	Z+4, r19	; 0x04
    148e:	23 83       	std	Z+3, r18	; 0x03

  nwkTxFrame(frame);
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	9a 81       	ldd	r25, Y+2	; 0x02
    1494:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <nwkTxFrame>
    1498:	01 c0       	rjmp	.+2      	; 0x149c <nwkRouteSendRouteError+0x92>
{
  NwkFrame_t *frame;
  NwkRouteErrorCommand_t *command;

  if (NULL == (frame = nwkFrameAlloc(sizeof(NwkRouteErrorCommand_t))))
    return;
    149a:	00 00       	nop
  command->id = NWK_COMMAND_ROUTE_ERROR;
  command->srcAddr = src;
  command->dstAddr = dst;

  nwkTxFrame(frame);
}
    149c:	28 96       	adiw	r28, 0x08	; 8
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <nwkRouteErrorConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkRouteErrorConf(NwkFrame_t *frame)
{
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <nwkRouteErrorConf+0x6>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
  nwkFrameFree(frame);
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	0e 94 3c 07 	call	0xe78	; 0xe78 <nwkFrameFree>
}
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	08 95       	ret

000014ce <nwkRouteErrorReceived>:

/*****************************************************************************
*****************************************************************************/
void nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <nwkRouteErrorReceived+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <nwkRouteErrorReceived+0x8>
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9c 83       	std	Y+4, r25	; 0x04
    14dc:	8b 83       	std	Y+3, r24	; 0x03
  NwkRouteErrorCommand_t *command = (NwkRouteErrorCommand_t *)ind->data;
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	9c 81       	ldd	r25, Y+4	; 0x04
    14e2:	fc 01       	movw	r30, r24
    14e4:	85 81       	ldd	r24, Z+5	; 0x05
    14e6:	96 81       	ldd	r25, Z+6	; 0x06
    14e8:	9a 83       	std	Y+2, r25	; 0x02
    14ea:	89 83       	std	Y+1, r24	; 0x01

  nwkRouteRemove(command->dstAddr);
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	9a 81       	ldd	r25, Y+2	; 0x02
    14f0:	fc 01       	movw	r30, r24
    14f2:	83 81       	ldd	r24, Z+3	; 0x03
    14f4:	94 81       	ldd	r25, Z+4	; 0x04
    14f6:	0e 94 31 08 	call	0x1062	; 0x1062 <nwkRouteRemove>
}
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	08 95       	ret

00001508 <nwkRxInit>:
}

/*****************************************************************************
*****************************************************************************/
void nwkRxInit(void)
{
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	0f 92       	push	r0
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1512:	19 82       	std	Y+1, r1	; 0x01
    1514:	12 c0       	rjmp	.+36     	; 0x153a <nwkRxInit+0x32>
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	c9 01       	movw	r24, r18
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	82 0f       	add	r24, r18
    1528:	93 1f       	adc	r25, r19
    152a:	8c 5d       	subi	r24, 0xDC	; 220
    152c:	96 4f       	sbci	r25, 0xF6	; 246
    152e:	fc 01       	movw	r30, r24
    1530:	11 82       	std	Z+1, r1	; 0x01
    1532:	10 82       	st	Z, r1

/*****************************************************************************
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	8f 5f       	subi	r24, 0xFF	; 255
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	8a 30       	cpi	r24, 0x0A	; 10
    153e:	58 f3       	brcs	.-42     	; 0x1516 <nwkRxInit+0xe>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxActiveFrames = 0;
    1540:	10 92 53 09 	sts	0x0953, r1

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    1544:	84 e1       	ldi	r24, 0x14	; 20
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a0 e0       	ldi	r26, 0x00	; 0
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	80 93 5b 09 	sts	0x095B, r24
    1550:	90 93 5c 09 	sts	0x095C, r25
    1554:	a0 93 5d 09 	sts	0x095D, r26
    1558:	b0 93 5e 09 	sts	0x095E, r27
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    155c:	10 92 5f 09 	sts	0x095F, r1
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    1560:	84 e9       	ldi	r24, 0x94	; 148
    1562:	9b e0       	ldi	r25, 0x0B	; 11
    1564:	90 93 61 09 	sts	0x0961, r25
    1568:	80 93 60 09 	sts	0x0960, r24

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    156c:	26 ec       	ldi	r18, 0xC6	; 198
    156e:	3c e0       	ldi	r19, 0x0C	; 12
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	b9 01       	movw	r22, r18
    1574:	0e 94 b7 04 	call	0x96e	; 0x96e <NWK_OpenEndpoint>
}
    1578:	0f 90       	pop	r0
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	08 95       	ret

00001580 <PHY_DataInd>:

/*****************************************************************************
	Process a received frame during system task processing
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	00 d0       	rcall	.+0      	; 0x1586 <PHY_DataInd+0x6>
    1586:	00 d0       	rcall	.+0      	; 0x1588 <PHY_DataInd+0x8>
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrame_t *frame;
// Frame Control = 0x8841 (broadcast frame) or 0x8861 (unicast frame)
// Means: short addresses; intra-PAN; no-ack/ack; data frame
// low byte first
  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	fc 01       	movw	r30, r24
    1596:	80 81       	ld	r24, Z
    1598:	91 81       	ldd	r25, Z+1	; 0x01
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	fc 01       	movw	r30, r24
    159e:	80 81       	ld	r24, Z
    15a0:	88 38       	cpi	r24, 0x88	; 136
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <PHY_DataInd+0x26>
    15a4:	58 c0       	rjmp	.+176    	; 0x1656 <PHY_DataInd+0xd6>
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	fc 01       	movw	r30, r24
    15ac:	80 81       	ld	r24, Z
    15ae:	91 81       	ldd	r25, Z+1	; 0x01
    15b0:	fc 01       	movw	r30, r24
    15b2:	80 81       	ld	r24, Z
    15b4:	81 36       	cpi	r24, 0x61	; 97
    15b6:	51 f0       	breq	.+20     	; 0x15cc <PHY_DataInd+0x4c>
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	fc 01       	movw	r30, r24
    15be:	80 81       	ld	r24, Z
    15c0:	91 81       	ldd	r25, Z+1	; 0x01
    15c2:	fc 01       	movw	r30, r24
    15c4:	80 81       	ld	r24, Z
    15c6:	81 34       	cpi	r24, 0x41	; 65
    15c8:	09 f0       	breq	.+2      	; 0x15cc <PHY_DataInd+0x4c>
    15ca:	45 c0       	rjmp	.+138    	; 0x1656 <PHY_DataInd+0xd6>
      ind->size < sizeof(NwkFrameHeader_t))
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	fc 01       	movw	r30, r24
    15d2:	82 81       	ldd	r24, Z+2	; 0x02
{
  NwkFrame_t *frame;
// Frame Control = 0x8841 (broadcast frame) or 0x8861 (unicast frame)
// Means: short addresses; intra-PAN; no-ack/ack; data frame
// low byte first
  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    15d4:	80 31       	cpi	r24, 0x10	; 16
    15d6:	08 f4       	brcc	.+2      	; 0x15da <PHY_DataInd+0x5a>
    15d8:	3e c0       	rjmp	.+124    	; 0x1656 <PHY_DataInd+0xd6>
      ind->size < sizeof(NwkFrameHeader_t))
    return;

  if (NULL == (frame = nwkFrameAlloc(ind->size - sizeof(NwkFrameHeader_t))))
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	9c 81       	ldd	r25, Y+4	; 0x04
    15de:	fc 01       	movw	r30, r24
    15e0:	82 81       	ldd	r24, Z+2	; 0x02
    15e2:	80 51       	subi	r24, 0x10	; 16
    15e4:	0e 94 ef 06 	call	0xdde	; 0xdde <nwkFrameAlloc>
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	9a 81       	ldd	r25, Y+2	; 0x02
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	99 f1       	breq	.+102    	; 0x165a <PHY_DataInd+0xda>
    return;

  frame->state = NWK_RX_STATE_RECEIVED;
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	20 e2       	ldi	r18, 0x20	; 32
    15fa:	fc 01       	movw	r30, r24
    15fc:	20 83       	st	Z, r18
  frame->rx.lqi = ind->lqi;
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	fc 01       	movw	r30, r24
    1604:	23 81       	ldd	r18, Z+3	; 0x03
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	9a 81       	ldd	r25, Y+2	; 0x02
    160a:	81 58       	subi	r24, 0x81	; 129
    160c:	9f 4f       	sbci	r25, 0xFF	; 255
    160e:	fc 01       	movw	r30, r24
    1610:	20 83       	st	Z, r18
  frame->rx.rssi = ind->rssi;
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	9c 81       	ldd	r25, Y+4	; 0x04
    1616:	fc 01       	movw	r30, r24
    1618:	24 81       	ldd	r18, Z+4	; 0x04
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	9a 81       	ldd	r25, Y+2	; 0x02
    161e:	80 58       	subi	r24, 0x80	; 128
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	fc 01       	movw	r30, r24
    1624:	20 83       	st	Z, r18

  memcpy((uint8_t *)&frame->data, ind->data, ind->size);
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	9a 81       	ldd	r25, Y+2	; 0x02
    162a:	02 96       	adiw	r24, 0x02	; 2
    162c:	2b 81       	ldd	r18, Y+3	; 0x03
    162e:	3c 81       	ldd	r19, Y+4	; 0x04
    1630:	f9 01       	movw	r30, r18
    1632:	40 81       	ld	r20, Z
    1634:	51 81       	ldd	r21, Z+1	; 0x01
    1636:	2b 81       	ldd	r18, Y+3	; 0x03
    1638:	3c 81       	ldd	r19, Y+4	; 0x04
    163a:	f9 01       	movw	r30, r18
    163c:	22 81       	ldd	r18, Z+2	; 0x02
    163e:	22 2f       	mov	r18, r18
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	ba 01       	movw	r22, r20
    1644:	a9 01       	movw	r20, r18
    1646:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <memcpy>

  ++nwkRxActiveFrames;
    164a:	80 91 53 09 	lds	r24, 0x0953
    164e:	8f 5f       	subi	r24, 0xFF	; 255
    1650:	80 93 53 09 	sts	0x0953, r24
    1654:	03 c0       	rjmp	.+6      	; 0x165c <PHY_DataInd+0xdc>
// Frame Control = 0x8841 (broadcast frame) or 0x8861 (unicast frame)
// Means: short addresses; intra-PAN; no-ack/ack; data frame
// low byte first
  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
      ind->size < sizeof(NwkFrameHeader_t))
    return;
    1656:	00 00       	nop
    1658:	01 c0       	rjmp	.+2      	; 0x165c <PHY_DataInd+0xdc>

  if (NULL == (frame = nwkFrameAlloc(ind->size - sizeof(NwkFrameHeader_t))))
    return;
    165a:	00 00       	nop
  frame->rx.rssi = ind->rssi;

  memcpy((uint8_t *)&frame->data, ind->data, ind->size);

  ++nwkRxActiveFrames;
}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	08 95       	ret

0000166a <nwkRxSendAck>:

/*****************************************************************************
*****************************************************************************/
static void nwkRxSendAck(NwkFrame_t *frame)
{
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	00 d0       	rcall	.+0      	; 0x1670 <nwkRxSendAck+0x6>
    1670:	00 d0       	rcall	.+0      	; 0x1672 <nwkRxSendAck+0x8>
    1672:	00 d0       	rcall	.+0      	; 0x1674 <nwkRxSendAck+0xa>
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	9e 83       	std	Y+6, r25	; 0x06
    167a:	8d 83       	std	Y+5, r24	; 0x05
  NwkFrame_t *ack;
  NwkAckCommand_t *command;

  if (NULL == (ack = nwkFrameAlloc(sizeof(NwkAckCommand_t))))
    167c:	83 e0       	ldi	r24, 0x03	; 3
    167e:	0e 94 ef 06 	call	0xdde	; 0xdde <nwkFrameAlloc>
    1682:	9a 83       	std	Y+2, r25	; 0x02
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	9a 81       	ldd	r25, Y+2	; 0x02
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	99 f1       	breq	.+102    	; 0x16f4 <nwkRxSendAck+0x8a>
    return;

  nwkFrameCommandInit(ack);
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	0e 94 64 07 	call	0xec8	; 0xec8 <nwkFrameCommandInit>

  ack->tx.confirm = nwkRxSendAckConf;
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	9a 81       	ldd	r25, Y+2	; 0x02
    169a:	8d 57       	subi	r24, 0x7D	; 125
    169c:	9f 4f       	sbci	r25, 0xFF	; 255
    169e:	24 e8       	ldi	r18, 0x84	; 132
    16a0:	3b e0       	ldi	r19, 0x0B	; 11
    16a2:	fc 01       	movw	r30, r24
    16a4:	31 83       	std	Z+1, r19	; 0x01
    16a6:	20 83       	st	Z, r18

  ack->data.header.nwkDstAddr = frame->data.header.nwkSrcAddr;
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	9e 81       	ldd	r25, Y+6	; 0x06
    16ac:	fc 01       	movw	r30, r24
    16ae:	25 85       	ldd	r18, Z+13	; 0x0d
    16b0:	36 85       	ldd	r19, Z+14	; 0x0e
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	9a 81       	ldd	r25, Y+2	; 0x02
    16b6:	fc 01       	movw	r30, r24
    16b8:	30 8b       	std	Z+16, r19	; 0x10
    16ba:	27 87       	std	Z+15, r18	; 0x0f

  command = (NwkAckCommand_t *)ack->data.payload;
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	42 96       	adiw	r24, 0x12	; 18
    16c2:	9c 83       	std	Y+4, r25	; 0x04
    16c4:	8b 83       	std	Y+3, r24	; 0x03

  command->id = NWK_COMMAND_ACK;
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ca:	fc 01       	movw	r30, r24
    16cc:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    16ce:	20 91 54 09 	lds	r18, 0x0954
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	9c 81       	ldd	r25, Y+4	; 0x04
    16d6:	fc 01       	movw	r30, r24
    16d8:	22 83       	std	Z+2, r18	; 0x02
  command->seq = frame->data.header.nwkSeq;
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	fc 01       	movw	r30, r24
    16e0:	24 85       	ldd	r18, Z+12	; 0x0c
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	fc 01       	movw	r30, r24
    16e8:	21 83       	std	Z+1, r18	; 0x01

  nwkTxFrame(ack);
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <nwkTxFrame>
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <nwkRxSendAck+0x8c>
{
  NwkFrame_t *ack;
  NwkAckCommand_t *command;

  if (NULL == (ack = nwkFrameAlloc(sizeof(NwkAckCommand_t))))
    return;
    16f4:	00 00       	nop
  command->id = NWK_COMMAND_ACK;
  command->control = nwkRxAckControl;
  command->seq = frame->data.header.nwkSeq;

  nwkTxFrame(ack);
}
    16f6:	26 96       	adiw	r28, 0x06	; 6
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	08 95       	ret

00001708 <nwkRxSendAckConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkRxSendAckConf(NwkFrame_t *frame)
{
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	00 d0       	rcall	.+0      	; 0x170e <nwkRxSendAckConf+0x6>
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	9a 83       	std	Y+2, r25	; 0x02
    1714:	89 83       	std	Y+1, r24	; 0x01
  nwkFrameFree(frame);
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	0e 94 3c 07 	call	0xe78	; 0xe78 <nwkFrameFree>
}
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*****************************************************************************
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	00 d0       	rcall	.+0      	; 0x172e <nwkRxDuplicateRejectionTimerHandler+0x6>
    172e:	00 d0       	rcall	.+0      	; 0x1730 <nwkRxDuplicateRejectionTimerHandler+0x8>
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	9c 83       	std	Y+4, r25	; 0x04
    1736:	8b 83       	std	Y+3, r24	; 0x03
  bool restart = false;
    1738:	19 82       	std	Y+1, r1	; 0x01

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    173a:	1a 82       	std	Y+2, r1	; 0x02
    173c:	34 c0       	rjmp	.+104    	; 0x17a6 <nwkRxDuplicateRejectionTimerHandler+0x7e>
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	c9 01       	movw	r24, r18
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	82 0f       	add	r24, r18
    1750:	93 1f       	adc	r25, r19
    1752:	8c 5d       	subi	r24, 0xDC	; 220
    1754:	96 4f       	sbci	r25, 0xF6	; 246
    1756:	fc 01       	movw	r30, r24
    1758:	80 81       	ld	r24, Z
    175a:	91 81       	ldd	r25, Z+1	; 0x01
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	01 f1       	breq	.+64     	; 0x17a0 <nwkRxDuplicateRejectionTimerHandler+0x78>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	c9 01       	movw	r24, r18
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	82 0f       	add	r24, r18
    1772:	93 1f       	adc	r25, r19
    1774:	8c 5d       	subi	r24, 0xDC	; 220
    1776:	96 4f       	sbci	r25, 0xF6	; 246
    1778:	fc 01       	movw	r30, r24
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
    177e:	ac 01       	movw	r20, r24
    1780:	41 50       	subi	r20, 0x01	; 1
    1782:	50 40       	sbci	r21, 0x00	; 0
    1784:	c9 01       	movw	r24, r18
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	82 0f       	add	r24, r18
    1790:	93 1f       	adc	r25, r19
    1792:	8c 5d       	subi	r24, 0xDC	; 220
    1794:	96 4f       	sbci	r25, 0xF6	; 246
    1796:	fc 01       	movw	r30, r24
    1798:	51 83       	std	Z+1, r21	; 0x01
    179a:	40 83       	st	Z, r20
      restart = true;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	89 83       	std	Y+1, r24	; 0x01
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	8a 83       	std	Y+2, r24	; 0x02
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	8a 30       	cpi	r24, 0x0A	; 10
    17aa:	48 f2       	brcs	.-110    	; 0x173e <nwkRxDuplicateRejectionTimerHandler+0x16>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	88 23       	and	r24, r24
    17b0:	21 f0       	breq	.+8      	; 0x17ba <nwkRxDuplicateRejectionTimerHandler+0x92>
    SYS_TimerStart(timer);
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	0e 94 0a 12 	call	0x2414	; 0x2414 <SYS_TimerStart>
}
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	08 95       	ret

000017c8 <nwkRxRejectDuplicate>:

/*****************************************************************************
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <nwkRxRejectDuplicate+0x6>
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <nwkRxRejectDuplicate+0x8>
    17d0:	0f 92       	push	r0
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	9d 83       	std	Y+5, r25	; 0x05
    17d8:	8c 83       	std	Y+4, r24	; 0x04
  int8_t free = -1;
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	89 83       	std	Y+1, r24	; 0x01

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    17de:	1a 82       	std	Y+2, r1	; 0x02
    17e0:	82 c0       	rjmp	.+260    	; 0x18e6 <nwkRxRejectDuplicate+0x11e>
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	c9 01       	movw	r24, r18
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	82 0f       	add	r24, r18
    17f4:	93 1f       	adc	r25, r19
    17f6:	8c 5d       	subi	r24, 0xDC	; 220
    17f8:	96 4f       	sbci	r25, 0xF6	; 246
    17fa:	fc 01       	movw	r30, r24
    17fc:	80 81       	ld	r24, Z
    17fe:	91 81       	ldd	r25, Z+1	; 0x01
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	09 f4       	brne	.+2      	; 0x1806 <nwkRxRejectDuplicate+0x3e>
    1804:	6b c0       	rjmp	.+214    	; 0x18dc <nwkRxRejectDuplicate+0x114>
    {
      if (header->nwkSrcAddr == nwkRxDuplicateRejectionTable[i].src)
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	9d 81       	ldd	r25, Y+5	; 0x05
    180a:	fc 01       	movw	r30, r24
    180c:	43 85       	ldd	r20, Z+11	; 0x0b
    180e:	54 85       	ldd	r21, Z+12	; 0x0c
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	c9 01       	movw	r24, r18
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	82 0f       	add	r24, r18
    1822:	93 1f       	adc	r25, r19
    1824:	8f 5d       	subi	r24, 0xDF	; 223
    1826:	96 4f       	sbci	r25, 0xF6	; 246
    1828:	fc 01       	movw	r30, r24
    182a:	80 81       	ld	r24, Z
    182c:	91 81       	ldd	r25, Z+1	; 0x01
    182e:	48 17       	cp	r20, r24
    1830:	59 07       	cpc	r21, r25
    1832:	09 f0       	breq	.+2      	; 0x1836 <nwkRxRejectDuplicate+0x6e>
    1834:	55 c0       	rjmp	.+170    	; 0x18e0 <nwkRxRejectDuplicate+0x118>
      {
        int8_t diff = (int8_t)header->nwkSeq - nwkRxDuplicateRejectionTable[i].seq;
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	9d 81       	ldd	r25, Y+5	; 0x05
    183a:	fc 01       	movw	r30, r24
    183c:	42 85       	ldd	r20, Z+10	; 0x0a
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	c9 01       	movw	r24, r18
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	82 0f       	add	r24, r18
    1850:	93 1f       	adc	r25, r19
    1852:	8d 5d       	subi	r24, 0xDD	; 221
    1854:	96 4f       	sbci	r25, 0xF6	; 246
    1856:	fc 01       	movw	r30, r24
    1858:	80 81       	ld	r24, Z
    185a:	f4 2f       	mov	r31, r20
    185c:	f8 1b       	sub	r31, r24
    185e:	8f 2f       	mov	r24, r31
    1860:	8b 83       	std	Y+3, r24	; 0x03

        if (diff > 0)
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	18 16       	cp	r1, r24
    1866:	2c f5       	brge	.+74     	; 0x18b2 <nwkRxRejectDuplicate+0xea>
        {
          nwkRxDuplicateRejectionTable[i].seq = header->nwkSeq;
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	9d 81       	ldd	r25, Y+5	; 0x05
    1872:	fc 01       	movw	r30, r24
    1874:	42 85       	ldd	r20, Z+10	; 0x0a
    1876:	c9 01       	movw	r24, r18
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	82 0f       	add	r24, r18
    1882:	93 1f       	adc	r25, r19
    1884:	8d 5d       	subi	r24, 0xDD	; 221
    1886:	96 4f       	sbci	r25, 0xF6	; 246
    1888:	fc 01       	movw	r30, r24
    188a:	40 83       	st	Z, r20
          nwkRxDuplicateRejectionTable[i].ttl = DUPLICATE_REJECTION_TTL;
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	c9 01       	movw	r24, r18
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	82 0f       	add	r24, r18
    189e:	93 1f       	adc	r25, r19
    18a0:	8c 5d       	subi	r24, 0xDC	; 220
    18a2:	96 4f       	sbci	r25, 0xF6	; 246
    18a4:	25 e6       	ldi	r18, 0x65	; 101
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	fc 01       	movw	r30, r24
    18aa:	31 83       	std	Z+1, r19	; 0x01
    18ac:	20 83       	st	Z, r18
          return false;
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	65 c0       	rjmp	.+202    	; 0x197c <nwkRxRejectDuplicate+0x1b4>
        }
        else
        {
#ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    18b2:	20 91 3d 0b 	lds	r18, 0x0B3D
    18b6:	30 91 3e 0b 	lds	r19, 0x0B3E
    18ba:	8c 81       	ldd	r24, Y+4	; 0x04
    18bc:	9d 81       	ldd	r25, Y+5	; 0x05
    18be:	fc 01       	movw	r30, r24
    18c0:	85 81       	ldd	r24, Z+5	; 0x05
    18c2:	96 81       	ldd	r25, Z+6	; 0x06
    18c4:	28 17       	cp	r18, r24
    18c6:	39 07       	cpc	r19, r25
    18c8:	39 f4       	brne	.+14     	; 0x18d8 <nwkRxRejectDuplicate+0x110>
            nwkRouteRemove(header->nwkDstAddr);
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	9d 81       	ldd	r25, Y+5	; 0x05
    18ce:	fc 01       	movw	r30, r24
    18d0:	85 85       	ldd	r24, Z+13	; 0x0d
    18d2:	96 85       	ldd	r25, Z+14	; 0x0e
    18d4:	0e 94 31 08 	call	0x1062	; 0x1062 <nwkRouteRemove>
#endif
          return true;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	50 c0       	rjmp	.+160    	; 0x197c <nwkRxRejectDuplicate+0x1b4>
        }
      }
    }
    else // ttl == 0
    {
      free = i;
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	89 83       	std	Y+1, r24	; 0x01
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  int8_t free = -1;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	8f 5f       	subi	r24, 0xFF	; 255
    18e4:	8a 83       	std	Y+2, r24	; 0x02
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	8a 30       	cpi	r24, 0x0A	; 10
    18ea:	08 f4       	brcc	.+2      	; 0x18ee <nwkRxRejectDuplicate+0x126>
    18ec:	7a cf       	rjmp	.-268    	; 0x17e2 <nwkRxRejectDuplicate+0x1a>
    {
      free = i;
    }
  }

  if (-1 == free)
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	8f 3f       	cpi	r24, 0xFF	; 255
    18f2:	11 f4       	brne	.+4      	; 0x18f8 <nwkRxRejectDuplicate+0x130>
    return true;
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	42 c0       	rjmp	.+132    	; 0x197c <nwkRxRejectDuplicate+0x1b4>

  nwkRxDuplicateRejectionTable[free].src = header->nwkSrcAddr;
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	28 2f       	mov	r18, r24
    18fc:	33 27       	eor	r19, r19
    18fe:	27 fd       	sbrc	r18, 7
    1900:	30 95       	com	r19
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	9d 81       	ldd	r25, Y+5	; 0x05
    1906:	fc 01       	movw	r30, r24
    1908:	43 85       	ldd	r20, Z+11	; 0x0b
    190a:	54 85       	ldd	r21, Z+12	; 0x0c
    190c:	c9 01       	movw	r24, r18
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	82 0f       	add	r24, r18
    1918:	93 1f       	adc	r25, r19
    191a:	8f 5d       	subi	r24, 0xDF	; 223
    191c:	96 4f       	sbci	r25, 0xF6	; 246
    191e:	fc 01       	movw	r30, r24
    1920:	51 83       	std	Z+1, r21	; 0x01
    1922:	40 83       	st	Z, r20
  nwkRxDuplicateRejectionTable[free].seq = header->nwkSeq;
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	28 2f       	mov	r18, r24
    1928:	33 27       	eor	r19, r19
    192a:	27 fd       	sbrc	r18, 7
    192c:	30 95       	com	r19
    192e:	8c 81       	ldd	r24, Y+4	; 0x04
    1930:	9d 81       	ldd	r25, Y+5	; 0x05
    1932:	fc 01       	movw	r30, r24
    1934:	42 85       	ldd	r20, Z+10	; 0x0a
    1936:	c9 01       	movw	r24, r18
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	82 0f       	add	r24, r18
    1942:	93 1f       	adc	r25, r19
    1944:	8d 5d       	subi	r24, 0xDD	; 221
    1946:	96 4f       	sbci	r25, 0xF6	; 246
    1948:	fc 01       	movw	r30, r24
    194a:	40 83       	st	Z, r20
  nwkRxDuplicateRejectionTable[free].ttl = DUPLICATE_REJECTION_TTL;
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	28 2f       	mov	r18, r24
    1950:	33 27       	eor	r19, r19
    1952:	27 fd       	sbrc	r18, 7
    1954:	30 95       	com	r19
    1956:	c9 01       	movw	r24, r18
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	82 0f       	add	r24, r18
    1962:	93 1f       	adc	r25, r19
    1964:	8c 5d       	subi	r24, 0xDC	; 220
    1966:	96 4f       	sbci	r25, 0xF6	; 246
    1968:	25 e6       	ldi	r18, 0x65	; 101
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	fc 01       	movw	r30, r24
    196e:	31 83       	std	Z+1, r19	; 0x01
    1970:	20 83       	st	Z, r18

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1972:	85 e5       	ldi	r24, 0x55	; 85
    1974:	99 e0       	ldi	r25, 0x09	; 9
    1976:	0e 94 0a 12 	call	0x2414	; 0x2414 <SYS_TimerStart>

  return false;
    197a:	80 e0       	ldi	r24, 0x00	; 0
}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	08 95       	ret

0000198c <nwkRxSeriveDataInd>:

/*****************************************************************************
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	00 d0       	rcall	.+0      	; 0x1992 <nwkRxSeriveDataInd+0x6>
    1992:	0f 92       	push	r0
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	9b 83       	std	Y+3, r25	; 0x03
    199a:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t cmd = ind->data[0];
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	9b 81       	ldd	r25, Y+3	; 0x03
    19a0:	fc 01       	movw	r30, r24
    19a2:	85 81       	ldd	r24, Z+5	; 0x05
    19a4:	96 81       	ldd	r25, Z+6	; 0x06
    19a6:	fc 01       	movw	r30, r24
    19a8:	80 81       	ld	r24, Z
    19aa:	89 83       	std	Y+1, r24	; 0x01

  if (NWK_COMMAND_ACK == cmd)
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	88 23       	and	r24, r24
    19b0:	29 f4       	brne	.+10     	; 0x19bc <nwkRxSeriveDataInd+0x30>
    nwkTxAckReceived(ind);
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	9b 81       	ldd	r25, Y+3	; 0x03
    19b6:	0e 94 37 10 	call	0x206e	; 0x206e <nwkTxAckReceived>
    19ba:	0a c0       	rjmp	.+20     	; 0x19d0 <nwkRxSeriveDataInd+0x44>
#ifdef NWK_ENABLE_ROUTING
  else if (NWK_COMMAND_ROUTE_ERROR == cmd)
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	29 f4       	brne	.+10     	; 0x19cc <nwkRxSeriveDataInd+0x40>
    nwkRouteErrorReceived(ind);
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	9b 81       	ldd	r25, Y+3	; 0x03
    19c6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <nwkRouteErrorReceived>
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <nwkRxSeriveDataInd+0x44>
#endif
  else
    return false;
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <nwkRxSeriveDataInd+0x46>

  return true;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	08 95       	ret

000019de <nwkRxIndicateFrame>:

/*****************************************************************************
*****************************************************************************/
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	2e 97       	sbiw	r28, 0x0e	; 14
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	9e 87       	std	Y+14, r25	; 0x0e
    19f4:	8d 87       	std	Y+13, r24	; 0x0d
  NwkFrameHeader_t *header = &frame->data.header;
    19f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fa:	02 96       	adiw	r24, 0x02	; 2
    19fc:	9a 83       	std	Y+2, r25	; 0x02
    19fe:	89 83       	std	Y+1, r24	; 0x01
  NWK_DataInd_t ind;

  if (header->nwkDstEndpoint > NWK_MAX_ENDPOINTS_AMOUNT || 
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	9a 81       	ldd	r25, Y+2	; 0x02
    1a04:	fc 01       	movw	r30, r24
    1a06:	87 85       	ldd	r24, Z+15	; 0x0f
    1a08:	82 95       	swap	r24
    1a0a:	8f 70       	andi	r24, 0x0F	; 15
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	85 30       	cpi	r24, 0x05	; 5
    1a12:	91 05       	cpc	r25, r1
    1a14:	94 f4       	brge	.+36     	; 0x1a3a <nwkRxIndicateFrame+0x5c>
      NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	87 85       	ldd	r24, Z+15	; 0x0f
    1a1e:	82 95       	swap	r24
    1a20:	8f 70       	andi	r24, 0x0F	; 15
    1a22:	88 2f       	mov	r24, r24
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	03 96       	adiw	r24, 0x03	; 3
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	83 5c       	subi	r24, 0xC3	; 195
    1a2e:	94 4f       	sbci	r25, 0xF4	; 244
    1a30:	fc 01       	movw	r30, r24
    1a32:	80 81       	ld	r24, Z
    1a34:	91 81       	ldd	r25, Z+1	; 0x01
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->data.header;
  NWK_DataInd_t ind;

  if (header->nwkDstEndpoint > NWK_MAX_ENDPOINTS_AMOUNT || 
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	11 f4       	brne	.+4      	; 0x1a3e <nwkRxIndicateFrame+0x60>
      NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	92 c0       	rjmp	.+292    	; 0x1b62 <nwkRxIndicateFrame+0x184>

  ind.srcAddr = header->nwkSrcAddr;
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	fc 01       	movw	r30, r24
    1a44:	83 85       	ldd	r24, Z+11	; 0x0b
    1a46:	94 85       	ldd	r25, Z+12	; 0x0c
    1a48:	9c 83       	std	Y+4, r25	; 0x04
    1a4a:	8b 83       	std	Y+3, r24	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a50:	fc 01       	movw	r30, r24
    1a52:	87 85       	ldd	r24, Z+15	; 0x0f
    1a54:	8f 70       	andi	r24, 0x0F	; 15
    1a56:	8d 83       	std	Y+5, r24	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	87 85       	ldd	r24, Z+15	; 0x0f
    1a60:	82 95       	swap	r24
    1a62:	8f 70       	andi	r24, 0x0F	; 15
    1a64:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->data.payload;
    1a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6a:	42 96       	adiw	r24, 0x12	; 18
    1a6c:	99 87       	std	Y+9, r25	; 0x09
    1a6e:	88 87       	std	Y+8, r24	; 0x08
  ind.size = frame->size - sizeof(NwkFrameHeader_t);
    1a70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a74:	fc 01       	movw	r30, r24
    1a76:	81 81       	ldd	r24, Z+1	; 0x01
    1a78:	80 51       	subi	r24, 0x10	; 16
    1a7a:	8a 87       	std	Y+10, r24	; 0x0a
  ind.lqi = frame->rx.lqi;
    1a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a80:	81 58       	subi	r24, 0x81	; 129
    1a82:	9f 4f       	sbci	r25, 0xFF	; 255
    1a84:	fc 01       	movw	r30, r24
    1a86:	80 81       	ld	r24, Z
    1a88:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    1a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8e:	80 58       	subi	r24, 0x80	; 128
    1a90:	9f 4f       	sbci	r25, 0xFF	; 255
    1a92:	fc 01       	movw	r30, r24
    1a94:	80 81       	ld	r24, Z
    1a96:	8c 87       	std	Y+12, r24	; 0x0c
// Setup the options bits
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	81 85       	ldd	r24, Z+9	; 0x09
    1aa0:	81 70       	andi	r24, 0x01	; 1
    1aa2:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (header->nwkFcf.securityEnabled) ? NWK_IND_OPT_SECURED : 0;
    1aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	fc 01       	movw	r30, r24
    1aae:	81 85       	ldd	r24, Z+9	; 0x09
    1ab0:	82 70       	andi	r24, 0x02	; 2
    1ab2:	82 2b       	or	r24, r18
    1ab4:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1ab6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab8:	28 2f       	mov	r18, r24
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	fc 01       	movw	r30, r24
    1ac0:	81 85       	ldd	r24, Z+9	; 0x09
    1ac2:	84 70       	andi	r24, 0x04	; 4
    1ac4:	88 23       	and	r24, r24
    1ac6:	11 f0       	breq	.+4      	; 0x1acc <nwkRxIndicateFrame+0xee>
    1ac8:	80 e2       	ldi	r24, 0x20	; 32
    1aca:	01 c0       	rjmp	.+2      	; 0x1ace <nwkRxIndicateFrame+0xf0>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	82 2b       	or	r24, r18
    1ad0:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (0xffff == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1ad2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ada:	fc 01       	movw	r30, r24
    1adc:	85 85       	ldd	r24, Z+13	; 0x0d
    1ade:	96 85       	ldd	r25, Z+14	; 0x0e
    1ae0:	ff ef       	ldi	r31, 0xFF	; 255
    1ae2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ae4:	9f 07       	cpc	r25, r31
    1ae6:	11 f4       	brne	.+4      	; 0x1aec <nwkRxIndicateFrame+0x10e>
    1ae8:	84 e0       	ldi	r24, 0x04	; 4
    1aea:	01 c0       	rjmp	.+2      	; 0x1aee <nwkRxIndicateFrame+0x110>
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	82 2b       	or	r24, r18
    1af0:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1af2:	8f 81       	ldd	r24, Y+7	; 0x07
    1af4:	48 2f       	mov	r20, r24
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	fc 01       	movw	r30, r24
    1afc:	23 85       	ldd	r18, Z+11	; 0x0b
    1afe:	34 85       	ldd	r19, Z+12	; 0x0c
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	fc 01       	movw	r30, r24
    1b06:	87 81       	ldd	r24, Z+7	; 0x07
    1b08:	90 85       	ldd	r25, Z+8	; 0x08
    1b0a:	28 17       	cp	r18, r24
    1b0c:	39 07       	cpc	r19, r25
    1b0e:	11 f4       	brne	.+4      	; 0x1b14 <nwkRxIndicateFrame+0x136>
    1b10:	88 e0       	ldi	r24, 0x08	; 8
    1b12:	01 c0       	rjmp	.+2      	; 0x1b16 <nwkRxIndicateFrame+0x138>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	84 2b       	or	r24, r20
    1b18:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (0xffff == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1b1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	9a 81       	ldd	r25, Y+2	; 0x02
    1b22:	fc 01       	movw	r30, r24
    1b24:	83 81       	ldd	r24, Z+3	; 0x03
    1b26:	94 81       	ldd	r25, Z+4	; 0x04
    1b28:	ff ef       	ldi	r31, 0xFF	; 255
    1b2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b2c:	9f 07       	cpc	r25, r31
    1b2e:	11 f4       	brne	.+4      	; 0x1b34 <nwkRxIndicateFrame+0x156>
    1b30:	80 e1       	ldi	r24, 0x10	; 16
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <nwkRxIndicateFrame+0x158>
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	82 2b       	or	r24, r18
    1b38:	8f 83       	std	Y+7, r24	; 0x07
// Invokes the callback function and returns its return value to the caller of this function
// i.e., whether or not to acknowledge the message
  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3e:	fc 01       	movw	r30, r24
    1b40:	87 85       	ldd	r24, Z+15	; 0x0f
    1b42:	82 95       	swap	r24
    1b44:	8f 70       	andi	r24, 0x0F	; 15
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	03 96       	adiw	r24, 0x03	; 3
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	83 5c       	subi	r24, 0xC3	; 195
    1b52:	94 4f       	sbci	r25, 0xF4	; 244
    1b54:	fc 01       	movw	r30, r24
    1b56:	20 81       	ld	r18, Z
    1b58:	31 81       	ldd	r19, Z+1	; 0x01
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	03 96       	adiw	r24, 0x03	; 3
    1b5e:	f9 01       	movw	r30, r18
    1b60:	09 95       	icall
}
    1b62:	2e 96       	adiw	r28, 0x0e	; 14
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	08 95       	ret

00001b74 <nwkRxHandleReceivedFrame>:

/*****************************************************************************
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <nwkRxHandleReceivedFrame+0x6>
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <nwkRxHandleReceivedFrame+0x8>
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	9c 83       	std	Y+4, r25	; 0x04
    1b82:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->data.header;
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	02 96       	adiw	r24, 0x02	; 2
    1b8a:	9a 83       	std	Y+2, r25	; 0x02
    1b8c:	89 83       	std	Y+1, r24	; 0x01

  frame->state = NWK_RX_STATE_FINISH;
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	24 e2       	ldi	r18, 0x24	; 36
    1b94:	fc 01       	movw	r30, r24
    1b96:	20 83       	st	Z, r18
// Skip if this is an ack to broadcast addr, or if this node is the one that sent it
  if ((0xffff == header->nwkDstAddr && header->nwkFcf.ackRequest) ||
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	85 85       	ldd	r24, Z+13	; 0x0d
    1ba0:	96 85       	ldd	r25, Z+14	; 0x0e
    1ba2:	ff ef       	ldi	r31, 0xFF	; 255
    1ba4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ba6:	9f 07       	cpc	r25, r31
    1ba8:	41 f4       	brne	.+16     	; 0x1bba <nwkRxHandleReceivedFrame+0x46>
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	fc 01       	movw	r30, r24
    1bb0:	81 85       	ldd	r24, Z+9	; 0x09
    1bb2:	81 70       	andi	r24, 0x01	; 1
    1bb4:	88 23       	and	r24, r24
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <nwkRxHandleReceivedFrame+0x46>
    1bb8:	7f c0       	rjmp	.+254    	; 0x1cb8 <nwkRxHandleReceivedFrame+0x144>
      (nwkIb.addr == header->nwkSrcAddr))
    1bba:	20 91 3d 0b 	lds	r18, 0x0B3D
    1bbe:	30 91 3e 0b 	lds	r19, 0x0B3E
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	83 85       	ldd	r24, Z+11	; 0x0b
    1bca:	94 85       	ldd	r25, Z+12	; 0x0c
{
  NwkFrameHeader_t *header = &frame->data.header;

  frame->state = NWK_RX_STATE_FINISH;
// Skip if this is an ack to broadcast addr, or if this node is the one that sent it
  if ((0xffff == header->nwkDstAddr && header->nwkFcf.ackRequest) ||
    1bcc:	28 17       	cp	r18, r24
    1bce:	39 07       	cpc	r19, r25
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <nwkRxHandleReceivedFrame+0x60>
    1bd2:	72 c0       	rjmp	.+228    	; 0x1cb8 <nwkRxHandleReceivedFrame+0x144>
      (nwkIb.addr == header->nwkSrcAddr))
    return;

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.securityEnabled)
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	fc 01       	movw	r30, r24
    1bda:	81 85       	ldd	r24, Z+9	; 0x09
    1bdc:	82 70       	andi	r24, 0x02	; 2
    1bde:	88 23       	and	r24, r24
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <nwkRxHandleReceivedFrame+0x70>
    1be2:	6c c0       	rjmp	.+216    	; 0x1cbc <nwkRxHandleReceivedFrame+0x148>
    return;
#endif

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	0e 94 51 08 	call	0x10a2	; 0x10a2 <nwkRouteFrameReceived>
#endif

  if (nwkRxRejectDuplicate(header))
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <nwkRxRejectDuplicate>
    1bf4:	88 23       	and	r24, r24
    1bf6:	09 f0       	breq	.+2      	; 0x1bfa <nwkRxHandleReceivedFrame+0x86>
    1bf8:	63 c0       	rjmp	.+198    	; 0x1cc0 <nwkRxHandleReceivedFrame+0x14c>
    return;

  if (0xffff == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	fc 01       	movw	r30, r24
    1c00:	85 81       	ldd	r24, Z+5	; 0x05
    1c02:	96 81       	ldd	r25, Z+6	; 0x06
    1c04:	ff ef       	ldi	r31, 0xFF	; 255
    1c06:	8f 3f       	cpi	r24, 0xFF	; 255
    1c08:	9f 07       	cpc	r25, r31
    1c0a:	01 f5       	brne	.+64     	; 0x1c4c <nwkRxHandleReceivedFrame+0xd8>
    1c0c:	20 91 3d 0b 	lds	r18, 0x0B3D
    1c10:	30 91 3e 0b 	lds	r19, 0x0B3E
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	9a 81       	ldd	r25, Y+2	; 0x02
    1c18:	fc 01       	movw	r30, r24
    1c1a:	85 85       	ldd	r24, Z+13	; 0x0d
    1c1c:	96 85       	ldd	r25, Z+14	; 0x0e
    1c1e:	28 17       	cp	r18, r24
    1c20:	39 07       	cpc	r19, r25
    1c22:	a1 f0       	breq	.+40     	; 0x1c4c <nwkRxHandleReceivedFrame+0xd8>
      0xffff != header->macDstPanId && 0 == header->nwkFcf.linkLocal)
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	9a 81       	ldd	r25, Y+2	; 0x02
    1c28:	fc 01       	movw	r30, r24
    1c2a:	83 81       	ldd	r24, Z+3	; 0x03
    1c2c:	94 81       	ldd	r25, Z+4	; 0x04
#endif

  if (nwkRxRejectDuplicate(header))
    return;

  if (0xffff == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1c2e:	ff ef       	ldi	r31, 0xFF	; 255
    1c30:	8f 3f       	cpi	r24, 0xFF	; 255
    1c32:	9f 07       	cpc	r25, r31
    1c34:	59 f0       	breq	.+22     	; 0x1c4c <nwkRxHandleReceivedFrame+0xd8>
      0xffff != header->macDstPanId && 0 == header->nwkFcf.linkLocal)
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	81 85       	ldd	r24, Z+9	; 0x09
    1c3e:	84 70       	andi	r24, 0x04	; 4
    1c40:	88 23       	and	r24, r24
    1c42:	21 f4       	brne	.+8      	; 0x1c4c <nwkRxHandleReceivedFrame+0xd8>
    nwkTxBroadcastFrame(frame);
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <nwkTxBroadcastFrame>
// If this is the destination, or it's a broadcast frame, then process it
  if (nwkIb.addr == header->nwkDstAddr || 0xffff == header->nwkDstAddr)
    1c4c:	20 91 3d 0b 	lds	r18, 0x0B3D
    1c50:	30 91 3e 0b 	lds	r19, 0x0B3E
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	fc 01       	movw	r30, r24
    1c5a:	85 85       	ldd	r24, Z+13	; 0x0d
    1c5c:	96 85       	ldd	r25, Z+14	; 0x0e
    1c5e:	28 17       	cp	r18, r24
    1c60:	39 07       	cpc	r19, r25
    1c62:	49 f0       	breq	.+18     	; 0x1c76 <nwkRxHandleReceivedFrame+0x102>
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	9a 81       	ldd	r25, Y+2	; 0x02
    1c68:	fc 01       	movw	r30, r24
    1c6a:	85 85       	ldd	r24, Z+13	; 0x0d
    1c6c:	96 85       	ldd	r25, Z+14	; 0x0e
    1c6e:	ff ef       	ldi	r31, 0xFF	; 255
    1c70:	8f 3f       	cpi	r24, 0xFF	; 255
    1c72:	9f 07       	cpc	r25, r31
    1c74:	31 f4       	brne	.+12     	; 0x1c82 <nwkRxHandleReceivedFrame+0x10e>
#ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.securityEnabled)
      frame->state = NWK_RX_STATE_DECRYPT;
    else
#endif
      frame->state = NWK_RX_STATE_INDICATE;
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	22 e2       	ldi	r18, 0x22	; 34
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	20 83       	st	Z, r18
    1c80:	20 c0       	rjmp	.+64     	; 0x1cc2 <nwkRxHandleReceivedFrame+0x14e>
  }
#ifdef NWK_ENABLE_ROUTING
  else if (nwkIb.addr == header->macDstAddr && 0xffff != header->macDstPanId)
    1c82:	20 91 3d 0b 	lds	r18, 0x0B3D
    1c86:	30 91 3e 0b 	lds	r19, 0x0B3E
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8e:	fc 01       	movw	r30, r24
    1c90:	85 81       	ldd	r24, Z+5	; 0x05
    1c92:	96 81       	ldd	r25, Z+6	; 0x06
    1c94:	28 17       	cp	r18, r24
    1c96:	39 07       	cpc	r19, r25
    1c98:	a1 f4       	brne	.+40     	; 0x1cc2 <nwkRxHandleReceivedFrame+0x14e>
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	83 81       	ldd	r24, Z+3	; 0x03
    1ca2:	94 81       	ldd	r25, Z+4	; 0x04
    1ca4:	ff ef       	ldi	r31, 0xFF	; 255
    1ca6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ca8:	9f 07       	cpc	r25, r31
    1caa:	59 f0       	breq	.+22     	; 0x1cc2 <nwkRxHandleReceivedFrame+0x14e>
  {
    frame->state = NWK_RX_STATE_ROUTE;
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	23 e2       	ldi	r18, 0x23	; 35
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	20 83       	st	Z, r18
    1cb6:	05 c0       	rjmp	.+10     	; 0x1cc2 <nwkRxHandleReceivedFrame+0x14e>

  frame->state = NWK_RX_STATE_FINISH;
// Skip if this is an ack to broadcast addr, or if this node is the one that sent it
  if ((0xffff == header->nwkDstAddr && header->nwkFcf.ackRequest) ||
      (nwkIb.addr == header->nwkSrcAddr))
    return;
    1cb8:	00 00       	nop
    1cba:	03 c0       	rjmp	.+6      	; 0x1cc2 <nwkRxHandleReceivedFrame+0x14e>

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.securityEnabled)
    return;
    1cbc:	00 00       	nop
    1cbe:	01 c0       	rjmp	.+2      	; 0x1cc2 <nwkRxHandleReceivedFrame+0x14e>
#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
#endif

  if (nwkRxRejectDuplicate(header))
    return;
    1cc0:	00 00       	nop
  else if (nwkIb.addr == header->macDstAddr && 0xffff != header->macDstPanId)
  {
    frame->state = NWK_RX_STATE_ROUTE;
  }
#endif
}
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	08 95       	ret

00001cd0 <nwkRxTaskHandler>:

/*****************************************************************************
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	28 97       	sbiw	r28, 0x08	; 8
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
  if (0 == nwkRxActiveFrames)
    1ce4:	80 91 53 09 	lds	r24, 0x0953
    1ce8:	88 23       	and	r24, r24
    1cea:	09 f4       	brne	.+2      	; 0x1cee <nwkRxTaskHandler+0x1e>
    1cec:	84 c0       	rjmp	.+264    	; 0x1df6 <nwkRxTaskHandler+0x126>
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1cee:	1a 82       	std	Y+2, r1	; 0x02
    1cf0:	19 82       	std	Y+1, r1	; 0x01
    1cf2:	7a c0       	rjmp	.+244    	; 0x1de8 <nwkRxTaskHandler+0x118>
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	0e 94 4c 07 	call	0xe98	; 0xe98 <nwkFrameByIndex>
    1cfa:	9c 83       	std	Y+4, r25	; 0x04
    1cfc:	8b 83       	std	Y+3, r24	; 0x03

    switch (frame->state)
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	fc 01       	movw	r30, r24
    1d04:	80 81       	ld	r24, Z
    1d06:	88 2f       	mov	r24, r24
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	82 32       	cpi	r24, 0x22	; 34
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	a9 f0       	breq	.+42     	; 0x1d3a <nwkRxTaskHandler+0x6a>
    1d10:	83 32       	cpi	r24, 0x23	; 35
    1d12:	91 05       	cpc	r25, r1
    1d14:	24 f4       	brge	.+8      	; 0x1d1e <nwkRxTaskHandler+0x4e>
    1d16:	80 32       	cpi	r24, 0x20	; 32
    1d18:	91 05       	cpc	r25, r1
    1d1a:	51 f0       	breq	.+20     	; 0x1d30 <nwkRxTaskHandler+0x60>
    1d1c:	60 c0       	rjmp	.+192    	; 0x1dde <nwkRxTaskHandler+0x10e>
    1d1e:	83 32       	cpi	r24, 0x23	; 35
    1d20:	91 05       	cpc	r25, r1
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <nwkRxTaskHandler+0x56>
    1d24:	48 c0       	rjmp	.+144    	; 0x1db6 <nwkRxTaskHandler+0xe6>
    1d26:	84 32       	cpi	r24, 0x24	; 36
    1d28:	91 05       	cpc	r25, r1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <nwkRxTaskHandler+0x5e>
    1d2c:	4e c0       	rjmp	.+156    	; 0x1dca <nwkRxTaskHandler+0xfa>
    1d2e:	57 c0       	rjmp	.+174    	; 0x1dde <nwkRxTaskHandler+0x10e>
    {
      case NWK_RX_STATE_RECEIVED:
      {
        nwkRxHandleReceivedFrame(frame);
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <nwkRxHandleReceivedFrame>
      } break;
    1d38:	52 c0       	rjmp	.+164    	; 0x1dde <nwkRxTaskHandler+0x10e>
      } break;
#endif

      case NWK_RX_STATE_INDICATE:
      {
        NwkFrameHeader_t *header = &frame->data.header;
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3e:	02 96       	adiw	r24, 0x02	; 2
    1d40:	9e 83       	std	Y+6, r25	; 0x06
    1d42:	8d 83       	std	Y+5, r24	; 0x05
        bool ack, forceAck;

        nwkRxAckControl = NWK_ACK_CONTROL_NONE;
    1d44:	10 92 54 09 	sts	0x0954, r1
        ack = nwkRxIndicateFrame(frame);
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	0e 94 ef 0c 	call	0x19de	; 0x19de <nwkRxIndicateFrame>
    1d50:	8f 83       	std	Y+7, r24	; 0x07
        forceAck = (0xffff == header->macDstAddr && nwkIb.addr == header->nwkDstAddr);
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	fc 01       	movw	r30, r24
    1d58:	85 81       	ldd	r24, Z+5	; 0x05
    1d5a:	96 81       	ldd	r25, Z+6	; 0x06
    1d5c:	ff ef       	ldi	r31, 0xFF	; 255
    1d5e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d60:	9f 07       	cpc	r25, r31
    1d62:	79 f4       	brne	.+30     	; 0x1d82 <nwkRxTaskHandler+0xb2>
    1d64:	20 91 3d 0b 	lds	r18, 0x0B3D
    1d68:	30 91 3e 0b 	lds	r19, 0x0B3E
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	fc 01       	movw	r30, r24
    1d72:	85 85       	ldd	r24, Z+13	; 0x0d
    1d74:	96 85       	ldd	r25, Z+14	; 0x0e
    1d76:	28 17       	cp	r18, r24
    1d78:	39 07       	cpc	r19, r25
    1d7a:	19 f4       	brne	.+6      	; 0x1d82 <nwkRxTaskHandler+0xb2>
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <nwkRxTaskHandler+0xb6>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	88 87       	std	Y+8, r24	; 0x08

        if ((header->nwkFcf.ackRequest && ack) || forceAck)
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	81 85       	ldd	r24, Z+9	; 0x09
    1d90:	81 70       	andi	r24, 0x01	; 1
    1d92:	88 23       	and	r24, r24
    1d94:	19 f0       	breq	.+6      	; 0x1d9c <nwkRxTaskHandler+0xcc>
    1d96:	8f 81       	ldd	r24, Y+7	; 0x07
    1d98:	88 23       	and	r24, r24
    1d9a:	19 f4       	brne	.+6      	; 0x1da2 <nwkRxTaskHandler+0xd2>
    1d9c:	88 85       	ldd	r24, Y+8	; 0x08
    1d9e:	88 23       	and	r24, r24
    1da0:	21 f0       	breq	.+8      	; 0x1daa <nwkRxTaskHandler+0xda>
          nwkRxSendAck(frame);
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	0e 94 35 0b 	call	0x166a	; 0x166a <nwkRxSendAck>

        frame->state = NWK_RX_STATE_FINISH;
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	24 e2       	ldi	r18, 0x24	; 36
    1db0:	fc 01       	movw	r30, r24
    1db2:	20 83       	st	Z, r18
      } break;
    1db4:	14 c0       	rjmp	.+40     	; 0x1dde <nwkRxTaskHandler+0x10e>

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	0e 94 b8 09 	call	0x1370	; 0x1370 <nwkRouteFrame>
        --nwkRxActiveFrames;
    1dbe:	80 91 53 09 	lds	r24, 0x0953
    1dc2:	81 50       	subi	r24, 0x01	; 1
    1dc4:	80 93 53 09 	sts	0x0953, r24
      } break;
    1dc8:	0a c0       	rjmp	.+20     	; 0x1dde <nwkRxTaskHandler+0x10e>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	0e 94 3c 07 	call	0xe78	; 0xe78 <nwkFrameFree>
        --nwkRxActiveFrames;
    1dd2:	80 91 53 09 	lds	r24, 0x0953
    1dd6:	81 50       	subi	r24, 0x01	; 1
    1dd8:	80 93 53 09 	sts	0x0953, r24
      } break;
    1ddc:	00 00       	nop
void nwkRxTaskHandler(void)
{
  if (0 == nwkRxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	9a 81       	ldd	r25, Y+2	; 0x02
    1de2:	01 96       	adiw	r24, 0x01	; 1
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	9a 81       	ldd	r25, Y+2	; 0x02
    1dec:	88 30       	cpi	r24, 0x08	; 8
    1dee:	91 05       	cpc	r25, r1
    1df0:	0c f4       	brge	.+2      	; 0x1df4 <nwkRxTaskHandler+0x124>
    1df2:	80 cf       	rjmp	.-256    	; 0x1cf4 <nwkRxTaskHandler+0x24>
    1df4:	01 c0       	rjmp	.+2      	; 0x1df8 <nwkRxTaskHandler+0x128>
/*****************************************************************************
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  if (0 == nwkRxActiveFrames)
    return;
    1df6:	00 00       	nop
        nwkFrameFree(frame);
        --nwkRxActiveFrames;
      } break;
    }
  }
}
    1df8:	28 96       	adiw	r28, 0x08	; 8
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	08 95       	ret

00001e0a <nwkTxInit>:
static SYS_Timer_t nwkTxAckWaitTimer;

/*****************************************************************************
*****************************************************************************/
void nwkTxInit(void)
{
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
  nwkTxPhyActiveFrame = NULL;
    1e12:	10 92 63 09 	sts	0x0963, r1
    1e16:	10 92 62 09 	sts	0x0962, r1
  nwkTxActiveFrames = 0;
    1e1a:	10 92 64 09 	sts	0x0964, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    1e1e:	82 e3       	ldi	r24, 0x32	; 50
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	a0 e0       	ldi	r26, 0x00	; 0
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	80 93 6b 09 	sts	0x096B, r24
    1e2a:	90 93 6c 09 	sts	0x096C, r25
    1e2e:	a0 93 6d 09 	sts	0x096D, r26
    1e32:	b0 93 6e 09 	sts	0x096E, r27
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1e36:	10 92 6f 09 	sts	0x096F, r1
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    1e3a:	8b e8       	ldi	r24, 0x8B	; 139
    1e3c:	90 e1       	ldi	r25, 0x10	; 16
    1e3e:	90 93 71 09 	sts	0x0971, r25
    1e42:	80 93 70 09 	sts	0x0970, r24
}
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	08 95       	ret

00001e4c <nwkTxFrame>:

/*****************************************************************************
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <nwkTxFrame+0x6>
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <nwkTxFrame+0x8>
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	9c 83       	std	Y+4, r25	; 0x04
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->data.header;
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	02 96       	adiw	r24, 0x02	; 2
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	8e 57       	subi	r24, 0x7E	; 126
    1e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6e:	fc 01       	movw	r30, r24
    1e70:	80 81       	ld	r24, Z
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	82 70       	andi	r24, 0x02	; 2
    1e78:	90 70       	andi	r25, 0x00	; 0
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	31 f0       	breq	.+12     	; 0x1e8a <nwkTxFrame+0x3e>
  {
    frame->state = NWK_TX_STATE_SEND;
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	9c 81       	ldd	r25, Y+4	; 0x04
    1e82:	21 e1       	ldi	r18, 0x11	; 17
    1e84:	fc 01       	movw	r30, r24
    1e86:	20 83       	st	Z, r18
    1e88:	05 c0       	rjmp	.+10     	; 0x1e94 <nwkTxFrame+0x48>
#ifdef NWK_ENABLE_SECURITY
    if (frame->data.header.nwkFcf.securityEnabled)
      frame->state = NWK_TX_STATE_ENCRYPT;
    else
#endif
      frame->state = NWK_TX_STATE_SEND;
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8e:	21 e1       	ldi	r18, 0x11	; 17
    1e90:	fc 01       	movw	r30, r24
    1e92:	20 83       	st	Z, r18
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	9c 81       	ldd	r25, Y+4	; 0x04
    1e98:	81 58       	subi	r24, 0x81	; 129
    1e9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	10 82       	st	Z, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea4:	8e 57       	subi	r24, 0x7E	; 126
    1ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	80 81       	ld	r24, Z
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	81 70       	andi	r24, 0x01	; 1
    1eb2:	90 70       	andi	r25, 0x00	; 0
    1eb4:	88 23       	and	r24, r24
    1eb6:	41 f0       	breq	.+16     	; 0x1ec8 <nwkTxFrame+0x7c>
    frame->data.header.macDstPanId = 0xffff;
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	2f ef       	ldi	r18, 0xFF	; 255
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	36 83       	std	Z+6, r19	; 0x06
    1ec4:	25 83       	std	Z+5, r18	; 0x05
    1ec6:	09 c0       	rjmp	.+18     	; 0x1eda <nwkTxFrame+0x8e>
  else
    frame->data.header.macDstPanId = nwkIb.panId;
    1ec8:	20 91 3f 0b 	lds	r18, 0x0B3F
    1ecc:	30 91 40 0b 	lds	r19, 0x0B40
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	36 83       	std	Z+6, r19	; 0x06
    1ed8:	25 83       	std	Z+5, r18	; 0x05

#ifdef NWK_ENABLE_ROUTING
  header->macDstAddr = nwkRouteNextHop(header->nwkDstAddr);
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ede:	fc 01       	movw	r30, r24
    1ee0:	85 85       	ldd	r24, Z+13	; 0x0d
    1ee2:	96 85       	ldd	r25, Z+14	; 0x0e
    1ee4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <nwkRouteNextHop>
    1ee8:	9c 01       	movw	r18, r24
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	fc 01       	movw	r30, r24
    1ef0:	36 83       	std	Z+6, r19	; 0x06
    1ef2:	25 83       	std	Z+5, r18	; 0x05
#else
  header->macDstAddr = header->nwkDstAddr;
#endif
  header->macSrcAddr = nwkIb.addr;
    1ef4:	20 91 3d 0b 	lds	r18, 0x0B3D
    1ef8:	30 91 3e 0b 	lds	r19, 0x0B3E
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	9a 81       	ldd	r25, Y+2	; 0x02
    1f00:	fc 01       	movw	r30, r24
    1f02:	30 87       	std	Z+8, r19	; 0x08
    1f04:	27 83       	std	Z+7, r18	; 0x07
  header->macSeq = ++nwkIb.macSeqNum;
    1f06:	80 91 42 0b 	lds	r24, 0x0B42
    1f0a:	8f 5f       	subi	r24, 0xFF	; 255
    1f0c:	80 93 42 0b 	sts	0x0B42, r24
    1f10:	20 91 42 0b 	lds	r18, 0x0B42
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	9a 81       	ldd	r25, Y+2	; 0x02
    1f18:	fc 01       	movw	r30, r24
    1f1a:	22 83       	std	Z+2, r18	; 0x02

  if (0xffff == header->macDstAddr)
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f20:	fc 01       	movw	r30, r24
    1f22:	85 81       	ldd	r24, Z+5	; 0x05
    1f24:	96 81       	ldd	r25, Z+6	; 0x06
    1f26:	ff ef       	ldi	r31, 0xFF	; 255
    1f28:	8f 3f       	cpi	r24, 0xFF	; 255
    1f2a:	9f 07       	cpc	r25, r31
    1f2c:	41 f4       	brne	.+16     	; 0x1f3e <nwkTxFrame+0xf2>
    header->macFcf = 0x8841;
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	21 e4       	ldi	r18, 0x41	; 65
    1f34:	38 e8       	ldi	r19, 0x88	; 136
    1f36:	fc 01       	movw	r30, r24
    1f38:	31 83       	std	Z+1, r19	; 0x01
    1f3a:	20 83       	st	Z, r18
    1f3c:	07 c0       	rjmp	.+14     	; 0x1f4c <nwkTxFrame+0x100>
  else
    header->macFcf = 0x8861;
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	21 e6       	ldi	r18, 0x61	; 97
    1f44:	38 e8       	ldi	r19, 0x88	; 136
    1f46:	fc 01       	movw	r30, r24
    1f48:	31 83       	std	Z+1, r19	; 0x01
    1f4a:	20 83       	st	Z, r18

  ++nwkTxActiveFrames;
    1f4c:	80 91 64 09 	lds	r24, 0x0964
    1f50:	8f 5f       	subi	r24, 0xFF	; 255
    1f52:	80 93 64 09 	sts	0x0964, r24
}
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	08 95       	ret

00001f64 <nwkTxBroadcastFrame>:

/*****************************************************************************
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    1f64:	cf 93       	push	r28
    1f66:	df 93       	push	r29
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <nwkTxBroadcastFrame+0x6>
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <nwkTxBroadcastFrame+0x8>
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	9c 83       	std	Y+4, r25	; 0x04
    1f72:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc(frame->size - sizeof(NwkFrameHeader_t))))
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	fc 01       	movw	r30, r24
    1f7a:	81 81       	ldd	r24, Z+1	; 0x01
    1f7c:	80 51       	subi	r24, 0x10	; 16
    1f7e:	0e 94 ef 06 	call	0xdde	; 0xdde <nwkFrameAlloc>
    1f82:	9a 83       	std	Y+2, r25	; 0x02
    1f84:	89 83       	std	Y+1, r24	; 0x01
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <nwkTxBroadcastFrame+0x2c>
    1f8e:	57 c0       	rjmp	.+174    	; 0x203e <nwkTxBroadcastFrame+0xda>
    return;

  newFrame->tx.confirm = nwkTxBroadcastConf;
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	9a 81       	ldd	r25, Y+2	; 0x02
    1f94:	8d 57       	subi	r24, 0x7D	; 125
    1f96:	9f 4f       	sbci	r25, 0xFF	; 255
    1f98:	27 e2       	ldi	r18, 0x27	; 39
    1f9a:	30 e1       	ldi	r19, 0x10	; 16
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	31 83       	std	Z+1, r19	; 0x01
    1fa0:	20 83       	st	Z, r18
  memcpy((uint8_t *)&newFrame->data, (uint8_t *)&frame->data, frame->size);
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	02 96       	adiw	r24, 0x02	; 2
    1fa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1faa:	3c 81       	ldd	r19, Y+4	; 0x04
    1fac:	a9 01       	movw	r20, r18
    1fae:	4e 5f       	subi	r20, 0xFE	; 254
    1fb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb6:	f9 01       	movw	r30, r18
    1fb8:	21 81       	ldd	r18, Z+1	; 0x01
    1fba:	22 2f       	mov	r18, r18
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	ba 01       	movw	r22, r20
    1fc0:	a9 01       	movw	r20, r18
    1fc2:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <memcpy>

  newFrame->state = NWK_TX_STATE_SEND;
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	21 e1       	ldi	r18, 0x11	; 17
    1fcc:	fc 01       	movw	r30, r24
    1fce:	20 83       	st	Z, r18
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd4:	81 58       	subi	r24, 0x81	; 129
    1fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd8:	fc 01       	movw	r30, r24
    1fda:	10 82       	st	Z, r1

  newFrame->data.header.macFcf = 0x8841;
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	21 e4       	ldi	r18, 0x41	; 65
    1fe2:	38 e8       	ldi	r19, 0x88	; 136
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	33 83       	std	Z+3, r19	; 0x03
    1fe8:	22 83       	std	Z+2, r18	; 0x02
  newFrame->data.header.macDstAddr = 0xffff;
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	9a 81       	ldd	r25, Y+2	; 0x02
    1fee:	2f ef       	ldi	r18, 0xFF	; 255
    1ff0:	3f ef       	ldi	r19, 0xFF	; 255
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	30 87       	std	Z+8, r19	; 0x08
    1ff6:	27 83       	std	Z+7, r18	; 0x07
  newFrame->data.header.macDstPanId = nwkIb.panId;
    1ff8:	20 91 3f 0b 	lds	r18, 0x0B3F
    1ffc:	30 91 40 0b 	lds	r19, 0x0B40
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	9a 81       	ldd	r25, Y+2	; 0x02
    2004:	fc 01       	movw	r30, r24
    2006:	36 83       	std	Z+6, r19	; 0x06
    2008:	25 83       	std	Z+5, r18	; 0x05
  newFrame->data.header.macSrcAddr = nwkIb.addr;
    200a:	20 91 3d 0b 	lds	r18, 0x0B3D
    200e:	30 91 3e 0b 	lds	r19, 0x0B3E
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	fc 01       	movw	r30, r24
    2018:	32 87       	std	Z+10, r19	; 0x0a
    201a:	21 87       	std	Z+9, r18	; 0x09
  newFrame->data.header.macSeq = ++nwkIb.macSeqNum;
    201c:	80 91 42 0b 	lds	r24, 0x0B42
    2020:	8f 5f       	subi	r24, 0xFF	; 255
    2022:	80 93 42 0b 	sts	0x0B42, r24
    2026:	20 91 42 0b 	lds	r18, 0x0B42
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	9a 81       	ldd	r25, Y+2	; 0x02
    202e:	fc 01       	movw	r30, r24
    2030:	24 83       	std	Z+4, r18	; 0x04

  ++nwkTxActiveFrames;
    2032:	80 91 64 09 	lds	r24, 0x0964
    2036:	8f 5f       	subi	r24, 0xFF	; 255
    2038:	80 93 64 09 	sts	0x0964, r24
    203c:	01 c0       	rjmp	.+2      	; 0x2040 <nwkTxBroadcastFrame+0xdc>
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc(frame->size - sizeof(NwkFrameHeader_t))))
    return;
    203e:	00 00       	nop
  newFrame->data.header.macDstPanId = nwkIb.panId;
  newFrame->data.header.macSrcAddr = nwkIb.addr;
  newFrame->data.header.macSeq = ++nwkIb.macSeqNum;

  ++nwkTxActiveFrames;
}
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	08 95       	ret

0000204e <nwkTxBroadcastConf>:

/*****************************************************************************
*****************************************************************************/
static void nwkTxBroadcastConf(NwkFrame_t *frame)
{
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	00 d0       	rcall	.+0      	; 0x2054 <nwkTxBroadcastConf+0x6>
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
  nwkFrameFree(frame);
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	0e 94 3c 07 	call	0xe78	; 0xe78 <nwkFrameFree>
}
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	08 95       	ret

0000206e <nwkTxAckReceived>:

/*****************************************************************************
*****************************************************************************/
void nwkTxAckReceived(NWK_DataInd_t *ind)
{
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	28 97       	sbiw	r28, 0x08	; 8
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	98 87       	std	Y+8, r25	; 0x08
    2084:	8f 83       	std	Y+7, r24	; 0x07
  NwkAckCommand_t *command = (NwkAckCommand_t *)ind->data;
    2086:	8f 81       	ldd	r24, Y+7	; 0x07
    2088:	98 85       	ldd	r25, Y+8	; 0x08
    208a:	fc 01       	movw	r30, r24
    208c:	85 81       	ldd	r24, Z+5	; 0x05
    208e:	96 81       	ldd	r25, Z+6	; 0x06
    2090:	9c 83       	std	Y+4, r25	; 0x04
    2092:	8b 83       	std	Y+3, r24	; 0x03

  if (0 == nwkTxActiveFrames)
    2094:	80 91 64 09 	lds	r24, 0x0964
    2098:	88 23       	and	r24, r24
    209a:	99 f1       	breq	.+102    	; 0x2102 <nwkTxAckReceived+0x94>
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    209c:	1a 82       	std	Y+2, r1	; 0x02
    209e:	19 82       	std	Y+1, r1	; 0x01
    20a0:	2a c0       	rjmp	.+84     	; 0x20f6 <nwkTxAckReceived+0x88>
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	0e 94 4c 07 	call	0xe98	; 0xe98 <nwkFrameByIndex>
    20a8:	9e 83       	std	Y+6, r25	; 0x06
    20aa:	8d 83       	std	Y+5, r24	; 0x05

    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->data.header.nwkSeq == command->seq)
    20ac:	8d 81       	ldd	r24, Y+5	; 0x05
    20ae:	9e 81       	ldd	r25, Y+6	; 0x06
    20b0:	fc 01       	movw	r30, r24
    20b2:	80 81       	ld	r24, Z
    20b4:	84 31       	cpi	r24, 0x14	; 20
    20b6:	d1 f4       	brne	.+52     	; 0x20ec <nwkTxAckReceived+0x7e>
    20b8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ba:	9e 81       	ldd	r25, Y+6	; 0x06
    20bc:	fc 01       	movw	r30, r24
    20be:	24 85       	ldd	r18, Z+12	; 0x0c
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	fc 01       	movw	r30, r24
    20c6:	81 81       	ldd	r24, Z+1	; 0x01
    20c8:	28 17       	cp	r18, r24
    20ca:	81 f4       	brne	.+32     	; 0x20ec <nwkTxAckReceived+0x7e>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	25 e1       	ldi	r18, 0x15	; 21
    20d2:	fc 01       	movw	r30, r24
    20d4:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	9c 81       	ldd	r25, Y+4	; 0x04
    20da:	fc 01       	movw	r30, r24
    20dc:	22 81       	ldd	r18, Z+2	; 0x02
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	9e 81       	ldd	r25, Y+6	; 0x06
    20e2:	8e 57       	subi	r24, 0x7E	; 126
    20e4:	9f 4f       	sbci	r25, 0xFF	; 255
    20e6:	fc 01       	movw	r30, r24
    20e8:	20 83       	st	Z, r18
      return;
    20ea:	0c c0       	rjmp	.+24     	; 0x2104 <nwkTxAckReceived+0x96>
  NwkAckCommand_t *command = (NwkAckCommand_t *)ind->data;

  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	9a 81       	ldd	r25, Y+2	; 0x02
    20f0:	01 96       	adiw	r24, 0x01	; 1
    20f2:	9a 83       	std	Y+2, r25	; 0x02
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	9a 81       	ldd	r25, Y+2	; 0x02
    20fa:	88 30       	cpi	r24, 0x08	; 8
    20fc:	91 05       	cpc	r25, r1
    20fe:	8c f2       	brlt	.-94     	; 0x20a2 <nwkTxAckReceived+0x34>
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <nwkTxAckReceived+0x96>
void nwkTxAckReceived(NWK_DataInd_t *ind)
{
  NwkAckCommand_t *command = (NwkAckCommand_t *)ind->data;

  if (0 == nwkTxActiveFrames)
    return;
    2102:	00 00       	nop
      frame->state = NWK_TX_STATE_CONFIRM;
      frame->tx.control = command->control;
      return;
    }
  }
}
    2104:	28 96       	adiw	r28, 0x08	; 8
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	08 95       	ret

00002116 <nwkTxAckWaitTimerHandler>:
}

/*****************************************************************************
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	00 d0       	rcall	.+0      	; 0x211c <nwkTxAckWaitTimerHandler+0x6>
    211c:	00 d0       	rcall	.+0      	; 0x211e <nwkTxAckWaitTimerHandler+0x8>
    211e:	00 d0       	rcall	.+0      	; 0x2120 <nwkTxAckWaitTimerHandler+0xa>
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
  if (0 == nwkTxActiveFrames)
    2128:	80 91 64 09 	lds	r24, 0x0964
    212c:	88 23       	and	r24, r24
    212e:	09 f4       	brne	.+2      	; 0x2132 <nwkTxAckWaitTimerHandler+0x1c>
    2130:	43 c0       	rjmp	.+134    	; 0x21b8 <nwkTxAckWaitTimerHandler+0xa2>
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    2132:	1a 82       	std	Y+2, r1	; 0x02
    2134:	19 82       	std	Y+1, r1	; 0x01
    2136:	36 c0       	rjmp	.+108    	; 0x21a4 <nwkTxAckWaitTimerHandler+0x8e>
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	0e 94 4c 07 	call	0xe98	; 0xe98 <nwkFrameByIndex>
    213e:	9c 83       	std	Y+4, r25	; 0x04
    2140:	8b 83       	std	Y+3, r24	; 0x03

    if (NWK_TX_STATE_WAIT_ACK == frame->state && 0 == --frame->tx.timeout)
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	9c 81       	ldd	r25, Y+4	; 0x04
    2146:	fc 01       	movw	r30, r24
    2148:	80 81       	ld	r24, Z
    214a:	84 31       	cpi	r24, 0x14	; 20
    214c:	31 f5       	brne	.+76     	; 0x219a <nwkTxAckWaitTimerHandler+0x84>
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	80 58       	subi	r24, 0x80	; 128
    2154:	9f 4f       	sbci	r25, 0xFF	; 255
    2156:	fc 01       	movw	r30, r24
    2158:	80 81       	ld	r24, Z
    215a:	91 81       	ldd	r25, Z+1	; 0x01
    215c:	9c 01       	movw	r18, r24
    215e:	21 50       	subi	r18, 0x01	; 1
    2160:	30 40       	sbci	r19, 0x00	; 0
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	80 58       	subi	r24, 0x80	; 128
    2168:	9f 4f       	sbci	r25, 0xFF	; 255
    216a:	fc 01       	movw	r30, r24
    216c:	31 83       	std	Z+1, r19	; 0x01
    216e:	20 83       	st	Z, r18
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	80 58       	subi	r24, 0x80	; 128
    2176:	9f 4f       	sbci	r25, 0xFF	; 255
    2178:	fc 01       	movw	r30, r24
    217a:	80 81       	ld	r24, Z
    217c:	91 81       	ldd	r25, Z+1	; 0x01
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	61 f4       	brne	.+24     	; 0x219a <nwkTxAckWaitTimerHandler+0x84>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	9c 81       	ldd	r25, Y+4	; 0x04
    2186:	25 e1       	ldi	r18, 0x15	; 21
    2188:	fc 01       	movw	r30, r24
    218a:	20 83       	st	Z, r18
      frame->tx.status = NWK_NO_ACK_STATUS;
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	81 58       	subi	r24, 0x81	; 129
    2192:	9f 4f       	sbci	r25, 0xFF	; 255
    2194:	20 e1       	ldi	r18, 0x10	; 16
    2196:	fc 01       	movw	r30, r24
    2198:	20 83       	st	Z, r18
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	9a 81       	ldd	r25, Y+2	; 0x02
    219e:	01 96       	adiw	r24, 0x01	; 1
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	88 30       	cpi	r24, 0x08	; 8
    21aa:	91 05       	cpc	r25, r1
    21ac:	2c f2       	brlt	.-118    	; 0x2138 <nwkTxAckWaitTimerHandler+0x22>
      frame->state = NWK_TX_STATE_CONFIRM;
      frame->tx.status = NWK_NO_ACK_STATUS;
    }
  }

  SYS_TimerStart(timer);
    21ae:	8d 81       	ldd	r24, Y+5	; 0x05
    21b0:	9e 81       	ldd	r25, Y+6	; 0x06
    21b2:	0e 94 0a 12 	call	0x2414	; 0x2414 <SYS_TimerStart>
    21b6:	01 c0       	rjmp	.+2      	; 0x21ba <nwkTxAckWaitTimerHandler+0xa4>
/*****************************************************************************
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  if (0 == nwkTxActiveFrames)
    return;
    21b8:	00 00       	nop
      frame->tx.status = NWK_NO_ACK_STATUS;
    }
  }

  SYS_TimerStart(timer);
}
    21ba:	26 96       	adiw	r28, 0x06	; 6
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	08 95       	ret

000021cc <convertPhyStatus>:
#endif

/*****************************************************************************
*****************************************************************************/
static uint8_t convertPhyStatus(uint8_t status)
{
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	0f 92       	push	r0
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	89 83       	std	Y+1, r24	; 0x01
  if (TRAC_STATUS_SUCCESS == status ||
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	88 23       	and	r24, r24
    21dc:	31 f0       	breq	.+12     	; 0x21ea <convertPhyStatus+0x1e>
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	81 30       	cpi	r24, 0x01	; 1
    21e2:	19 f0       	breq	.+6      	; 0x21ea <convertPhyStatus+0x1e>
      TRAC_STATUS_SUCCESS_DATA_PENDING == status ||
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	82 30       	cpi	r24, 0x02	; 2
    21e8:	11 f4       	brne	.+4      	; 0x21ee <convertPhyStatus+0x22>
      TRAC_STATUS_SUCCESS_WAIT_FOR_ACK == status)
    return NWK_SUCCESS_STATUS;
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	0b c0       	rjmp	.+22     	; 0x2204 <convertPhyStatus+0x38>

  else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	83 30       	cpi	r24, 0x03	; 3
    21f2:	11 f4       	brne	.+4      	; 0x21f8 <convertPhyStatus+0x2c>
    return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    21f4:	80 e2       	ldi	r24, 0x20	; 32
    21f6:	06 c0       	rjmp	.+12     	; 0x2204 <convertPhyStatus+0x38>

  else if (TRAC_STATUS_NO_ACK == status)
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	85 30       	cpi	r24, 0x05	; 5
    21fc:	11 f4       	brne	.+4      	; 0x2202 <convertPhyStatus+0x36>
    return NWK_PHY_NO_ACK_STATUS;
    21fe:	81 e2       	ldi	r24, 0x21	; 33
    2200:	01 c0       	rjmp	.+2      	; 0x2204 <convertPhyStatus+0x38>

  else
    return NWK_ERROR_STATUS;
    2202:	81 e0       	ldi	r24, 0x01	; 1
}
    2204:	0f 90       	pop	r0
    2206:	df 91       	pop	r29
    2208:	cf 91       	pop	r28
    220a:	08 95       	ret

0000220c <PHY_DataConf>:

/*****************************************************************************
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
    220c:	0f 93       	push	r16
    220e:	1f 93       	push	r17
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	0f 92       	push	r0
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	89 83       	std	Y+1, r24	; 0x01
  nwkTxPhyActiveFrame->tx.status = convertPhyStatus(status);
    221c:	00 91 62 09 	lds	r16, 0x0962
    2220:	10 91 63 09 	lds	r17, 0x0963
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	0e 94 e6 10 	call	0x21cc	; 0x21cc <convertPhyStatus>
    222a:	28 2f       	mov	r18, r24
    222c:	c8 01       	movw	r24, r16
    222e:	81 58       	subi	r24, 0x81	; 129
    2230:	9f 4f       	sbci	r25, 0xFF	; 255
    2232:	fc 01       	movw	r30, r24
    2234:	20 83       	st	Z, r18
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    2236:	80 91 62 09 	lds	r24, 0x0962
    223a:	90 91 63 09 	lds	r25, 0x0963
    223e:	23 e1       	ldi	r18, 0x13	; 19
    2240:	fc 01       	movw	r30, r24
    2242:	20 83       	st	Z, r18
  nwkTxPhyActiveFrame = NULL;
    2244:	10 92 63 09 	sts	0x0963, r1
    2248:	10 92 62 09 	sts	0x0962, r1
}
    224c:	0f 90       	pop	r0
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	1f 91       	pop	r17
    2254:	0f 91       	pop	r16
    2256:	08 95       	ret

00002258 <nwkTxTaskHandler>:

/*****************************************************************************
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	00 d0       	rcall	.+0      	; 0x225e <nwkTxTaskHandler+0x6>
    225e:	00 d0       	rcall	.+0      	; 0x2260 <nwkTxTaskHandler+0x8>
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
  if (0 == nwkTxActiveFrames)
    2264:	80 91 64 09 	lds	r24, 0x0964
    2268:	88 23       	and	r24, r24
    226a:	09 f4       	brne	.+2      	; 0x226e <nwkTxTaskHandler+0x16>
    226c:	a4 c0       	rjmp	.+328    	; 0x23b6 <nwkTxTaskHandler+0x15e>
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    226e:	1a 82       	std	Y+2, r1	; 0x02
    2270:	19 82       	std	Y+1, r1	; 0x01
    2272:	9a c0       	rjmp	.+308    	; 0x23a8 <nwkTxTaskHandler+0x150>
  {
    NwkFrame_t *frame = nwkFrameByIndex(i);
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	0e 94 4c 07 	call	0xe98	; 0xe98 <nwkFrameByIndex>
    227a:	9c 83       	std	Y+4, r25	; 0x04
    227c:	8b 83       	std	Y+3, r24	; 0x03

    switch (frame->state)
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	fc 01       	movw	r30, r24
    2284:	80 81       	ld	r24, Z
    2286:	88 2f       	mov	r24, r24
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	83 31       	cpi	r24, 0x13	; 19
    228c:	91 05       	cpc	r25, r1
    228e:	91 f1       	breq	.+100    	; 0x22f4 <nwkTxTaskHandler+0x9c>
    2290:	84 31       	cpi	r24, 0x14	; 20
    2292:	91 05       	cpc	r25, r1
    2294:	44 f4       	brge	.+16     	; 0x22a6 <nwkTxTaskHandler+0x4e>
    2296:	81 31       	cpi	r24, 0x11	; 17
    2298:	91 05       	cpc	r25, r1
    229a:	71 f0       	breq	.+28     	; 0x22b8 <nwkTxTaskHandler+0x60>
    229c:	82 31       	cpi	r24, 0x12	; 18
    229e:	91 05       	cpc	r25, r1
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <nwkTxTaskHandler+0x4c>
    22a2:	78 c0       	rjmp	.+240    	; 0x2394 <nwkTxTaskHandler+0x13c>
    22a4:	76 c0       	rjmp	.+236    	; 0x2392 <nwkTxTaskHandler+0x13a>
    22a6:	84 31       	cpi	r24, 0x14	; 20
    22a8:	91 05       	cpc	r25, r1
    22aa:	09 f4       	brne	.+2      	; 0x22ae <nwkTxTaskHandler+0x56>
    22ac:	75 c0       	rjmp	.+234    	; 0x2398 <nwkTxTaskHandler+0x140>
    22ae:	85 31       	cpi	r24, 0x15	; 21
    22b0:	91 05       	cpc	r25, r1
    22b2:	09 f4       	brne	.+2      	; 0x22b6 <nwkTxTaskHandler+0x5e>
    22b4:	59 c0       	rjmp	.+178    	; 0x2368 <nwkTxTaskHandler+0x110>
    22b6:	6d c0       	rjmp	.+218    	; 0x2392 <nwkTxTaskHandler+0x13a>
      } break;
#endif

      case NWK_TX_STATE_SEND:
      {
        if (!PHY_Busy())
    22b8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <PHY_Busy>
    22bc:	98 2f       	mov	r25, r24
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	89 27       	eor	r24, r25
    22c2:	88 23       	and	r24, r24
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <nwkTxTaskHandler+0x70>
    22c6:	6a c0       	rjmp	.+212    	; 0x239c <nwkTxTaskHandler+0x144>
        {
          nwkTxPhyActiveFrame = frame;
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	90 93 63 09 	sts	0x0963, r25
    22d0:	80 93 62 09 	sts	0x0962, r24
          frame->state = NWK_TX_STATE_WAIT_CONF;
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	22 e1       	ldi	r18, 0x12	; 18
    22da:	fc 01       	movw	r30, r24
    22dc:	20 83       	st	Z, r18
          PHY_DataReq((uint8_t *)&frame->data, frame->size);
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	9c 81       	ldd	r25, Y+4	; 0x04
    22e2:	02 96       	adiw	r24, 0x02	; 2
    22e4:	2b 81       	ldd	r18, Y+3	; 0x03
    22e6:	3c 81       	ldd	r19, Y+4	; 0x04
    22e8:	f9 01       	movw	r30, r18
    22ea:	21 81       	ldd	r18, Z+1	; 0x01
    22ec:	62 2f       	mov	r22, r18
    22ee:	0e 94 e6 01 	call	0x3cc	; 0x3cc <PHY_DataReq>
        }
      } break;
    22f2:	54 c0       	rjmp	.+168    	; 0x239c <nwkTxTaskHandler+0x144>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	9c 81       	ldd	r25, Y+4	; 0x04
    22f8:	81 58       	subi	r24, 0x81	; 129
    22fa:	9f 4f       	sbci	r25, 0xFF	; 255
    22fc:	fc 01       	movw	r30, r24
    22fe:	80 81       	ld	r24, Z
    2300:	88 23       	and	r24, r24
    2302:	61 f5       	brne	.+88     	; 0x235c <nwkTxTaskHandler+0x104>
        {
          if (frame->data.header.nwkSrcAddr == nwkIb.addr &&
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	9c 81       	ldd	r25, Y+4	; 0x04
    2308:	fc 01       	movw	r30, r24
    230a:	25 85       	ldd	r18, Z+13	; 0x0d
    230c:	36 85       	ldd	r19, Z+14	; 0x0e
    230e:	80 91 3d 0b 	lds	r24, 0x0B3D
    2312:	90 91 3e 0b 	lds	r25, 0x0B3E
    2316:	28 17       	cp	r18, r24
    2318:	39 07       	cpc	r19, r25
    231a:	d1 f4       	brne	.+52     	; 0x2350 <nwkTxTaskHandler+0xf8>
              frame->data.header.nwkFcf.ackRequest)
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->data.header.nwkSrcAddr == nwkIb.addr &&
    2320:	fc 01       	movw	r30, r24
    2322:	83 85       	ldd	r24, Z+11	; 0x0b
    2324:	81 70       	andi	r24, 0x01	; 1
    2326:	88 23       	and	r24, r24
    2328:	99 f0       	breq	.+38     	; 0x2350 <nwkTxTaskHandler+0xf8>
              frame->data.header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	24 e1       	ldi	r18, 0x14	; 20
    2330:	fc 01       	movw	r30, r24
    2332:	20 83       	st	Z, r18
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	9c 81       	ldd	r25, Y+4	; 0x04
    2338:	80 58       	subi	r24, 0x80	; 128
    233a:	9f 4f       	sbci	r25, 0xFF	; 255
    233c:	2b e0       	ldi	r18, 0x0B	; 11
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	fc 01       	movw	r30, r24
    2342:	31 83       	std	Z+1, r19	; 0x01
    2344:	20 83       	st	Z, r18
            SYS_TimerStart(&nwkTxAckWaitTimer);
    2346:	85 e6       	ldi	r24, 0x65	; 101
    2348:	99 e0       	ldi	r25, 0x09	; 9
    234a:	0e 94 0a 12 	call	0x2414	; 0x2414 <SYS_TimerStart>
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
	}
      } break;
    234e:	27 c0       	rjmp	.+78     	; 0x239e <nwkTxTaskHandler+0x146>
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
            SYS_TimerStart(&nwkTxAckWaitTimer);
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	25 e1       	ldi	r18, 0x15	; 21
    2356:	fc 01       	movw	r30, r24
    2358:	20 83       	st	Z, r18
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
	}
      } break;
    235a:	21 c0       	rjmp	.+66     	; 0x239e <nwkTxTaskHandler+0x146>
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	9c 81       	ldd	r25, Y+4	; 0x04
    2360:	25 e1       	ldi	r18, 0x15	; 21
    2362:	fc 01       	movw	r30, r24
    2364:	20 83       	st	Z, r18
	}
      } break;
    2366:	1b c0       	rjmp	.+54     	; 0x239e <nwkTxTaskHandler+0x146>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <nwkRouteFrameSent>
#endif
        frame->tx.confirm(frame);
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	9c 81       	ldd	r25, Y+4	; 0x04
    2374:	8d 57       	subi	r24, 0x7D	; 125
    2376:	9f 4f       	sbci	r25, 0xFF	; 255
    2378:	fc 01       	movw	r30, r24
    237a:	20 81       	ld	r18, Z
    237c:	31 81       	ldd	r19, Z+1	; 0x01
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	9c 81       	ldd	r25, Y+4	; 0x04
    2382:	f9 01       	movw	r30, r18
    2384:	09 95       	icall
        --nwkTxActiveFrames;
    2386:	80 91 64 09 	lds	r24, 0x0964
    238a:	81 50       	subi	r24, 0x01	; 1
    238c:	80 93 64 09 	sts	0x0964, r24
      } break;
    2390:	06 c0       	rjmp	.+12     	; 0x239e <nwkTxTaskHandler+0x146>

      default:
        break;
    2392:	05 c0       	rjmp	.+10     	; 0x239e <nwkTxTaskHandler+0x146>
          PHY_DataReq((uint8_t *)&frame->data, frame->size);
        }
      } break;

      case NWK_TX_STATE_WAIT_CONF:
        break;
    2394:	00 00       	nop
    2396:	03 c0       	rjmp	.+6      	; 0x239e <nwkTxTaskHandler+0x146>
          frame->state = NWK_TX_STATE_CONFIRM;
	}
      } break;

      case NWK_TX_STATE_WAIT_ACK:
        break;
    2398:	00 00       	nop
    239a:	01 c0       	rjmp	.+2      	; 0x239e <nwkTxTaskHandler+0x146>
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
          PHY_DataReq((uint8_t *)&frame->data, frame->size);
        }
      } break;
    239c:	00 00       	nop
void nwkTxTaskHandler(void)
{
  if (0 == nwkTxActiveFrames)
    return;

  for (int i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	9a 81       	ldd	r25, Y+2	; 0x02
    23a2:	01 96       	adiw	r24, 0x01	; 1
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	88 30       	cpi	r24, 0x08	; 8
    23ae:	91 05       	cpc	r25, r1
    23b0:	0c f4       	brge	.+2      	; 0x23b4 <nwkTxTaskHandler+0x15c>
    23b2:	60 cf       	rjmp	.-320    	; 0x2274 <nwkTxTaskHandler+0x1c>
    23b4:	01 c0       	rjmp	.+2      	; 0x23b8 <nwkTxTaskHandler+0x160>
/*****************************************************************************
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  if (0 == nwkTxActiveFrames)
    return;
    23b6:	00 00       	nop

      default:
        break;
    };
  }
}
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	08 95       	ret

000023c6 <SYS_Init>:
#include "sysTimer.h"

/*****************************************************************************
*****************************************************************************/
void SYS_Init(void)
{
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
  HAL_Init();
    23ce:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <HAL_Init>
  SYS_TimerInit();
    23d2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <SYS_TimerInit>
  PHY_Init();
    23d6:	0e 94 3b 01 	call	0x276	; 0x276 <PHY_Init>
  NWK_Init();
    23da:	0e 94 5d 04 	call	0x8ba	; 0x8ba <NWK_Init>
}
    23de:	df 91       	pop	r29
    23e0:	cf 91       	pop	r28
    23e2:	08 95       	ret

000023e4 <SYS_TaskHandler>:

/*****************************************************************************
*****************************************************************************/
void SYS_TaskHandler(void)
{
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
  PHY_TaskHandler();
    23ec:	0e 94 28 03 	call	0x650	; 0x650 <PHY_TaskHandler>
  NWK_TaskHandler();
    23f0:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    23f4:	0e 94 c2 12 	call	0x2584	; 0x2584 <SYS_TimerTaskHandler>
}
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	08 95       	ret

000023fe <SYS_TimerInit>:
static SYS_Timer_t *timers;

/*****************************************************************************
*****************************************************************************/
void SYS_TimerInit(void)
{
    23fe:	cf 93       	push	r28
    2400:	df 93       	push	r29
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
  timers = NULL;
    2406:	10 92 73 09 	sts	0x0973, r1
    240a:	10 92 72 09 	sts	0x0972, r1
}
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	08 95       	ret

00002414 <SYS_TimerStart>:

/*****************************************************************************
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	00 d0       	rcall	.+0      	; 0x241a <SYS_TimerStart+0x6>
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01
  if (!SYS_TimerStarted(timer))
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	9a 81       	ldd	r25, Y+2	; 0x02
    2426:	0e 94 97 12 	call	0x252e	; 0x252e <SYS_TimerStarted>
    242a:	98 2f       	mov	r25, r24
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	89 27       	eor	r24, r25
    2430:	88 23       	and	r24, r24
    2432:	21 f0       	breq	.+8      	; 0x243c <SYS_TimerStart+0x28>
    placeTimer(timer);
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	0e 94 82 13 	call	0x2704	; 0x2704 <placeTimer>
}
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	08 95       	ret

00002446 <SYS_TimerStop>:

/*****************************************************************************
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	00 d0       	rcall	.+0      	; 0x244c <SYS_TimerStop+0x6>
    244c:	00 d0       	rcall	.+0      	; 0x244e <SYS_TimerStop+0x8>
    244e:	00 d0       	rcall	.+0      	; 0x2450 <SYS_TimerStop+0xa>
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	9e 83       	std	Y+6, r25	; 0x06
    2456:	8d 83       	std	Y+5, r24	; 0x05
  SYS_Timer_t *prev = NULL;
    2458:	1a 82       	std	Y+2, r1	; 0x02
    245a:	19 82       	std	Y+1, r1	; 0x01

  for (SYS_Timer_t *t = timers; t; t = t->next)
    245c:	80 91 72 09 	lds	r24, 0x0972
    2460:	90 91 73 09 	lds	r25, 0x0973
    2464:	9c 83       	std	Y+4, r25	; 0x04
    2466:	8b 83       	std	Y+3, r24	; 0x03
    2468:	52 c0       	rjmp	.+164    	; 0x250e <SYS_TimerStop+0xc8>
  {
    if (t == timer)
    246a:	2b 81       	ldd	r18, Y+3	; 0x03
    246c:	3c 81       	ldd	r19, Y+4	; 0x04
    246e:	8d 81       	ldd	r24, Y+5	; 0x05
    2470:	9e 81       	ldd	r25, Y+6	; 0x06
    2472:	28 17       	cp	r18, r24
    2474:	39 07       	cpc	r19, r25
    2476:	09 f0       	breq	.+2      	; 0x247a <SYS_TimerStop+0x34>
    2478:	3f c0       	rjmp	.+126    	; 0x24f8 <SYS_TimerStop+0xb2>
    {
      if (prev)
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	59 f0       	breq	.+22     	; 0x2498 <SYS_TimerStop+0x52>
        prev->next = t->next;
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	9c 81       	ldd	r25, Y+4	; 0x04
    2486:	fc 01       	movw	r30, r24
    2488:	20 81       	ld	r18, Z
    248a:	31 81       	ldd	r19, Z+1	; 0x01
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	9a 81       	ldd	r25, Y+2	; 0x02
    2490:	fc 01       	movw	r30, r24
    2492:	31 83       	std	Z+1, r19	; 0x01
    2494:	20 83       	st	Z, r18
    2496:	09 c0       	rjmp	.+18     	; 0x24aa <SYS_TimerStop+0x64>
      else
        timers = t->next;
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	9c 81       	ldd	r25, Y+4	; 0x04
    249c:	fc 01       	movw	r30, r24
    249e:	80 81       	ld	r24, Z
    24a0:	91 81       	ldd	r25, Z+1	; 0x01
    24a2:	90 93 73 09 	sts	0x0973, r25
    24a6:	80 93 72 09 	sts	0x0972, r24

      if (t->next)
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	9c 81       	ldd	r25, Y+4	; 0x04
    24ae:	fc 01       	movw	r30, r24
    24b0:	80 81       	ld	r24, Z
    24b2:	91 81       	ldd	r25, Z+1	; 0x01
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	89 f1       	breq	.+98     	; 0x251a <SYS_TimerStop+0xd4>
        t->next->timeout += timer->timeout;
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	fc 01       	movw	r30, r24
    24be:	60 81       	ld	r22, Z
    24c0:	71 81       	ldd	r23, Z+1	; 0x01
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	9c 81       	ldd	r25, Y+4	; 0x04
    24c6:	fc 01       	movw	r30, r24
    24c8:	80 81       	ld	r24, Z
    24ca:	91 81       	ldd	r25, Z+1	; 0x01
    24cc:	fc 01       	movw	r30, r24
    24ce:	22 81       	ldd	r18, Z+2	; 0x02
    24d0:	33 81       	ldd	r19, Z+3	; 0x03
    24d2:	44 81       	ldd	r20, Z+4	; 0x04
    24d4:	55 81       	ldd	r21, Z+5	; 0x05
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	fc 01       	movw	r30, r24
    24dc:	82 81       	ldd	r24, Z+2	; 0x02
    24de:	93 81       	ldd	r25, Z+3	; 0x03
    24e0:	a4 81       	ldd	r26, Z+4	; 0x04
    24e2:	b5 81       	ldd	r27, Z+5	; 0x05
    24e4:	82 0f       	add	r24, r18
    24e6:	93 1f       	adc	r25, r19
    24e8:	a4 1f       	adc	r26, r20
    24ea:	b5 1f       	adc	r27, r21
    24ec:	fb 01       	movw	r30, r22
    24ee:	82 83       	std	Z+2, r24	; 0x02
    24f0:	93 83       	std	Z+3, r25	; 0x03
    24f2:	a4 83       	std	Z+4, r26	; 0x04
    24f4:	b5 83       	std	Z+5, r27	; 0x05

      break;
    24f6:	11 c0       	rjmp	.+34     	; 0x251a <SYS_TimerStop+0xd4>
    }
    prev = t;
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	9c 81       	ldd	r25, Y+4	; 0x04
    24fc:	9a 83       	std	Y+2, r25	; 0x02
    24fe:	89 83       	std	Y+1, r24	; 0x01
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	9c 81       	ldd	r25, Y+4	; 0x04
    2504:	fc 01       	movw	r30, r24
    2506:	80 81       	ld	r24, Z
    2508:	91 81       	ldd	r25, Z+1	; 0x01
    250a:	9c 83       	std	Y+4, r25	; 0x04
    250c:	8b 83       	std	Y+3, r24	; 0x03
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	9c 81       	ldd	r25, Y+4	; 0x04
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	09 f0       	breq	.+2      	; 0x2518 <SYS_TimerStop+0xd2>
    2516:	a9 cf       	rjmp	.-174    	; 0x246a <SYS_TimerStop+0x24>
    2518:	01 c0       	rjmp	.+2      	; 0x251c <SYS_TimerStop+0xd6>
        timers = t->next;

      if (t->next)
        t->next->timeout += timer->timeout;

      break;
    251a:	00 00       	nop
    }
    prev = t;
  }
}
    251c:	26 96       	adiw	r28, 0x06	; 6
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	08 95       	ret

0000252e <SYS_TimerStarted>:

/*****************************************************************************
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	00 d0       	rcall	.+0      	; 0x2534 <SYS_TimerStarted+0x6>
    2534:	00 d0       	rcall	.+0      	; 0x2536 <SYS_TimerStarted+0x8>
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	9c 83       	std	Y+4, r25	; 0x04
    253c:	8b 83       	std	Y+3, r24	; 0x03
  for (SYS_Timer_t *t = timers; t; t = t->next)
    253e:	80 91 72 09 	lds	r24, 0x0972
    2542:	90 91 73 09 	lds	r25, 0x0973
    2546:	9a 83       	std	Y+2, r25	; 0x02
    2548:	89 83       	std	Y+1, r24	; 0x01
    254a:	10 c0       	rjmp	.+32     	; 0x256c <SYS_TimerStarted+0x3e>
    if (t == timer)
    254c:	29 81       	ldd	r18, Y+1	; 0x01
    254e:	3a 81       	ldd	r19, Y+2	; 0x02
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	9c 81       	ldd	r25, Y+4	; 0x04
    2554:	28 17       	cp	r18, r24
    2556:	39 07       	cpc	r19, r25
    2558:	11 f4       	brne	.+4      	; 0x255e <SYS_TimerStarted+0x30>
      return true;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	0c c0       	rjmp	.+24     	; 0x2576 <SYS_TimerStarted+0x48>

/*****************************************************************************
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	9a 81       	ldd	r25, Y+2	; 0x02
    2562:	fc 01       	movw	r30, r24
    2564:	80 81       	ld	r24, Z
    2566:	91 81       	ldd	r25, Z+1	; 0x01
    2568:	9a 83       	std	Y+2, r25	; 0x02
    256a:	89 83       	std	Y+1, r24	; 0x01
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	9a 81       	ldd	r25, Y+2	; 0x02
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	61 f7       	brne	.-40     	; 0x254c <SYS_TimerStarted+0x1e>
    if (t == timer)
      return true;
  return false;
    2574:	80 e0       	ldi	r24, 0x00	; 0
}
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
    2582:	08 95       	ret

00002584 <SYS_TimerTaskHandler>:

/*****************************************************************************
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    2584:	ef 92       	push	r14
    2586:	ff 92       	push	r15
    2588:	0f 93       	push	r16
    258a:	1f 93       	push	r17
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	28 97       	sbiw	r28, 0x08	; 8
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	cd bf       	out	0x3d, r28	; 61
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    25a0:	80 91 3c 0b 	lds	r24, 0x0B3C
    25a4:	88 23       	and	r24, r24
    25a6:	09 f4       	brne	.+2      	; 0x25aa <SYS_TimerTaskHandler+0x26>
    25a8:	9f c0       	rjmp	.+318    	; 0x26e8 <SYS_TimerTaskHandler+0x164>
    return;

  ATOMIC_SECTION_ENTER
    25aa:	8f e5       	ldi	r24, 0x5F	; 95
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	fc 01       	movw	r30, r24
    25b0:	80 81       	ld	r24, Z
    25b2:	8d 83       	std	Y+5, r24	; 0x05
    25b4:	f8 94       	cli
    cnt = halTimerIrqCount;
    25b6:	80 91 3c 0b 	lds	r24, 0x0B3C
    25ba:	8e 83       	std	Y+6, r24	; 0x06
    halTimerIrqCount = 0;
    25bc:	10 92 3c 0b 	sts	0x0B3C, r1
  ATOMIC_SECTION_LEAVE
    25c0:	8f e5       	ldi	r24, 0x5F	; 95
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	2d 81       	ldd	r18, Y+5	; 0x05
    25c6:	fc 01       	movw	r30, r24
    25c8:	20 83       	st	Z, r18

  elapsed = cnt * HAL_TIMER_INTERVAL;
    25ca:	8e 81       	ldd	r24, Y+6	; 0x06
    25cc:	88 2f       	mov	r24, r24
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	a0 e0       	ldi	r26, 0x00	; 0
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	2a e0       	ldi	r18, 0x0A	; 10
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e0       	ldi	r20, 0x00	; 0
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	bc 01       	movw	r22, r24
    25de:	cd 01       	movw	r24, r26
    25e0:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__mulsi3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	9a 83       	std	Y+2, r25	; 0x02
    25ec:	ab 83       	std	Y+3, r26	; 0x03
    25ee:	bc 83       	std	Y+4, r27	; 0x04

  while (timers && (timers->timeout <= elapsed))
    25f0:	3d c0       	rjmp	.+122    	; 0x266c <SYS_TimerTaskHandler+0xe8>
  {
    SYS_Timer_t *timer = timers;
    25f2:	80 91 72 09 	lds	r24, 0x0972
    25f6:	90 91 73 09 	lds	r25, 0x0973
    25fa:	98 87       	std	Y+8, r25	; 0x08
    25fc:	8f 83       	std	Y+7, r24	; 0x07

    elapsed -= timers->timeout;
    25fe:	80 91 72 09 	lds	r24, 0x0972
    2602:	90 91 73 09 	lds	r25, 0x0973
    2606:	fc 01       	movw	r30, r24
    2608:	82 81       	ldd	r24, Z+2	; 0x02
    260a:	93 81       	ldd	r25, Z+3	; 0x03
    260c:	a4 81       	ldd	r26, Z+4	; 0x04
    260e:	b5 81       	ldd	r27, Z+5	; 0x05
    2610:	29 81       	ldd	r18, Y+1	; 0x01
    2612:	3a 81       	ldd	r19, Y+2	; 0x02
    2614:	4b 81       	ldd	r20, Y+3	; 0x03
    2616:	5c 81       	ldd	r21, Y+4	; 0x04
    2618:	79 01       	movw	r14, r18
    261a:	8a 01       	movw	r16, r20
    261c:	e8 1a       	sub	r14, r24
    261e:	f9 0a       	sbc	r15, r25
    2620:	0a 0b       	sbc	r16, r26
    2622:	1b 0b       	sbc	r17, r27
    2624:	d8 01       	movw	r26, r16
    2626:	c7 01       	movw	r24, r14
    2628:	89 83       	std	Y+1, r24	; 0x01
    262a:	9a 83       	std	Y+2, r25	; 0x02
    262c:	ab 83       	std	Y+3, r26	; 0x03
    262e:	bc 83       	std	Y+4, r27	; 0x04
    timers = timers->next;
    2630:	80 91 72 09 	lds	r24, 0x0972
    2634:	90 91 73 09 	lds	r25, 0x0973
    2638:	fc 01       	movw	r30, r24
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	90 93 73 09 	sts	0x0973, r25
    2642:	80 93 72 09 	sts	0x0972, r24
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    2646:	8f 81       	ldd	r24, Y+7	; 0x07
    2648:	98 85       	ldd	r25, Y+8	; 0x08
    264a:	fc 01       	movw	r30, r24
    264c:	82 85       	ldd	r24, Z+10	; 0x0a
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	21 f4       	brne	.+8      	; 0x265a <SYS_TimerTaskHandler+0xd6>
      placeTimer(timer);
    2652:	8f 81       	ldd	r24, Y+7	; 0x07
    2654:	98 85       	ldd	r25, Y+8	; 0x08
    2656:	0e 94 82 13 	call	0x2704	; 0x2704 <placeTimer>
    timer->handler(timer);
    265a:	8f 81       	ldd	r24, Y+7	; 0x07
    265c:	98 85       	ldd	r25, Y+8	; 0x08
    265e:	fc 01       	movw	r30, r24
    2660:	23 85       	ldd	r18, Z+11	; 0x0b
    2662:	34 85       	ldd	r19, Z+12	; 0x0c
    2664:	8f 81       	ldd	r24, Y+7	; 0x07
    2666:	98 85       	ldd	r25, Y+8	; 0x08
    2668:	f9 01       	movw	r30, r18
    266a:	09 95       	icall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    266c:	80 91 72 09 	lds	r24, 0x0972
    2670:	90 91 73 09 	lds	r25, 0x0973
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	99 f0       	breq	.+38     	; 0x269e <SYS_TimerTaskHandler+0x11a>
    2678:	80 91 72 09 	lds	r24, 0x0972
    267c:	90 91 73 09 	lds	r25, 0x0973
    2680:	fc 01       	movw	r30, r24
    2682:	22 81       	ldd	r18, Z+2	; 0x02
    2684:	33 81       	ldd	r19, Z+3	; 0x03
    2686:	44 81       	ldd	r20, Z+4	; 0x04
    2688:	55 81       	ldd	r21, Z+5	; 0x05
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	ab 81       	ldd	r26, Y+3	; 0x03
    2690:	bc 81       	ldd	r27, Y+4	; 0x04
    2692:	82 17       	cp	r24, r18
    2694:	93 07       	cpc	r25, r19
    2696:	a4 07       	cpc	r26, r20
    2698:	b5 07       	cpc	r27, r21
    269a:	08 f0       	brcs	.+2      	; 0x269e <SYS_TimerTaskHandler+0x11a>
    269c:	aa cf       	rjmp	.-172    	; 0x25f2 <SYS_TimerTaskHandler+0x6e>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    269e:	80 91 72 09 	lds	r24, 0x0972
    26a2:	90 91 73 09 	lds	r25, 0x0973
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	01 f1       	breq	.+64     	; 0x26ea <SYS_TimerTaskHandler+0x166>
    timers->timeout -= elapsed;
    26aa:	60 91 72 09 	lds	r22, 0x0972
    26ae:	70 91 73 09 	lds	r23, 0x0973
    26b2:	80 91 72 09 	lds	r24, 0x0972
    26b6:	90 91 73 09 	lds	r25, 0x0973
    26ba:	fc 01       	movw	r30, r24
    26bc:	22 81       	ldd	r18, Z+2	; 0x02
    26be:	33 81       	ldd	r19, Z+3	; 0x03
    26c0:	44 81       	ldd	r20, Z+4	; 0x04
    26c2:	55 81       	ldd	r21, Z+5	; 0x05
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	9a 81       	ldd	r25, Y+2	; 0x02
    26c8:	ab 81       	ldd	r26, Y+3	; 0x03
    26ca:	bc 81       	ldd	r27, Y+4	; 0x04
    26cc:	79 01       	movw	r14, r18
    26ce:	8a 01       	movw	r16, r20
    26d0:	e8 1a       	sub	r14, r24
    26d2:	f9 0a       	sbc	r15, r25
    26d4:	0a 0b       	sbc	r16, r26
    26d6:	1b 0b       	sbc	r17, r27
    26d8:	d8 01       	movw	r26, r16
    26da:	c7 01       	movw	r24, r14
    26dc:	fb 01       	movw	r30, r22
    26de:	82 83       	std	Z+2, r24	; 0x02
    26e0:	93 83       	std	Z+3, r25	; 0x03
    26e2:	a4 83       	std	Z+4, r26	; 0x04
    26e4:	b5 83       	std	Z+5, r27	; 0x05
    26e6:	01 c0       	rjmp	.+2      	; 0x26ea <SYS_TimerTaskHandler+0x166>
{
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    return;
    26e8:	00 00       	nop
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
}
    26ea:	28 96       	adiw	r28, 0x08	; 8
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	1f 91       	pop	r17
    26fc:	0f 91       	pop	r16
    26fe:	ff 90       	pop	r15
    2700:	ef 90       	pop	r14
    2702:	08 95       	ret

00002704 <placeTimer>:

/*****************************************************************************
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2704:	ef 92       	push	r14
    2706:	ff 92       	push	r15
    2708:	0f 93       	push	r16
    270a:	1f 93       	push	r17
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	2a 97       	sbiw	r28, 0x0a	; 10
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	9a 87       	std	Y+10, r25	; 0x0a
    2722:	89 87       	std	Y+9, r24	; 0x09
  if (timers)
    2724:	80 91 72 09 	lds	r24, 0x0972
    2728:	90 91 73 09 	lds	r25, 0x0973
    272c:	00 97       	sbiw	r24, 0x00	; 0
    272e:	09 f4       	brne	.+2      	; 0x2732 <placeTimer+0x2e>
    2730:	97 c0       	rjmp	.+302    	; 0x2860 <placeTimer+0x15c>
  {
    SYS_Timer_t *prev = NULL;
    2732:	1a 82       	std	Y+2, r1	; 0x02
    2734:	19 82       	std	Y+1, r1	; 0x01
    uint32_t timeout = timer->interval;
    2736:	89 85       	ldd	r24, Y+9	; 0x09
    2738:	9a 85       	ldd	r25, Y+10	; 0x0a
    273a:	fc 01       	movw	r30, r24
    273c:	86 81       	ldd	r24, Z+6	; 0x06
    273e:	97 81       	ldd	r25, Z+7	; 0x07
    2740:	a0 85       	ldd	r26, Z+8	; 0x08
    2742:	b1 85       	ldd	r27, Z+9	; 0x09
    2744:	8b 83       	std	Y+3, r24	; 0x03
    2746:	9c 83       	std	Y+4, r25	; 0x04
    2748:	ad 83       	std	Y+5, r26	; 0x05
    274a:	be 83       	std	Y+6, r27	; 0x06

    for (SYS_Timer_t *t = timers; t; t = t->next)
    274c:	80 91 72 09 	lds	r24, 0x0972
    2750:	90 91 73 09 	lds	r25, 0x0973
    2754:	98 87       	std	Y+8, r25	; 0x08
    2756:	8f 83       	std	Y+7, r24	; 0x07
    2758:	4d c0       	rjmp	.+154    	; 0x27f4 <placeTimer+0xf0>
    {
      if (timeout < t->timeout)
    275a:	8f 81       	ldd	r24, Y+7	; 0x07
    275c:	98 85       	ldd	r25, Y+8	; 0x08
    275e:	fc 01       	movw	r30, r24
    2760:	22 81       	ldd	r18, Z+2	; 0x02
    2762:	33 81       	ldd	r19, Z+3	; 0x03
    2764:	44 81       	ldd	r20, Z+4	; 0x04
    2766:	55 81       	ldd	r21, Z+5	; 0x05
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	9c 81       	ldd	r25, Y+4	; 0x04
    276c:	ad 81       	ldd	r26, Y+5	; 0x05
    276e:	be 81       	ldd	r27, Y+6	; 0x06
    2770:	82 17       	cp	r24, r18
    2772:	93 07       	cpc	r25, r19
    2774:	a4 07       	cpc	r26, r20
    2776:	b5 07       	cpc	r27, r21
    2778:	d8 f4       	brcc	.+54     	; 0x27b0 <placeTimer+0xac>
      {
         t->timeout -= timeout;
    277a:	8f 81       	ldd	r24, Y+7	; 0x07
    277c:	98 85       	ldd	r25, Y+8	; 0x08
    277e:	fc 01       	movw	r30, r24
    2780:	22 81       	ldd	r18, Z+2	; 0x02
    2782:	33 81       	ldd	r19, Z+3	; 0x03
    2784:	44 81       	ldd	r20, Z+4	; 0x04
    2786:	55 81       	ldd	r21, Z+5	; 0x05
    2788:	8b 81       	ldd	r24, Y+3	; 0x03
    278a:	9c 81       	ldd	r25, Y+4	; 0x04
    278c:	ad 81       	ldd	r26, Y+5	; 0x05
    278e:	be 81       	ldd	r27, Y+6	; 0x06
    2790:	79 01       	movw	r14, r18
    2792:	8a 01       	movw	r16, r20
    2794:	e8 1a       	sub	r14, r24
    2796:	f9 0a       	sbc	r15, r25
    2798:	0a 0b       	sbc	r16, r26
    279a:	1b 0b       	sbc	r17, r27
    279c:	d8 01       	movw	r26, r16
    279e:	c7 01       	movw	r24, r14
    27a0:	2f 81       	ldd	r18, Y+7	; 0x07
    27a2:	38 85       	ldd	r19, Y+8	; 0x08
    27a4:	f9 01       	movw	r30, r18
    27a6:	82 83       	std	Z+2, r24	; 0x02
    27a8:	93 83       	std	Z+3, r25	; 0x03
    27aa:	a4 83       	std	Z+4, r26	; 0x04
    27ac:	b5 83       	std	Z+5, r27	; 0x05
         break;
    27ae:	27 c0       	rjmp	.+78     	; 0x27fe <placeTimer+0xfa>
      }
      else
        timeout -= t->timeout;
    27b0:	8f 81       	ldd	r24, Y+7	; 0x07
    27b2:	98 85       	ldd	r25, Y+8	; 0x08
    27b4:	fc 01       	movw	r30, r24
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	93 81       	ldd	r25, Z+3	; 0x03
    27ba:	a4 81       	ldd	r26, Z+4	; 0x04
    27bc:	b5 81       	ldd	r27, Z+5	; 0x05
    27be:	2b 81       	ldd	r18, Y+3	; 0x03
    27c0:	3c 81       	ldd	r19, Y+4	; 0x04
    27c2:	4d 81       	ldd	r20, Y+5	; 0x05
    27c4:	5e 81       	ldd	r21, Y+6	; 0x06
    27c6:	79 01       	movw	r14, r18
    27c8:	8a 01       	movw	r16, r20
    27ca:	e8 1a       	sub	r14, r24
    27cc:	f9 0a       	sbc	r15, r25
    27ce:	0a 0b       	sbc	r16, r26
    27d0:	1b 0b       	sbc	r17, r27
    27d2:	d8 01       	movw	r26, r16
    27d4:	c7 01       	movw	r24, r14
    27d6:	8b 83       	std	Y+3, r24	; 0x03
    27d8:	9c 83       	std	Y+4, r25	; 0x04
    27da:	ad 83       	std	Y+5, r26	; 0x05
    27dc:	be 83       	std	Y+6, r27	; 0x06

      prev = t;
    27de:	8f 81       	ldd	r24, Y+7	; 0x07
    27e0:	98 85       	ldd	r25, Y+8	; 0x08
    27e2:	9a 83       	std	Y+2, r25	; 0x02
    27e4:	89 83       	std	Y+1, r24	; 0x01
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    27e6:	8f 81       	ldd	r24, Y+7	; 0x07
    27e8:	98 85       	ldd	r25, Y+8	; 0x08
    27ea:	fc 01       	movw	r30, r24
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	98 87       	std	Y+8, r25	; 0x08
    27f2:	8f 83       	std	Y+7, r24	; 0x07
    27f4:	8f 81       	ldd	r24, Y+7	; 0x07
    27f6:	98 85       	ldd	r25, Y+8	; 0x08
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	09 f0       	breq	.+2      	; 0x27fe <placeTimer+0xfa>
    27fc:	ae cf       	rjmp	.-164    	; 0x275a <placeTimer+0x56>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    27fe:	29 85       	ldd	r18, Y+9	; 0x09
    2800:	3a 85       	ldd	r19, Y+10	; 0x0a
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	ad 81       	ldd	r26, Y+5	; 0x05
    2808:	be 81       	ldd	r27, Y+6	; 0x06
    280a:	f9 01       	movw	r30, r18
    280c:	82 83       	std	Z+2, r24	; 0x02
    280e:	93 83       	std	Z+3, r25	; 0x03
    2810:	a4 83       	std	Z+4, r26	; 0x04
    2812:	b5 83       	std	Z+5, r27	; 0x05

    if (prev)
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	9a 81       	ldd	r25, Y+2	; 0x02
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	91 f0       	breq	.+36     	; 0x2840 <placeTimer+0x13c>
    {
      timer->next = prev->next;
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	9a 81       	ldd	r25, Y+2	; 0x02
    2820:	fc 01       	movw	r30, r24
    2822:	20 81       	ld	r18, Z
    2824:	31 81       	ldd	r19, Z+1	; 0x01
    2826:	89 85       	ldd	r24, Y+9	; 0x09
    2828:	9a 85       	ldd	r25, Y+10	; 0x0a
    282a:	fc 01       	movw	r30, r24
    282c:	31 83       	std	Z+1, r19	; 0x01
    282e:	20 83       	st	Z, r18
      prev->next = timer;
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	9a 81       	ldd	r25, Y+2	; 0x02
    2834:	29 85       	ldd	r18, Y+9	; 0x09
    2836:	3a 85       	ldd	r19, Y+10	; 0x0a
    2838:	fc 01       	movw	r30, r24
    283a:	31 83       	std	Z+1, r19	; 0x01
    283c:	20 83       	st	Z, r18
    283e:	29 c0       	rjmp	.+82     	; 0x2892 <placeTimer+0x18e>
    }
    else
    {
      timer->next = timers;
    2840:	20 91 72 09 	lds	r18, 0x0972
    2844:	30 91 73 09 	lds	r19, 0x0973
    2848:	89 85       	ldd	r24, Y+9	; 0x09
    284a:	9a 85       	ldd	r25, Y+10	; 0x0a
    284c:	fc 01       	movw	r30, r24
    284e:	31 83       	std	Z+1, r19	; 0x01
    2850:	20 83       	st	Z, r18
      timers = timer;
    2852:	89 85       	ldd	r24, Y+9	; 0x09
    2854:	9a 85       	ldd	r25, Y+10	; 0x0a
    2856:	90 93 73 09 	sts	0x0973, r25
    285a:	80 93 72 09 	sts	0x0972, r24
    285e:	19 c0       	rjmp	.+50     	; 0x2892 <placeTimer+0x18e>
    }
  }
  else
  {
    timer->next = NULL;
    2860:	89 85       	ldd	r24, Y+9	; 0x09
    2862:	9a 85       	ldd	r25, Y+10	; 0x0a
    2864:	fc 01       	movw	r30, r24
    2866:	11 82       	std	Z+1, r1	; 0x01
    2868:	10 82       	st	Z, r1
    timer->timeout = timer->interval;
    286a:	89 85       	ldd	r24, Y+9	; 0x09
    286c:	9a 85       	ldd	r25, Y+10	; 0x0a
    286e:	fc 01       	movw	r30, r24
    2870:	86 81       	ldd	r24, Z+6	; 0x06
    2872:	97 81       	ldd	r25, Z+7	; 0x07
    2874:	a0 85       	ldd	r26, Z+8	; 0x08
    2876:	b1 85       	ldd	r27, Z+9	; 0x09
    2878:	29 85       	ldd	r18, Y+9	; 0x09
    287a:	3a 85       	ldd	r19, Y+10	; 0x0a
    287c:	f9 01       	movw	r30, r18
    287e:	82 83       	std	Z+2, r24	; 0x02
    2880:	93 83       	std	Z+3, r25	; 0x03
    2882:	a4 83       	std	Z+4, r26	; 0x04
    2884:	b5 83       	std	Z+5, r27	; 0x05
    timers = timer;
    2886:	89 85       	ldd	r24, Y+9	; 0x09
    2888:	9a 85       	ldd	r25, Y+10	; 0x0a
    288a:	90 93 73 09 	sts	0x0973, r25
    288e:	80 93 72 09 	sts	0x0972, r24
  }
}
    2892:	2a 96       	adiw	r28, 0x0a	; 10
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	df 91       	pop	r29
    28a0:	cf 91       	pop	r28
    28a2:	1f 91       	pop	r17
    28a4:	0f 91       	pop	r16
    28a6:	ff 90       	pop	r15
    28a8:	ef 90       	pop	r14
    28aa:	08 95       	ret

000028ac <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    28ac:	cf 93       	push	r28
    28ae:	df 93       	push	r29
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    cli();
    28b4:	f8 94       	cli
    return 1;
    28b6:	81 e0       	ldi	r24, 0x01	; 1
}
    28b8:	df 91       	pop	r29
    28ba:	cf 91       	pop	r28
    28bc:	08 95       	ret

000028be <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    28be:	cf 93       	push	r28
    28c0:	df 93       	push	r29
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <__iRestore+0x6>
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	9a 83       	std	Y+2, r25	; 0x02
    28ca:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
    28cc:	8f e5       	ldi	r24, 0x5F	; 95
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	29 81       	ldd	r18, Y+1	; 0x01
    28d2:	3a 81       	ldd	r19, Y+2	; 0x02
    28d4:	f9 01       	movw	r30, r18
    28d6:	20 81       	ld	r18, Z
    28d8:	fc 01       	movw	r30, r24
    28da:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	df 91       	pop	r29
    28e2:	cf 91       	pop	r28
    28e4:	08 95       	ret

000028e6 <appAddrConf>:
		Function implementations
*****************************************************************************/
/*****************************************************************************
*****************************************************************************/
static void appAddrConf(NWK_DataReq_t *req)
{
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
    28ea:	00 d0       	rcall	.+0      	; 0x28ec <appAddrConf+0x6>
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
    28f0:	9a 83       	std	Y+2, r25	; 0x02
    28f2:	89 83       	std	Y+1, r24	; 0x01
	appDataReqBusy = false;
    28f4:	10 92 da 09 	sts	0x09DA, r1
}
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	08 95       	ret

00002902 <appSendAddr>:

/*****************************************************************************
*****************************************************************************/
static void appSendAddr(void)
{
    2902:	cf 93       	push	r28
    2904:	df 93       	push	r29
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
	if (appDataReqBusy || 0 == appWorkingBufferPtr)
    290a:	80 91 da 09 	lds	r24, 0x09DA
    290e:	88 23       	and	r24, r24
    2910:	c1 f5       	brne	.+112    	; 0x2982 <appSendAddr+0x80>
    2912:	80 91 b7 0a 	lds	r24, 0x0AB7
    2916:	88 23       	and	r24, r24
    2918:	a1 f1       	breq	.+104    	; 0x2982 <appSendAddr+0x80>
		return;

	memcpy(appDataReqBuffer, appWorkingBuffer, appWorkingBufferPtr);
    291a:	80 91 b7 0a 	lds	r24, 0x0AB7
    291e:	28 2f       	mov	r18, r24
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	8d ed       	ldi	r24, 0xDD	; 221
    2924:	99 e0       	ldi	r25, 0x09	; 9
    2926:	4a e4       	ldi	r20, 0x4A	; 74
    2928:	5a e0       	ldi	r21, 0x0A	; 10
    292a:	ba 01       	movw	r22, r20
    292c:	a9 01       	movw	r20, r18
    292e:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <memcpy>

	appDataReq.dstAddr = BROADCAST_ADDR;
    2932:	8f ef       	ldi	r24, 0xFF	; 255
    2934:	9f ef       	ldi	r25, 0xFF	; 255
    2936:	90 93 be 09 	sts	0x09BE, r25
    293a:	80 93 bd 09 	sts	0x09BD, r24
	appDataReq.dstEndpoint = Mote_Addr_ENDPOINT;
    293e:	84 e0       	ldi	r24, 0x04	; 4
    2940:	80 93 bf 09 	sts	0x09BF, r24
	appDataReq.srcEndpoint = Mote_Addr_ENDPOINT;
    2944:	84 e0       	ldi	r24, 0x04	; 4
    2946:	80 93 c0 09 	sts	0x09C0, r24
	appDataReq.options = 0;
    294a:	10 92 c1 09 	sts	0x09C1, r1
	appDataReq.data = appWorkingBuffer;
    294e:	8a e4       	ldi	r24, 0x4A	; 74
    2950:	9a e0       	ldi	r25, 0x0A	; 10
    2952:	90 93 c3 09 	sts	0x09C3, r25
    2956:	80 93 c2 09 	sts	0x09C2, r24
	appDataReq.size = appWorkingBufferPtr;
    295a:	80 91 b7 0a 	lds	r24, 0x0AB7
    295e:	80 93 c4 09 	sts	0x09C4, r24
	appDataReq.confirm = appAddrConf;
    2962:	83 e7       	ldi	r24, 0x73	; 115
    2964:	94 e1       	ldi	r25, 0x14	; 20
    2966:	90 93 c6 09 	sts	0x09C6, r25
    296a:	80 93 c5 09 	sts	0x09C5, r24
	NWK_DataReq(&appDataReq);
    296e:	88 eb       	ldi	r24, 0xB8	; 184
    2970:	99 e0       	ldi	r25, 0x09	; 9
    2972:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <NWK_DataReq>

	appWorkingBufferPtr = 0;
    2976:	10 92 b7 0a 	sts	0x0AB7, r1
	appDataReqBusy = true;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	80 93 da 09 	sts	0x09DA, r24
    2980:	01 c0       	rjmp	.+2      	; 0x2984 <appSendAddr+0x82>
/*****************************************************************************
*****************************************************************************/
static void appSendAddr(void)
{
	if (appDataReqBusy || 0 == appWorkingBufferPtr)
		return;
    2982:	00 00       	nop
	appDataReq.confirm = appAddrConf;
	NWK_DataReq(&appDataReq);

	appWorkingBufferPtr = 0;
	appDataReqBusy = true;
}
    2984:	df 91       	pop	r29
    2986:	cf 91       	pop	r28
    2988:	08 95       	ret

0000298a <appSyncConf>:

/*****************************************************************************
*****************************************************************************/
static void appSyncConf(NWK_DataReq_t *req)
{
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	00 d0       	rcall	.+0      	; 0x2990 <appSyncConf+0x6>
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
    2994:	9a 83       	std	Y+2, r25	; 0x02
    2996:	89 83       	std	Y+1, r24	; 0x01
	appSyncReqBusy = false;
    2998:	10 92 db 09 	sts	0x09DB, r1
}
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	08 95       	ret

000029a6 <appSendSync>:

/*****************************************************************************
*****************************************************************************/
static void appSendSync(void)
{
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	00 d0       	rcall	.+0      	; 0x29ac <appSendSync+0x6>
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
	if (appSyncReqBusy)
    29b0:	80 91 db 09 	lds	r24, 0x09DB
    29b4:	88 23       	and	r24, r24
    29b6:	09 f0       	breq	.+2      	; 0x29ba <appSendSync+0x14>
    29b8:	82 c0       	rjmp	.+260    	; 0x2abe <appSendSync+0x118>
		return;

//	memcpy(appDataReqBuffer, appWorkingBuffer, appWorkingBufferPtr);
	appWorkingBufferPtr = 1;
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	80 93 b7 0a 	sts	0x0AB7, r24
	appSyncReq.dstAddr = BROADCAST_ADDR;
    29c0:	8f ef       	ldi	r24, 0xFF	; 255
    29c2:	9f ef       	ldi	r25, 0xFF	; 255
    29c4:	90 93 cf 09 	sts	0x09CF, r25
    29c8:	80 93 ce 09 	sts	0x09CE, r24
	appSyncReq.dstEndpoint = SyncCmd_ENDPOINT;
    29cc:	82 e0       	ldi	r24, 0x02	; 2
    29ce:	80 93 d0 09 	sts	0x09D0, r24
	appSyncReq.srcEndpoint = SyncCmd_ENDPOINT;
    29d2:	82 e0       	ldi	r24, 0x02	; 2
    29d4:	80 93 d1 09 	sts	0x09D1, r24
	appSyncReq.options = 0;
    29d8:	10 92 d2 09 	sts	0x09D2, r1
	appSyncReq.data = appWorkingBuffer;
    29dc:	8a e4       	ldi	r24, 0x4A	; 74
    29de:	9a e0       	ldi	r25, 0x0A	; 10
    29e0:	90 93 d4 09 	sts	0x09D4, r25
    29e4:	80 93 d3 09 	sts	0x09D3, r24
	appSyncReq.size = appWorkingBufferPtr;
    29e8:	80 91 b7 0a 	lds	r24, 0x0AB7
    29ec:	80 93 d5 09 	sts	0x09D5, r24
	appSyncReq.confirm = appSyncConf;
    29f0:	85 ec       	ldi	r24, 0xC5	; 197
    29f2:	94 e1       	ldi	r25, 0x14	; 20
    29f4:	90 93 d7 09 	sts	0x09D7, r25
    29f8:	80 93 d6 09 	sts	0x09D6, r24
	NWK_DataReq(&appSyncReq);
    29fc:	89 ec       	ldi	r24, 0xC9	; 201
    29fe:	99 e0       	ldi	r25, 0x09	; 9
    2a00:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <NWK_DataReq>

	appWorkingBufferPtr = 0;
    2a04:	10 92 b7 0a 	sts	0x0AB7, r1
	appSyncReqBusy = true;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	80 93 db 09 	sts	0x09DB, r24
	
// Clear the timeout flag so we don't switch to local mode
	cmdTimeout = false;
    2a0e:	10 92 dc 09 	sts	0x09DC, r1
// Turn on the sync command flag
	syncOn = true;
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	80 93 ce 0a 	sts	0x0ACE, r24
// Set the mode to locked to command node
	appState = APP_STATE_LOCAL;
    2a18:	83 e0       	ldi	r24, 0x03	; 3
    2a1a:	80 93 76 09 	sts	0x0976, r24
// Sync mode is preset local accelerating throb
	currentLEDmode = THROB;
    2a1e:	84 e0       	ldi	r24, 0x04	; 4
    2a20:	80 93 2f 0b 	sts	0x0B2F, r24
	throbDelta = 2;
    2a24:	82 e0       	ldi	r24, 0x02	; 2
    2a26:	80 93 c5 0a 	sts	0x0AC5, r24
	throbFade = 1;
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	80 93 c7 0a 	sts	0x0AC7, r24
	for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    2a30:	1a 82       	std	Y+2, r1	; 0x02
    2a32:	19 82       	std	Y+1, r1	; 0x01
    2a34:	2f c0       	rjmp	.+94     	; 0x2a94 <appSendSync+0xee>
	{
		LEDarray[LED_ptr] = 0;				// Green
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3a:	81 53       	subi	r24, 0x31	; 49
    2a3c:	95 4f       	sbci	r25, 0xF5	; 245
    2a3e:	fc 01       	movw	r30, r24
    2a40:	10 82       	st	Z, r1
		LEDpattern[LED_ptr] = 0;			// Green
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	9a 81       	ldd	r25, Y+2	; 0x02
    2a46:	81 50       	subi	r24, 0x01	; 1
    2a48:	95 4f       	sbci	r25, 0xF5	; 245
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	10 82       	st	Z, r1
		LEDarray[LED_ptr+1] = 0;			// Red
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	9a 81       	ldd	r25, Y+2	; 0x02
    2a52:	01 96       	adiw	r24, 0x01	; 1
    2a54:	81 53       	subi	r24, 0x31	; 49
    2a56:	95 4f       	sbci	r25, 0xF5	; 245
    2a58:	fc 01       	movw	r30, r24
    2a5a:	10 82       	st	Z, r1
		LEDpattern[LED_ptr+1] = 0;			// Red
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a60:	01 96       	adiw	r24, 0x01	; 1
    2a62:	81 50       	subi	r24, 0x01	; 1
    2a64:	95 4f       	sbci	r25, 0xF5	; 245
    2a66:	fc 01       	movw	r30, r24
    2a68:	10 82       	st	Z, r1
		LEDarray[LED_ptr+2] = 196;			// Blue
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6e:	02 96       	adiw	r24, 0x02	; 2
    2a70:	81 53       	subi	r24, 0x31	; 49
    2a72:	95 4f       	sbci	r25, 0xF5	; 245
    2a74:	24 ec       	ldi	r18, 0xC4	; 196
    2a76:	fc 01       	movw	r30, r24
    2a78:	20 83       	st	Z, r18
		LEDpattern[LED_ptr+2] = 196;		// Blue
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7e:	02 96       	adiw	r24, 0x02	; 2
    2a80:	81 50       	subi	r24, 0x01	; 1
    2a82:	95 4f       	sbci	r25, 0xF5	; 245
    2a84:	24 ec       	ldi	r18, 0xC4	; 196
    2a86:	fc 01       	movw	r30, r24
    2a88:	20 83       	st	Z, r18
	appState = APP_STATE_LOCAL;
// Sync mode is preset local accelerating throb
	currentLEDmode = THROB;
	throbDelta = 2;
	throbFade = 1;
	for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8e:	03 96       	adiw	r24, 0x03	; 3
    2a90:	9a 83       	std	Y+2, r25	; 0x02
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	9a 81       	ldd	r25, Y+2	; 0x02
    2a98:	80 33       	cpi	r24, 0x30	; 48
    2a9a:	91 05       	cpc	r25, r1
    2a9c:	64 f2       	brlt	.-104    	; 0x2a36 <appSendSync+0x90>
		LEDarray[LED_ptr+1] = 0;			// Red
		LEDpattern[LED_ptr+1] = 0;			// Red
		LEDarray[LED_ptr+2] = 196;			// Blue
		LEDpattern[LED_ptr+2] = 196;		// Blue
	}
	animationTimer.interval = 125;
    2a9e:	8d e7       	ldi	r24, 0x7D	; 125
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a0 e0       	ldi	r26, 0x00	; 0
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	80 93 8a 09 	sts	0x098A, r24
    2aaa:	90 93 8b 09 	sts	0x098B, r25
    2aae:	a0 93 8c 09 	sts	0x098C, r26
    2ab2:	b0 93 8d 09 	sts	0x098D, r27
	throbTimerAccel = 1;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	80 93 c8 0a 	sts	0x0AC8, r24
    2abc:	01 c0       	rjmp	.+2      	; 0x2ac0 <appSendSync+0x11a>
/*****************************************************************************
*****************************************************************************/
static void appSendSync(void)
{
	if (appSyncReqBusy)
		return;
    2abe:	00 00       	nop
		LEDpattern[LED_ptr+2] = 196;		// Blue
	}
	animationTimer.interval = 125;
	throbTimerAccel = 1;

}
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	08 95       	ret

00002aca <addrCheckTimerHandler>:

/*****************************************************************************
*****************************************************************************/
static void addrCheckTimerHandler(SYS_Timer_t *timer)
{
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	00 d0       	rcall	.+0      	; 0x2ad0 <addrCheckTimerHandler+0x6>
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
    2ad4:	9a 83       	std	Y+2, r25	; 0x02
    2ad6:	89 83       	std	Y+1, r24	; 0x01
}
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	df 91       	pop	r29
    2ade:	cf 91       	pop	r28
    2ae0:	08 95       	ret

00002ae2 <accelerationTimerHandler>:

/*****************************************************************************
*****************************************************************************/
static void accelerationTimerHandler(SYS_Timer_t *timer)
{
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	00 d0       	rcall	.+0      	; 0x2ae8 <accelerationTimerHandler+0x6>
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	9a 83       	std	Y+2, r25	; 0x02
    2aee:	89 83       	std	Y+1, r24	; 0x01
	if (currentLEDmode == THROB)
    2af0:	80 91 2f 0b 	lds	r24, 0x0B2F
    2af4:	84 30       	cpi	r24, 0x04	; 4
    2af6:	09 f0       	breq	.+2      	; 0x2afa <accelerationTimerHandler+0x18>
    2af8:	41 c0       	rjmp	.+130    	; 0x2b7c <accelerationTimerHandler+0x9a>
	{
		if (throbTimerAccel != 0)		// Update the throb period if accelerating
    2afa:	80 91 c8 0a 	lds	r24, 0x0AC8
    2afe:	88 23       	and	r24, r24
    2b00:	e9 f1       	breq	.+122    	; 0x2b7c <accelerationTimerHandler+0x9a>
		{
			if (animationTimerPeriod > 50)
    2b02:	80 91 cb 0a 	lds	r24, 0x0ACB
    2b06:	90 91 cc 0a 	lds	r25, 0x0ACC
    2b0a:	83 33       	cpi	r24, 0x33	; 51
    2b0c:	91 05       	cpc	r25, r1
    2b0e:	68 f1       	brcs	.+90     	; 0x2b6a <accelerationTimerHandler+0x88>
			{
				animationTimerPeriod -= throbTimerAccel;
    2b10:	20 91 cb 0a 	lds	r18, 0x0ACB
    2b14:	30 91 cc 0a 	lds	r19, 0x0ACC
    2b18:	80 91 c8 0a 	lds	r24, 0x0AC8
    2b1c:	88 2f       	mov	r24, r24
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	a9 01       	movw	r20, r18
    2b22:	48 1b       	sub	r20, r24
    2b24:	59 0b       	sbc	r21, r25
    2b26:	ca 01       	movw	r24, r20
    2b28:	90 93 cc 0a 	sts	0x0ACC, r25
    2b2c:	80 93 cb 0a 	sts	0x0ACB, r24
				if (animationTimerPeriod < 50)
    2b30:	80 91 cb 0a 	lds	r24, 0x0ACB
    2b34:	90 91 cc 0a 	lds	r25, 0x0ACC
    2b38:	82 33       	cpi	r24, 0x32	; 50
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	30 f4       	brcc	.+12     	; 0x2b4a <accelerationTimerHandler+0x68>
				animationTimerPeriod = 50;
    2b3e:	82 e3       	ldi	r24, 0x32	; 50
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	90 93 cc 0a 	sts	0x0ACC, r25
    2b46:	80 93 cb 0a 	sts	0x0ACB, r24
				animationTimer.interval = animationTimerPeriod;
    2b4a:	80 91 cb 0a 	lds	r24, 0x0ACB
    2b4e:	90 91 cc 0a 	lds	r25, 0x0ACC
    2b52:	cc 01       	movw	r24, r24
    2b54:	a0 e0       	ldi	r26, 0x00	; 0
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	80 93 8a 09 	sts	0x098A, r24
    2b5c:	90 93 8b 09 	sts	0x098B, r25
    2b60:	a0 93 8c 09 	sts	0x098C, r26
    2b64:	b0 93 8d 09 	sts	0x098D, r27
    2b68:	09 c0       	rjmp	.+18     	; 0x2b7c <accelerationTimerHandler+0x9a>
			} else if (throbDelta < 5)
    2b6a:	80 91 c5 0a 	lds	r24, 0x0AC5
    2b6e:	85 30       	cpi	r24, 0x05	; 5
    2b70:	28 f4       	brcc	.+10     	; 0x2b7c <accelerationTimerHandler+0x9a>
			{
				throbDelta++;
    2b72:	80 91 c5 0a 	lds	r24, 0x0AC5
    2b76:	8f 5f       	subi	r24, 0xFF	; 255
    2b78:	80 93 c5 0a 	sts	0x0AC5, r24
			}
		}
	}
}
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	df 91       	pop	r29
    2b82:	cf 91       	pop	r28
    2b84:	08 95       	ret

00002b86 <channelTimerHandler>:
/*****************************************************************************
	Callback function from the timer subsystem.  The timer is set to periodically
	invoke this function when scanning for a channel with a controller on it.
*****************************************************************************/
static void channelTimerHandler(SYS_Timer_t *timer)
{
    2b86:	cf 93       	push	r28
    2b88:	df 93       	push	r29
    2b8a:	00 d0       	rcall	.+0      	; 0x2b8c <channelTimerHandler+0x6>
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	9a 83       	std	Y+2, r25	; 0x02
    2b92:	89 83       	std	Y+1, r24	; 0x01
//	If this timer goes off, it means that no commands were received on the current
//	channel (in LOCAL mode), and the node should switch to the next channel
	currentChannel++;
    2b94:	80 91 b8 0a 	lds	r24, 0x0AB8
    2b98:	8f 5f       	subi	r24, 0xFF	; 255
    2b9a:	80 93 b8 0a 	sts	0x0AB8, r24
	if (currentChannel > HIGH_CHANNEL)
    2b9e:	80 91 b8 0a 	lds	r24, 0x0AB8
    2ba2:	8b 31       	cpi	r24, 0x1B	; 27
    2ba4:	18 f0       	brcs	.+6      	; 0x2bac <channelTimerHandler+0x26>
		currentChannel = LOW_CHANNEL;
    2ba6:	8b e0       	ldi	r24, 0x0B	; 11
    2ba8:	80 93 b8 0a 	sts	0x0AB8, r24
	PHY_SetChannel(currentChannel);
    2bac:	80 91 b8 0a 	lds	r24, 0x0AB8
    2bb0:	0e 94 92 01 	call	0x324	; 0x324 <PHY_SetChannel>
}
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	df 91       	pop	r29
    2bba:	cf 91       	pop	r28
    2bbc:	08 95       	ret

00002bbe <cmdTimerHandler>:
/*****************************************************************************
	Callback function from the timer subsystem.  The timer is set to periodically
	invoke this function to update something.
*****************************************************************************/
static void cmdTimerHandler(SYS_Timer_t *timer)
{
    2bbe:	cf 93       	push	r28
    2bc0:	df 93       	push	r29
    2bc2:	00 d0       	rcall	.+0      	; 0x2bc4 <cmdTimerHandler+0x6>
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <cmdTimerHandler+0x8>
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	9c 83       	std	Y+4, r25	; 0x04
    2bcc:	8b 83       	std	Y+3, r24	; 0x03
// If the cmdTimeout flag is set when this timer goes off, it means that no commands
// have been received since the last time.  In that case, this node switches into the
// default local mode.
	if (cmdTimeout)
    2bce:	80 91 dc 09 	lds	r24, 0x09DC
    2bd2:	88 23       	and	r24, r24
    2bd4:	09 f4       	brne	.+2      	; 0x2bd8 <cmdTimerHandler+0x1a>
    2bd6:	57 c0       	rjmp	.+174    	; 0x2c86 <cmdTimerHandler+0xc8>
	{
		appState = APP_STATE_LOCAL;
    2bd8:	83 e0       	ldi	r24, 0x03	; 3
    2bda:	80 93 76 09 	sts	0x0976, r24
		SYS_TimerStart(&channelTimer);
    2bde:	8b ea       	ldi	r24, 0xAB	; 171
    2be0:	99 e0       	ldi	r25, 0x09	; 9
    2be2:	0e 94 0a 12 	call	0x2414	; 0x2414 <SYS_TimerStart>
//		Put the LEDs to sleep to save power
		currentLEDmode = THROB;
    2be6:	84 e0       	ldi	r24, 0x04	; 4
    2be8:	80 93 2f 0b 	sts	0x0B2F, r24
		throbDelta = 2;
    2bec:	82 e0       	ldi	r24, 0x02	; 2
    2bee:	80 93 c5 0a 	sts	0x0AC5, r24
		throbFade = 1;
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	80 93 c7 0a 	sts	0x0AC7, r24
		for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    2bf8:	1a 82       	std	Y+2, r1	; 0x02
    2bfa:	19 82       	std	Y+1, r1	; 0x01
    2bfc:	2f c0       	rjmp	.+94     	; 0x2c5c <cmdTimerHandler+0x9e>
		{
			LEDarray[LED_ptr] = 0;				// Green
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	9a 81       	ldd	r25, Y+2	; 0x02
    2c02:	81 53       	subi	r24, 0x31	; 49
    2c04:	95 4f       	sbci	r25, 0xF5	; 245
    2c06:	fc 01       	movw	r30, r24
    2c08:	10 82       	st	Z, r1
			LEDpattern[LED_ptr] = 0;			// Green
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0e:	81 50       	subi	r24, 0x01	; 1
    2c10:	95 4f       	sbci	r25, 0xF5	; 245
    2c12:	fc 01       	movw	r30, r24
    2c14:	10 82       	st	Z, r1
			LEDarray[LED_ptr+1] = 0;			// Red
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1a:	01 96       	adiw	r24, 0x01	; 1
    2c1c:	81 53       	subi	r24, 0x31	; 49
    2c1e:	95 4f       	sbci	r25, 0xF5	; 245
    2c20:	fc 01       	movw	r30, r24
    2c22:	10 82       	st	Z, r1
			LEDpattern[LED_ptr+1] = 0;			// Red
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	9a 81       	ldd	r25, Y+2	; 0x02
    2c28:	01 96       	adiw	r24, 0x01	; 1
    2c2a:	81 50       	subi	r24, 0x01	; 1
    2c2c:	95 4f       	sbci	r25, 0xF5	; 245
    2c2e:	fc 01       	movw	r30, r24
    2c30:	10 82       	st	Z, r1
			LEDarray[LED_ptr+2] = 196;			// Blue
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	9a 81       	ldd	r25, Y+2	; 0x02
    2c36:	02 96       	adiw	r24, 0x02	; 2
    2c38:	81 53       	subi	r24, 0x31	; 49
    2c3a:	95 4f       	sbci	r25, 0xF5	; 245
    2c3c:	24 ec       	ldi	r18, 0xC4	; 196
    2c3e:	fc 01       	movw	r30, r24
    2c40:	20 83       	st	Z, r18
			LEDpattern[LED_ptr+2] = 196;		// Blue
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	9a 81       	ldd	r25, Y+2	; 0x02
    2c46:	02 96       	adiw	r24, 0x02	; 2
    2c48:	81 50       	subi	r24, 0x01	; 1
    2c4a:	95 4f       	sbci	r25, 0xF5	; 245
    2c4c:	24 ec       	ldi	r18, 0xC4	; 196
    2c4e:	fc 01       	movw	r30, r24
    2c50:	20 83       	st	Z, r18
		SYS_TimerStart(&channelTimer);
//		Put the LEDs to sleep to save power
		currentLEDmode = THROB;
		throbDelta = 2;
		throbFade = 1;
		for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	9a 81       	ldd	r25, Y+2	; 0x02
    2c56:	03 96       	adiw	r24, 0x03	; 3
    2c58:	9a 83       	std	Y+2, r25	; 0x02
    2c5a:	89 83       	std	Y+1, r24	; 0x01
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c60:	80 33       	cpi	r24, 0x30	; 48
    2c62:	91 05       	cpc	r25, r1
    2c64:	64 f2       	brlt	.-104    	; 0x2bfe <cmdTimerHandler+0x40>
			LEDarray[LED_ptr+1] = 0;			// Red
			LEDpattern[LED_ptr+1] = 0;			// Red
			LEDarray[LED_ptr+2] = 196;			// Blue
			LEDpattern[LED_ptr+2] = 196;		// Blue
		}
		animationTimer.interval = 125;
    2c66:	8d e7       	ldi	r24, 0x7D	; 125
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	a0 e0       	ldi	r26, 0x00	; 0
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	80 93 8a 09 	sts	0x098A, r24
    2c72:	90 93 8b 09 	sts	0x098B, r25
    2c76:	a0 93 8c 09 	sts	0x098C, r26
    2c7a:	b0 93 8d 09 	sts	0x098D, r27
		throbTimerAccel = 1;
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	80 93 c8 0a 	sts	0x0AC8, r24
    2c84:	07 c0       	rjmp	.+14     	; 0x2c94 <cmdTimerHandler+0xd6>
// is set again to see if a command is received in the next timer interval.  So the node
// is periodically checking to see that some command has been received from outside in
// the mesh.  As long as something is going on, it will not drop into the local default mode.
	} else
	{
		cmdTimeout = true;
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	80 93 dc 09 	sts	0x09DC, r24
		SYS_TimerStop(&channelTimer);
    2c8c:	8b ea       	ldi	r24, 0xAB	; 171
    2c8e:	99 e0       	ldi	r25, 0x09	; 9
    2c90:	0e 94 23 12 	call	0x2446	; 0x2446 <SYS_TimerStop>
	}
}
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	08 95       	ret

00002ca2 <appLEDAnimationTimerHandler>:
/*****************************************************************************
	Callback function from the timer subsystem.  The timer is set to periodically
	invoke this function to update the LED pattern according to the current mode.
*****************************************************************************/
static void appLEDAnimationTimerHandler(SYS_Timer_t *timer)
{
    2ca2:	0f 93       	push	r16
    2ca4:	1f 93       	push	r17
    2ca6:	cf 93       	push	r28
    2ca8:	df 93       	push	r29
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	64 97       	sbiw	r28, 0x14	; 20
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	de bf       	out	0x3e, r29	; 62
    2cb6:	0f be       	out	0x3f, r0	; 63
    2cb8:	cd bf       	out	0x3d, r28	; 61
    2cba:	9c 8b       	std	Y+20, r25	; 0x14
    2cbc:	8b 8b       	std	Y+19, r24	; 0x13
	switch(currentLEDmode)
    2cbe:	80 91 2f 0b 	lds	r24, 0x0B2F
    2cc2:	88 2f       	mov	r24, r24
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	83 30       	cpi	r24, 0x03	; 3
    2cc8:	91 05       	cpc	r25, r1
    2cca:	09 f4       	brne	.+2      	; 0x2cce <appLEDAnimationTimerHandler+0x2c>
    2ccc:	4f c1       	rjmp	.+670    	; 0x2f6c <appLEDAnimationTimerHandler+0x2ca>
    2cce:	84 30       	cpi	r24, 0x04	; 4
    2cd0:	91 05       	cpc	r25, r1
    2cd2:	5c f4       	brge	.+22     	; 0x2cea <appLEDAnimationTimerHandler+0x48>
    2cd4:	81 30       	cpi	r24, 0x01	; 1
    2cd6:	91 05       	cpc	r25, r1
    2cd8:	09 f4       	brne	.+2      	; 0x2cdc <appLEDAnimationTimerHandler+0x3a>
    2cda:	59 c0       	rjmp	.+178    	; 0x2d8e <appLEDAnimationTimerHandler+0xec>
    2cdc:	82 30       	cpi	r24, 0x02	; 2
    2cde:	91 05       	cpc	r25, r1
    2ce0:	ac f4       	brge	.+42     	; 0x2d0c <appLEDAnimationTimerHandler+0x6a>
    2ce2:	00 97       	sbiw	r24, 0x00	; 0
    2ce4:	09 f4       	brne	.+2      	; 0x2ce8 <appLEDAnimationTimerHandler+0x46>
    2ce6:	5b c2       	rjmp	.+1206   	; 0x319e <appLEDAnimationTimerHandler+0x4fc>
    2ce8:	58 c2       	rjmp	.+1200   	; 0x319a <appLEDAnimationTimerHandler+0x4f8>
    2cea:	85 30       	cpi	r24, 0x05	; 5
    2cec:	91 05       	cpc	r25, r1
    2cee:	09 f4       	brne	.+2      	; 0x2cf2 <appLEDAnimationTimerHandler+0x50>
    2cf0:	86 c1       	rjmp	.+780    	; 0x2ffe <appLEDAnimationTimerHandler+0x35c>
    2cf2:	85 30       	cpi	r24, 0x05	; 5
    2cf4:	91 05       	cpc	r25, r1
    2cf6:	0c f4       	brge	.+2      	; 0x2cfa <appLEDAnimationTimerHandler+0x58>
    2cf8:	a1 c0       	rjmp	.+322    	; 0x2e3c <appLEDAnimationTimerHandler+0x19a>
    2cfa:	86 30       	cpi	r24, 0x06	; 6
    2cfc:	91 05       	cpc	r25, r1
    2cfe:	09 f4       	brne	.+2      	; 0x2d02 <appLEDAnimationTimerHandler+0x60>
    2d00:	ff c1       	rjmp	.+1022   	; 0x3100 <appLEDAnimationTimerHandler+0x45e>
    2d02:	87 30       	cpi	r24, 0x07	; 7
    2d04:	91 05       	cpc	r25, r1
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <appLEDAnimationTimerHandler+0x68>
    2d08:	28 c2       	rjmp	.+1104   	; 0x315a <appLEDAnimationTimerHandler+0x4b8>
    2d0a:	47 c2       	rjmp	.+1166   	; 0x319a <appLEDAnimationTimerHandler+0x4f8>
		} break;
		case FLASH:
		{
//			This animation simply alternates between the provided pattern and all LEDs off
//			The flashState variable keeps track of whether LEDs should be on or off on this cycle
			if (flashState == 0)
    2d0c:	80 91 c0 0a 	lds	r24, 0x0AC0
    2d10:	88 23       	and	r24, r24
    2d12:	29 f5       	brne	.+74     	; 0x2d5e <appLEDAnimationTimerHandler+0xbc>
			{
				flashState = 1;
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	80 93 c0 0a 	sts	0x0AC0, r24
				for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    2d1a:	1a 82       	std	Y+2, r1	; 0x02
    2d1c:	19 82       	std	Y+1, r1	; 0x01
    2d1e:	19 c0       	rjmp	.+50     	; 0x2d52 <appLEDAnimationTimerHandler+0xb0>
				{
					LEDarray[LED_ptr] = 0;
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	9a 81       	ldd	r25, Y+2	; 0x02
    2d24:	81 53       	subi	r24, 0x31	; 49
    2d26:	95 4f       	sbci	r25, 0xF5	; 245
    2d28:	fc 01       	movw	r30, r24
    2d2a:	10 82       	st	Z, r1
					LEDarray[LED_ptr+1] = 0;
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d30:	01 96       	adiw	r24, 0x01	; 1
    2d32:	81 53       	subi	r24, 0x31	; 49
    2d34:	95 4f       	sbci	r25, 0xF5	; 245
    2d36:	fc 01       	movw	r30, r24
    2d38:	10 82       	st	Z, r1
					LEDarray[LED_ptr+2] = 0;
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3e:	02 96       	adiw	r24, 0x02	; 2
    2d40:	81 53       	subi	r24, 0x31	; 49
    2d42:	95 4f       	sbci	r25, 0xF5	; 245
    2d44:	fc 01       	movw	r30, r24
    2d46:	10 82       	st	Z, r1
//			This animation simply alternates between the provided pattern and all LEDs off
//			The flashState variable keeps track of whether LEDs should be on or off on this cycle
			if (flashState == 0)
			{
				flashState = 1;
				for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4c:	03 96       	adiw	r24, 0x03	; 3
    2d4e:	9a 83       	std	Y+2, r25	; 0x02
    2d50:	89 83       	std	Y+1, r24	; 0x01
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	9a 81       	ldd	r25, Y+2	; 0x02
    2d56:	80 33       	cpi	r24, 0x30	; 48
    2d58:	91 05       	cpc	r25, r1
    2d5a:	14 f3       	brlt	.-60     	; 0x2d20 <appLEDAnimationTimerHandler+0x7e>
    2d5c:	11 c0       	rjmp	.+34     	; 0x2d80 <appLEDAnimationTimerHandler+0xde>
					LEDarray[LED_ptr+1] = 0;
					LEDarray[LED_ptr+2] = 0;
				}
			} else
			{
				flashState = 0;
    2d5e:	10 92 c0 0a 	sts	0x0AC0, r1
				memcpy(LEDarray,LEDpattern,NUM_LEDS*3);
    2d62:	8f ec       	ldi	r24, 0xCF	; 207
    2d64:	9a e0       	ldi	r25, 0x0A	; 10
    2d66:	2f ef       	ldi	r18, 0xFF	; 255
    2d68:	3a e0       	ldi	r19, 0x0A	; 10
    2d6a:	40 e3       	ldi	r20, 0x30	; 48
    2d6c:	f9 01       	movw	r30, r18
    2d6e:	00 80       	ld	r0, Z
    2d70:	2f 5f       	subi	r18, 0xFF	; 255
    2d72:	3f 4f       	sbci	r19, 0xFF	; 255
    2d74:	fc 01       	movw	r30, r24
    2d76:	00 82       	st	Z, r0
    2d78:	01 96       	adiw	r24, 0x01	; 1
    2d7a:	41 50       	subi	r20, 0x01	; 1
    2d7c:	44 23       	and	r20, r20
    2d7e:	b1 f7       	brne	.-20     	; 0x2d6c <appLEDAnimationTimerHandler+0xca>
			}

			updateLEDs(LEDarray, NUM_LEDS*3);
    2d80:	8f ec       	ldi	r24, 0xCF	; 207
    2d82:	9a e0       	ldi	r25, 0x0A	; 10
    2d84:	60 e3       	ldi	r22, 0x30	; 48
    2d86:	70 e0       	ldi	r23, 0x00	; 0
    2d88:	0e 94 b2 00 	call	0x164	; 0x164 <updateLEDs>
		} break;
    2d8c:	0b c2       	rjmp	.+1046   	; 0x31a4 <appLEDAnimationTimerHandler+0x502>
		case ROTATE:
		{
			tempGrn = LEDarray[0];
    2d8e:	80 91 cf 0a 	lds	r24, 0x0ACF
    2d92:	80 93 be 0a 	sts	0x0ABE, r24
			tempRed = LEDarray[1];
    2d96:	80 91 d0 0a 	lds	r24, 0x0AD0
    2d9a:	80 93 bd 0a 	sts	0x0ABD, r24
			tempBlu = LEDarray[2];
    2d9e:	80 91 d1 0a 	lds	r24, 0x0AD1
    2da2:	80 93 bf 0a 	sts	0x0ABF, r24
			for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    2da6:	1c 82       	std	Y+4, r1	; 0x04
    2da8:	1b 82       	std	Y+3, r1	; 0x03
    2daa:	30 c0       	rjmp	.+96     	; 0x2e0c <appLEDAnimationTimerHandler+0x16a>
			{
				LEDarray[LED_ptr] = LEDarray[LED_ptr+3];
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	03 96       	adiw	r24, 0x03	; 3
    2db2:	81 53       	subi	r24, 0x31	; 49
    2db4:	95 4f       	sbci	r25, 0xF5	; 245
    2db6:	fc 01       	movw	r30, r24
    2db8:	20 81       	ld	r18, Z
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dbe:	81 53       	subi	r24, 0x31	; 49
    2dc0:	95 4f       	sbci	r25, 0xF5	; 245
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	20 83       	st	Z, r18
				LEDarray[LED_ptr+1] = LEDarray[LED_ptr+4];
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dca:	01 96       	adiw	r24, 0x01	; 1
    2dcc:	2b 81       	ldd	r18, Y+3	; 0x03
    2dce:	3c 81       	ldd	r19, Y+4	; 0x04
    2dd0:	2c 5f       	subi	r18, 0xFC	; 252
    2dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd4:	21 53       	subi	r18, 0x31	; 49
    2dd6:	35 4f       	sbci	r19, 0xF5	; 245
    2dd8:	f9 01       	movw	r30, r18
    2dda:	20 81       	ld	r18, Z
    2ddc:	81 53       	subi	r24, 0x31	; 49
    2dde:	95 4f       	sbci	r25, 0xF5	; 245
    2de0:	fc 01       	movw	r30, r24
    2de2:	20 83       	st	Z, r18
				LEDarray[LED_ptr+2] = LEDarray[LED_ptr+5];
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	9c 81       	ldd	r25, Y+4	; 0x04
    2de8:	02 96       	adiw	r24, 0x02	; 2
    2dea:	2b 81       	ldd	r18, Y+3	; 0x03
    2dec:	3c 81       	ldd	r19, Y+4	; 0x04
    2dee:	2b 5f       	subi	r18, 0xFB	; 251
    2df0:	3f 4f       	sbci	r19, 0xFF	; 255
    2df2:	21 53       	subi	r18, 0x31	; 49
    2df4:	35 4f       	sbci	r19, 0xF5	; 245
    2df6:	f9 01       	movw	r30, r18
    2df8:	20 81       	ld	r18, Z
    2dfa:	81 53       	subi	r24, 0x31	; 49
    2dfc:	95 4f       	sbci	r25, 0xF5	; 245
    2dfe:	fc 01       	movw	r30, r24
    2e00:	20 83       	st	Z, r18
		case ROTATE:
		{
			tempGrn = LEDarray[0];
			tempRed = LEDarray[1];
			tempBlu = LEDarray[2];
			for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    2e02:	8b 81       	ldd	r24, Y+3	; 0x03
    2e04:	9c 81       	ldd	r25, Y+4	; 0x04
    2e06:	03 96       	adiw	r24, 0x03	; 3
    2e08:	9c 83       	std	Y+4, r25	; 0x04
    2e0a:	8b 83       	std	Y+3, r24	; 0x03
    2e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e10:	80 33       	cpi	r24, 0x30	; 48
    2e12:	91 05       	cpc	r25, r1
    2e14:	5c f2       	brlt	.-106    	; 0x2dac <appLEDAnimationTimerHandler+0x10a>
			{
				LEDarray[LED_ptr] = LEDarray[LED_ptr+3];
				LEDarray[LED_ptr+1] = LEDarray[LED_ptr+4];
				LEDarray[LED_ptr+2] = LEDarray[LED_ptr+5];
			}
			LEDarray[(NUM_LEDS*3)-3] = tempGrn;
    2e16:	80 91 be 0a 	lds	r24, 0x0ABE
    2e1a:	80 93 fc 0a 	sts	0x0AFC, r24
			LEDarray[(NUM_LEDS*3)-2] = tempRed;
    2e1e:	80 91 bd 0a 	lds	r24, 0x0ABD
    2e22:	80 93 fd 0a 	sts	0x0AFD, r24
			LEDarray[(NUM_LEDS*3)-1] = tempBlu;
    2e26:	80 91 bf 0a 	lds	r24, 0x0ABF
    2e2a:	80 93 fe 0a 	sts	0x0AFE, r24

			updateLEDs(LEDarray, NUM_LEDS*3);
    2e2e:	8f ec       	ldi	r24, 0xCF	; 207
    2e30:	9a e0       	ldi	r25, 0x0A	; 10
    2e32:	60 e3       	ldi	r22, 0x30	; 48
    2e34:	70 e0       	ldi	r23, 0x00	; 0
    2e36:	0e 94 b2 00 	call	0x164	; 0x164 <updateLEDs>
		} break;
    2e3a:	b4 c1       	rjmp	.+872    	; 0x31a4 <appLEDAnimationTimerHandler+0x502>
		{
//			This animation will make the pattern grow and fade in intensity to make a throbbing
//			effect.  The rate is set by the throbDelta parameter.  Current implementation just
//			keeps subtracting the delta value from the color intensities and lets the values wrap
//			around.  This has the effect of changing the color as well as the overall intensity.
			throbSum = 0;
    2e3c:	10 92 c6 0a 	sts	0x0AC6, r1
//			The throbState variable indicates whether this is the build or fade direction.  
//			throbState = 0 means that the direction is build, so the intensity of each color is
//			reduced by the throbDelta amount until it is zero.
			if (throbFade > 0)
    2e40:	80 91 c7 0a 	lds	r24, 0x0AC7
    2e44:	88 23       	and	r24, r24
    2e46:	d9 f1       	breq	.+118    	; 0x2ebe <appLEDAnimationTimerHandler+0x21c>
			{
				for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr++)
    2e48:	1e 82       	std	Y+6, r1	; 0x06
    2e4a:	1d 82       	std	Y+5, r1	; 0x05
    2e4c:	2b c0       	rjmp	.+86     	; 0x2ea4 <appLEDAnimationTimerHandler+0x202>
				{
					if (LEDarray[LED_ptr] >= throbDelta)
    2e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e50:	9e 81       	ldd	r25, Y+6	; 0x06
    2e52:	81 53       	subi	r24, 0x31	; 49
    2e54:	95 4f       	sbci	r25, 0xF5	; 245
    2e56:	fc 01       	movw	r30, r24
    2e58:	90 81       	ld	r25, Z
    2e5a:	80 91 c5 0a 	lds	r24, 0x0AC5
    2e5e:	98 17       	cp	r25, r24
    2e60:	b0 f0       	brcs	.+44     	; 0x2e8e <appLEDAnimationTimerHandler+0x1ec>
					{
						LEDarray[LED_ptr] -= throbDelta;
    2e62:	8d 81       	ldd	r24, Y+5	; 0x05
    2e64:	9e 81       	ldd	r25, Y+6	; 0x06
    2e66:	81 53       	subi	r24, 0x31	; 49
    2e68:	95 4f       	sbci	r25, 0xF5	; 245
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	90 81       	ld	r25, Z
    2e6e:	80 91 c5 0a 	lds	r24, 0x0AC5
    2e72:	29 2f       	mov	r18, r25
    2e74:	28 1b       	sub	r18, r24
    2e76:	8d 81       	ldd	r24, Y+5	; 0x05
    2e78:	9e 81       	ldd	r25, Y+6	; 0x06
    2e7a:	81 53       	subi	r24, 0x31	; 49
    2e7c:	95 4f       	sbci	r25, 0xF5	; 245
    2e7e:	fc 01       	movw	r30, r24
    2e80:	20 83       	st	Z, r18
						throbSum++;
    2e82:	80 91 c6 0a 	lds	r24, 0x0AC6
    2e86:	8f 5f       	subi	r24, 0xFF	; 255
    2e88:	80 93 c6 0a 	sts	0x0AC6, r24
    2e8c:	06 c0       	rjmp	.+12     	; 0x2e9a <appLEDAnimationTimerHandler+0x1f8>
					} else {
						LEDarray[LED_ptr] = 0;
    2e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e90:	9e 81       	ldd	r25, Y+6	; 0x06
    2e92:	81 53       	subi	r24, 0x31	; 49
    2e94:	95 4f       	sbci	r25, 0xF5	; 245
    2e96:	fc 01       	movw	r30, r24
    2e98:	10 82       	st	Z, r1
//			The throbState variable indicates whether this is the build or fade direction.  
//			throbState = 0 means that the direction is build, so the intensity of each color is
//			reduced by the throbDelta amount until it is zero.
			if (throbFade > 0)
			{
				for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr++)
    2e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9e:	01 96       	adiw	r24, 0x01	; 1
    2ea0:	9e 83       	std	Y+6, r25	; 0x06
    2ea2:	8d 83       	std	Y+5, r24	; 0x05
    2ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea8:	80 33       	cpi	r24, 0x30	; 48
    2eaa:	91 05       	cpc	r25, r1
    2eac:	84 f2       	brlt	.-96     	; 0x2e4e <appLEDAnimationTimerHandler+0x1ac>
						throbSum++;
					} else {
						LEDarray[LED_ptr] = 0;
					}
				}
				if (throbSum == 0)		// Check if any changes were made this pass
    2eae:	80 91 c6 0a 	lds	r24, 0x0AC6
    2eb2:	88 23       	and	r24, r24
    2eb4:	09 f0       	breq	.+2      	; 0x2eb8 <appLEDAnimationTimerHandler+0x216>
    2eb6:	53 c0       	rjmp	.+166    	; 0x2f5e <appLEDAnimationTimerHandler+0x2bc>
				{
					throbFade = 0;		// When all LEDs are off, switch direction to build
    2eb8:	10 92 c7 0a 	sts	0x0AC7, r1
    2ebc:	50 c0       	rjmp	.+160    	; 0x2f5e <appLEDAnimationTimerHandler+0x2bc>
				}
			} else {
				for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr++)
    2ebe:	18 86       	std	Y+8, r1	; 0x08
    2ec0:	1f 82       	std	Y+7, r1	; 0x07
    2ec2:	40 c0       	rjmp	.+128    	; 0x2f44 <appLEDAnimationTimerHandler+0x2a2>
				{
					if ((LEDpattern[LED_ptr] - LEDarray[LED_ptr]) > throbDelta)
    2ec4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ec6:	98 85       	ldd	r25, Y+8	; 0x08
    2ec8:	81 50       	subi	r24, 0x01	; 1
    2eca:	95 4f       	sbci	r25, 0xF5	; 245
    2ecc:	fc 01       	movw	r30, r24
    2ece:	80 81       	ld	r24, Z
    2ed0:	28 2f       	mov	r18, r24
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ed6:	98 85       	ldd	r25, Y+8	; 0x08
    2ed8:	81 53       	subi	r24, 0x31	; 49
    2eda:	95 4f       	sbci	r25, 0xF5	; 245
    2edc:	fc 01       	movw	r30, r24
    2ede:	80 81       	ld	r24, Z
    2ee0:	88 2f       	mov	r24, r24
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	28 1b       	sub	r18, r24
    2ee6:	39 0b       	sbc	r19, r25
    2ee8:	80 91 c5 0a 	lds	r24, 0x0AC5
    2eec:	88 2f       	mov	r24, r24
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	82 17       	cp	r24, r18
    2ef2:	93 07       	cpc	r25, r19
    2ef4:	b4 f4       	brge	.+44     	; 0x2f22 <appLEDAnimationTimerHandler+0x280>
					{
						LEDarray[LED_ptr] += throbDelta;
    2ef6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ef8:	98 85       	ldd	r25, Y+8	; 0x08
    2efa:	81 53       	subi	r24, 0x31	; 49
    2efc:	95 4f       	sbci	r25, 0xF5	; 245
    2efe:	fc 01       	movw	r30, r24
    2f00:	90 81       	ld	r25, Z
    2f02:	80 91 c5 0a 	lds	r24, 0x0AC5
    2f06:	29 2f       	mov	r18, r25
    2f08:	28 0f       	add	r18, r24
    2f0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f0c:	98 85       	ldd	r25, Y+8	; 0x08
    2f0e:	81 53       	subi	r24, 0x31	; 49
    2f10:	95 4f       	sbci	r25, 0xF5	; 245
    2f12:	fc 01       	movw	r30, r24
    2f14:	20 83       	st	Z, r18
						throbSum++;		// Increment the counter for each LED color that is changed
    2f16:	80 91 c6 0a 	lds	r24, 0x0AC6
    2f1a:	8f 5f       	subi	r24, 0xFF	; 255
    2f1c:	80 93 c6 0a 	sts	0x0AC6, r24
    2f20:	0c c0       	rjmp	.+24     	; 0x2f3a <appLEDAnimationTimerHandler+0x298>
					} else {
						LEDarray[LED_ptr] = LEDpattern[LED_ptr];
    2f22:	8f 81       	ldd	r24, Y+7	; 0x07
    2f24:	98 85       	ldd	r25, Y+8	; 0x08
    2f26:	81 50       	subi	r24, 0x01	; 1
    2f28:	95 4f       	sbci	r25, 0xF5	; 245
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	20 81       	ld	r18, Z
    2f2e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f30:	98 85       	ldd	r25, Y+8	; 0x08
    2f32:	81 53       	subi	r24, 0x31	; 49
    2f34:	95 4f       	sbci	r25, 0xF5	; 245
    2f36:	fc 01       	movw	r30, r24
    2f38:	20 83       	st	Z, r18
				if (throbSum == 0)		// Check if any changes were made this pass
				{
					throbFade = 0;		// When all LEDs are off, switch direction to build
				}
			} else {
				for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr++)
    2f3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f3c:	98 85       	ldd	r25, Y+8	; 0x08
    2f3e:	01 96       	adiw	r24, 0x01	; 1
    2f40:	98 87       	std	Y+8, r25	; 0x08
    2f42:	8f 83       	std	Y+7, r24	; 0x07
    2f44:	8f 81       	ldd	r24, Y+7	; 0x07
    2f46:	98 85       	ldd	r25, Y+8	; 0x08
    2f48:	80 33       	cpi	r24, 0x30	; 48
    2f4a:	91 05       	cpc	r25, r1
    2f4c:	0c f4       	brge	.+2      	; 0x2f50 <appLEDAnimationTimerHandler+0x2ae>
    2f4e:	ba cf       	rjmp	.-140    	; 0x2ec4 <appLEDAnimationTimerHandler+0x222>
						throbSum++;		// Increment the counter for each LED color that is changed
					} else {
						LEDarray[LED_ptr] = LEDpattern[LED_ptr];
					}
				}
				if (throbSum == 0)		// Check if any changes were made this pass
    2f50:	80 91 c6 0a 	lds	r24, 0x0AC6
    2f54:	88 23       	and	r24, r24
    2f56:	19 f4       	brne	.+6      	; 0x2f5e <appLEDAnimationTimerHandler+0x2bc>
				{
					throbFade = 1;		// When all LEDs are at target brightness, switch direction to fade
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	80 93 c7 0a 	sts	0x0AC7, r24
				}
			}
			updateLEDs(LEDarray, NUM_LEDS*3);
    2f5e:	8f ec       	ldi	r24, 0xCF	; 207
    2f60:	9a e0       	ldi	r25, 0x0A	; 10
    2f62:	60 e3       	ldi	r22, 0x30	; 48
    2f64:	70 e0       	ldi	r23, 0x00	; 0
    2f66:	0e 94 b2 00 	call	0x164	; 0x164 <updateLEDs>
		} break;
    2f6a:	1c c1       	rjmp	.+568    	; 0x31a4 <appLEDAnimationTimerHandler+0x502>
		case RANDOM:
		{
//			This animation flashes the pattern at a rate determined by the randomFreq parameter
//			Since the range of values from the random number generator is 0 - 32767, the frequency
//			of flashes is roughly randomFreq/32768*1000/period_mS.
			randomPtr = rand();
    2f6c:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <rand>
    2f70:	90 93 c2 0a 	sts	0x0AC2, r25
    2f74:	80 93 c1 0a 	sts	0x0AC1, r24
			if (randomPtr <= randomFreq)
    2f78:	20 91 c1 0a 	lds	r18, 0x0AC1
    2f7c:	30 91 c2 0a 	lds	r19, 0x0AC2
    2f80:	80 91 c3 0a 	lds	r24, 0x0AC3
    2f84:	90 91 c4 0a 	lds	r25, 0x0AC4
    2f88:	82 17       	cp	r24, r18
    2f8a:	93 07       	cpc	r25, r19
    2f8c:	80 f0       	brcs	.+32     	; 0x2fae <appLEDAnimationTimerHandler+0x30c>
			{
				memcpy(LEDarray,LEDpattern,NUM_LEDS*3);
    2f8e:	8f ec       	ldi	r24, 0xCF	; 207
    2f90:	9a e0       	ldi	r25, 0x0A	; 10
    2f92:	2f ef       	ldi	r18, 0xFF	; 255
    2f94:	3a e0       	ldi	r19, 0x0A	; 10
    2f96:	40 e3       	ldi	r20, 0x30	; 48
    2f98:	f9 01       	movw	r30, r18
    2f9a:	00 80       	ld	r0, Z
    2f9c:	2f 5f       	subi	r18, 0xFF	; 255
    2f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	00 82       	st	Z, r0
    2fa4:	01 96       	adiw	r24, 0x01	; 1
    2fa6:	41 50       	subi	r20, 0x01	; 1
    2fa8:	44 23       	and	r20, r20
    2faa:	b1 f7       	brne	.-20     	; 0x2f98 <appLEDAnimationTimerHandler+0x2f6>
    2fac:	21 c0       	rjmp	.+66     	; 0x2ff0 <appLEDAnimationTimerHandler+0x34e>
			} else
			{
				for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    2fae:	1a 86       	std	Y+10, r1	; 0x0a
    2fb0:	19 86       	std	Y+9, r1	; 0x09
    2fb2:	19 c0       	rjmp	.+50     	; 0x2fe6 <appLEDAnimationTimerHandler+0x344>
				{
					LEDarray[LED_ptr] = 0;
    2fb4:	89 85       	ldd	r24, Y+9	; 0x09
    2fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb8:	81 53       	subi	r24, 0x31	; 49
    2fba:	95 4f       	sbci	r25, 0xF5	; 245
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	10 82       	st	Z, r1
					LEDarray[LED_ptr+1] = 0;
    2fc0:	89 85       	ldd	r24, Y+9	; 0x09
    2fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc4:	01 96       	adiw	r24, 0x01	; 1
    2fc6:	81 53       	subi	r24, 0x31	; 49
    2fc8:	95 4f       	sbci	r25, 0xF5	; 245
    2fca:	fc 01       	movw	r30, r24
    2fcc:	10 82       	st	Z, r1
					LEDarray[LED_ptr+2] = 0;
    2fce:	89 85       	ldd	r24, Y+9	; 0x09
    2fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd2:	02 96       	adiw	r24, 0x02	; 2
    2fd4:	81 53       	subi	r24, 0x31	; 49
    2fd6:	95 4f       	sbci	r25, 0xF5	; 245
    2fd8:	fc 01       	movw	r30, r24
    2fda:	10 82       	st	Z, r1
			if (randomPtr <= randomFreq)
			{
				memcpy(LEDarray,LEDpattern,NUM_LEDS*3);
			} else
			{
				for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    2fdc:	89 85       	ldd	r24, Y+9	; 0x09
    2fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe0:	03 96       	adiw	r24, 0x03	; 3
    2fe2:	9a 87       	std	Y+10, r25	; 0x0a
    2fe4:	89 87       	std	Y+9, r24	; 0x09
    2fe6:	89 85       	ldd	r24, Y+9	; 0x09
    2fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fea:	80 33       	cpi	r24, 0x30	; 48
    2fec:	91 05       	cpc	r25, r1
    2fee:	14 f3       	brlt	.-60     	; 0x2fb4 <appLEDAnimationTimerHandler+0x312>
					LEDarray[LED_ptr+1] = 0;
					LEDarray[LED_ptr+2] = 0;
				}
			}			

			updateLEDs(LEDarray, NUM_LEDS*3);
    2ff0:	8f ec       	ldi	r24, 0xCF	; 207
    2ff2:	9a e0       	ldi	r25, 0x0A	; 10
    2ff4:	60 e3       	ldi	r22, 0x30	; 48
    2ff6:	70 e0       	ldi	r23, 0x00	; 0
    2ff8:	0e 94 b2 00 	call	0x164	; 0x164 <updateLEDs>
		} break;
    2ffc:	d3 c0       	rjmp	.+422    	; 0x31a4 <appLEDAnimationTimerHandler+0x502>
		case FIRECRACKER:
		{
//			fuse hopefully regulates how long the pattern lasts
			fuse = 100;
    2ffe:	84 e6       	ldi	r24, 0x64	; 100
    3000:	80 93 c9 0a 	sts	0x0AC9, r24
			fuseChange = 0;
    3004:	10 92 ca 0a 	sts	0x0ACA, r1

			while(fuse > 0)
    3008:	6f c0       	rjmp	.+222    	; 0x30e8 <appLEDAnimationTimerHandler+0x446>
			{
//				start at yellow
				fuseChange = 0;
    300a:	10 92 ca 0a 	sts	0x0ACA, r1
				for(int LED_ptr=0; LED_ptr<NUM_LEDS*3; LED_ptr+=3)
    300e:	1c 86       	std	Y+12, r1	; 0x0c
    3010:	1b 86       	std	Y+11, r1	; 0x0b
    3012:	20 c0       	rjmp	.+64     	; 0x3054 <appLEDAnimationTimerHandler+0x3b2>
				{
					LEDarray[LED_ptr] = 170 + fuseChange;		// Grn
    3014:	80 91 ca 0a 	lds	r24, 0x0ACA
    3018:	28 2f       	mov	r18, r24
    301a:	26 55       	subi	r18, 0x56	; 86
    301c:	8b 85       	ldd	r24, Y+11	; 0x0b
    301e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3020:	81 53       	subi	r24, 0x31	; 49
    3022:	95 4f       	sbci	r25, 0xF5	; 245
    3024:	fc 01       	movw	r30, r24
    3026:	20 83       	st	Z, r18
					LEDarray[LED_ptr+1] = 175 + fuseChange;		// Red
    3028:	8b 85       	ldd	r24, Y+11	; 0x0b
    302a:	9c 85       	ldd	r25, Y+12	; 0x0c
    302c:	01 96       	adiw	r24, 0x01	; 1
    302e:	20 91 ca 0a 	lds	r18, 0x0ACA
    3032:	21 55       	subi	r18, 0x51	; 81
    3034:	81 53       	subi	r24, 0x31	; 49
    3036:	95 4f       	sbci	r25, 0xF5	; 245
    3038:	fc 01       	movw	r30, r24
    303a:	20 83       	st	Z, r18
					LEDarray[LED_ptr+2] = 0;					// Blu
    303c:	8b 85       	ldd	r24, Y+11	; 0x0b
    303e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3040:	02 96       	adiw	r24, 0x02	; 2
    3042:	81 53       	subi	r24, 0x31	; 49
    3044:	95 4f       	sbci	r25, 0xF5	; 245
    3046:	fc 01       	movw	r30, r24
    3048:	10 82       	st	Z, r1

			while(fuse > 0)
			{
//				start at yellow
				fuseChange = 0;
				for(int LED_ptr=0; LED_ptr<NUM_LEDS*3; LED_ptr+=3)
    304a:	8b 85       	ldd	r24, Y+11	; 0x0b
    304c:	9c 85       	ldd	r25, Y+12	; 0x0c
    304e:	03 96       	adiw	r24, 0x03	; 3
    3050:	9c 87       	std	Y+12, r25	; 0x0c
    3052:	8b 87       	std	Y+11, r24	; 0x0b
    3054:	8b 85       	ldd	r24, Y+11	; 0x0b
    3056:	9c 85       	ldd	r25, Y+12	; 0x0c
    3058:	80 33       	cpi	r24, 0x30	; 48
    305a:	91 05       	cpc	r25, r1
    305c:	dc f2       	brlt	.-74     	; 0x3014 <appLEDAnimationTimerHandler+0x372>
					LEDarray[LED_ptr] = 170 + fuseChange;		// Grn
					LEDarray[LED_ptr+1] = 175 + fuseChange;		// Red
					LEDarray[LED_ptr+2] = 0;					// Blu
				}
//				incr change by 5, going toward white
				fuseChange+=5;
    305e:	80 91 ca 0a 	lds	r24, 0x0ACA
    3062:	8b 5f       	subi	r24, 0xFB	; 251
    3064:	80 93 ca 0a 	sts	0x0ACA, r24
//				use bounded rand to insert random blips of red sparks
//				insert random pops! (with a few guaranteed pops)
				if(fuse == (rand() % fuse) || fuse % 13 == 0)
    3068:	80 91 c9 0a 	lds	r24, 0x0AC9
    306c:	08 2f       	mov	r16, r24
    306e:	10 e0       	ldi	r17, 0x00	; 0
    3070:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <rand>
    3074:	20 91 c9 0a 	lds	r18, 0x0AC9
    3078:	22 2f       	mov	r18, r18
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	b9 01       	movw	r22, r18
    307e:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <__divmodhi4>
    3082:	08 17       	cp	r16, r24
    3084:	19 07       	cpc	r17, r25
    3086:	49 f0       	breq	.+18     	; 0x309a <appLEDAnimationTimerHandler+0x3f8>
    3088:	80 91 c9 0a 	lds	r24, 0x0AC9
    308c:	9d e0       	ldi	r25, 0x0D	; 13
    308e:	69 2f       	mov	r22, r25
    3090:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <__udivmodqi4>
    3094:	89 2f       	mov	r24, r25
    3096:	88 23       	and	r24, r24
    3098:	11 f5       	brne	.+68     	; 0x30de <appLEDAnimationTimerHandler+0x43c>
				{
//					every 3rd LED
					for(int LED_ptr=0; LED_ptr<NUM_LEDS*3; LED_ptr+=3)
    309a:	1e 86       	std	Y+14, r1	; 0x0e
    309c:	1d 86       	std	Y+13, r1	; 0x0d
    309e:	1a c0       	rjmp	.+52     	; 0x30d4 <appLEDAnimationTimerHandler+0x432>
					{
						LEDarray[LED_ptr] = 0;		// Grn
    30a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a4:	81 53       	subi	r24, 0x31	; 49
    30a6:	95 4f       	sbci	r25, 0xF5	; 245
    30a8:	fc 01       	movw	r30, r24
    30aa:	10 82       	st	Z, r1
						LEDarray[LED_ptr+1] = 255;	// red
    30ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b0:	01 96       	adiw	r24, 0x01	; 1
    30b2:	81 53       	subi	r24, 0x31	; 49
    30b4:	95 4f       	sbci	r25, 0xF5	; 245
    30b6:	2f ef       	ldi	r18, 0xFF	; 255
    30b8:	fc 01       	movw	r30, r24
    30ba:	20 83       	st	Z, r18
						LEDarray[LED_ptr+2] = 0;	//blu
    30bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    30be:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c0:	02 96       	adiw	r24, 0x02	; 2
    30c2:	81 53       	subi	r24, 0x31	; 49
    30c4:	95 4f       	sbci	r25, 0xF5	; 245
    30c6:	fc 01       	movw	r30, r24
    30c8:	10 82       	st	Z, r1
//				use bounded rand to insert random blips of red sparks
//				insert random pops! (with a few guaranteed pops)
				if(fuse == (rand() % fuse) || fuse % 13 == 0)
				{
//					every 3rd LED
					for(int LED_ptr=0; LED_ptr<NUM_LEDS*3; LED_ptr+=3)
    30ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    30cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ce:	03 96       	adiw	r24, 0x03	; 3
    30d0:	9e 87       	std	Y+14, r25	; 0x0e
    30d2:	8d 87       	std	Y+13, r24	; 0x0d
    30d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d8:	80 33       	cpi	r24, 0x30	; 48
    30da:	91 05       	cpc	r25, r1
    30dc:	0c f3       	brlt	.-62     	; 0x30a0 <appLEDAnimationTimerHandler+0x3fe>
						LEDarray[LED_ptr] = 0;		// Grn
						LEDarray[LED_ptr+1] = 255;	// red
						LEDarray[LED_ptr+2] = 0;	//blu
					}
				}
				fuse--;
    30de:	80 91 c9 0a 	lds	r24, 0x0AC9
    30e2:	81 50       	subi	r24, 0x01	; 1
    30e4:	80 93 c9 0a 	sts	0x0AC9, r24
		{
//			fuse hopefully regulates how long the pattern lasts
			fuse = 100;
			fuseChange = 0;

			while(fuse > 0)
    30e8:	80 91 c9 0a 	lds	r24, 0x0AC9
    30ec:	88 23       	and	r24, r24
    30ee:	09 f0       	breq	.+2      	; 0x30f2 <appLEDAnimationTimerHandler+0x450>
    30f0:	8c cf       	rjmp	.-232    	; 0x300a <appLEDAnimationTimerHandler+0x368>
					}
				}
				fuse--;
			}

			updateLEDs(LEDarray, NUM_LEDS*3);
    30f2:	8f ec       	ldi	r24, 0xCF	; 207
    30f4:	9a e0       	ldi	r25, 0x0A	; 10
    30f6:	60 e3       	ldi	r22, 0x30	; 48
    30f8:	70 e0       	ldi	r23, 0x00	; 0
    30fa:	0e 94 b2 00 	call	0x164	; 0x164 <updateLEDs>
		} break;
    30fe:	52 c0       	rjmp	.+164    	; 0x31a4 <appLEDAnimationTimerHandler+0x502>
		case ORBITALS:
		{
//			(looks like throb color change, but change is tied to RSSI value change rather than hardcoded delta)
//			check to see if signal is getting closer or farther
			for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    3100:	18 8a       	std	Y+16, r1	; 0x10
    3102:	1f 86       	std	Y+15, r1	; 0x0f
    3104:	1e c0       	rjmp	.+60     	; 0x3142 <appLEDAnimationTimerHandler+0x4a0>
			{
				LEDarray[LED_ptr] = 0;
    3106:	8f 85       	ldd	r24, Y+15	; 0x0f
    3108:	98 89       	ldd	r25, Y+16	; 0x10
    310a:	81 53       	subi	r24, 0x31	; 49
    310c:	95 4f       	sbci	r25, 0xF5	; 245
    310e:	fc 01       	movw	r30, r24
    3110:	10 82       	st	Z, r1
				LEDarray[LED_ptr+1] = averageRSSI;
    3112:	8f 85       	ldd	r24, Y+15	; 0x0f
    3114:	98 89       	ldd	r25, Y+16	; 0x10
    3116:	01 96       	adiw	r24, 0x01	; 1
    3118:	20 91 31 0b 	lds	r18, 0x0B31
    311c:	81 53       	subi	r24, 0x31	; 49
    311e:	95 4f       	sbci	r25, 0xF5	; 245
    3120:	fc 01       	movw	r30, r24
    3122:	20 83       	st	Z, r18
				LEDarray[LED_ptr+2] = 255-averageRSSI;
    3124:	8f 85       	ldd	r24, Y+15	; 0x0f
    3126:	98 89       	ldd	r25, Y+16	; 0x10
    3128:	02 96       	adiw	r24, 0x02	; 2
    312a:	20 91 31 0b 	lds	r18, 0x0B31
    312e:	20 95       	com	r18
    3130:	81 53       	subi	r24, 0x31	; 49
    3132:	95 4f       	sbci	r25, 0xF5	; 245
    3134:	fc 01       	movw	r30, r24
    3136:	20 83       	st	Z, r18
		} break;
		case ORBITALS:
		{
//			(looks like throb color change, but change is tied to RSSI value change rather than hardcoded delta)
//			check to see if signal is getting closer or farther
			for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    3138:	8f 85       	ldd	r24, Y+15	; 0x0f
    313a:	98 89       	ldd	r25, Y+16	; 0x10
    313c:	03 96       	adiw	r24, 0x03	; 3
    313e:	98 8b       	std	Y+16, r25	; 0x10
    3140:	8f 87       	std	Y+15, r24	; 0x0f
    3142:	8f 85       	ldd	r24, Y+15	; 0x0f
    3144:	98 89       	ldd	r25, Y+16	; 0x10
    3146:	80 33       	cpi	r24, 0x30	; 48
    3148:	91 05       	cpc	r25, r1
    314a:	ec f2       	brlt	.-70     	; 0x3106 <appLEDAnimationTimerHandler+0x464>
				{
					LEDarray[LED_ptr] -= latestRSSI;
				}
			}
*/
			updateLEDs(LEDarray, NUM_LEDS*3);
    314c:	8f ec       	ldi	r24, 0xCF	; 207
    314e:	9a e0       	ldi	r25, 0x0A	; 10
    3150:	60 e3       	ldi	r22, 0x30	; 48
    3152:	70 e0       	ldi	r23, 0x00	; 0
    3154:	0e 94 b2 00 	call	0x164	; 0x164 <updateLEDs>
		} break;
    3158:	25 c0       	rjmp	.+74     	; 0x31a4 <appLEDAnimationTimerHandler+0x502>
// This is a simple pulse mode
		case ONESHOT:
		{
			// Pulses the LEDs and then goes dark
			if(pulseOn) //getting closer
    315a:	80 91 cd 0a 	lds	r24, 0x0ACD
    315e:	88 23       	and	r24, r24
    3160:	01 f1       	breq	.+64     	; 0x31a2 <appLEDAnimationTimerHandler+0x500>
			{
				pulseOn = false;
    3162:	10 92 cd 0a 	sts	0x0ACD, r1
				for(int LED_ptr=0; LED_ptr<NUM_LEDS*3; LED_ptr++)
    3166:	1a 8a       	std	Y+18, r1	; 0x12
    3168:	19 8a       	std	Y+17, r1	; 0x11
    316a:	0b c0       	rjmp	.+22     	; 0x3182 <appLEDAnimationTimerHandler+0x4e0>
				{
					LEDarray[LED_ptr] = 0;
    316c:	89 89       	ldd	r24, Y+17	; 0x11
    316e:	9a 89       	ldd	r25, Y+18	; 0x12
    3170:	81 53       	subi	r24, 0x31	; 49
    3172:	95 4f       	sbci	r25, 0xF5	; 245
    3174:	fc 01       	movw	r30, r24
    3176:	10 82       	st	Z, r1
		{
			// Pulses the LEDs and then goes dark
			if(pulseOn) //getting closer
			{
				pulseOn = false;
				for(int LED_ptr=0; LED_ptr<NUM_LEDS*3; LED_ptr++)
    3178:	89 89       	ldd	r24, Y+17	; 0x11
    317a:	9a 89       	ldd	r25, Y+18	; 0x12
    317c:	01 96       	adiw	r24, 0x01	; 1
    317e:	9a 8b       	std	Y+18, r25	; 0x12
    3180:	89 8b       	std	Y+17, r24	; 0x11
    3182:	89 89       	ldd	r24, Y+17	; 0x11
    3184:	9a 89       	ldd	r25, Y+18	; 0x12
    3186:	80 33       	cpi	r24, 0x30	; 48
    3188:	91 05       	cpc	r25, r1
    318a:	84 f3       	brlt	.-32     	; 0x316c <appLEDAnimationTimerHandler+0x4ca>
				{
					LEDarray[LED_ptr] = 0;
				}
				updateLEDs(LEDarray, NUM_LEDS*3);
    318c:	8f ec       	ldi	r24, 0xCF	; 207
    318e:	9a e0       	ldi	r25, 0x0A	; 10
    3190:	60 e3       	ldi	r22, 0x30	; 48
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	0e 94 b2 00 	call	0x164	; 0x164 <updateLEDs>
			}
		} break;
    3198:	04 c0       	rjmp	.+8      	; 0x31a2 <appLEDAnimationTimerHandler+0x500>
//		This default case should never be executed if all of the modes have been implemented!
		default:
			break;
    319a:	00 00       	nop
    319c:	03 c0       	rjmp	.+6      	; 0x31a4 <appLEDAnimationTimerHandler+0x502>
	switch(currentLEDmode)
	{
		case STATIC:
		{
//			If the pattern is static (no animation) then there's nothing to do			
		} break;
    319e:	00 00       	nop
    31a0:	01 c0       	rjmp	.+2      	; 0x31a4 <appLEDAnimationTimerHandler+0x502>
				{
					LEDarray[LED_ptr] = 0;
				}
				updateLEDs(LEDarray, NUM_LEDS*3);
			}
		} break;
    31a2:	00 00       	nop
//		This default case should never be executed if all of the modes have been implemented!
		default:
			break;
	}
}
    31a4:	64 96       	adiw	r28, 0x14	; 20
    31a6:	0f b6       	in	r0, 0x3f	; 63
    31a8:	f8 94       	cli
    31aa:	de bf       	out	0x3e, r29	; 62
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	cd bf       	out	0x3d, r28	; 61
    31b0:	df 91       	pop	r29
    31b2:	cf 91       	pop	r28
    31b4:	1f 91       	pop	r17
    31b6:	0f 91       	pop	r16
    31b8:	08 95       	ret

000031ba <LEDCmdDataInd>:
/*****************************************************************************
	Callback function from the network stack for the LED Command app endpoint
	Messages that carry commands go through this function
*****************************************************************************/
static bool LEDCmdDataInd(NWK_DataInd_t *ind)
{
    31ba:	cf 93       	push	r28
    31bc:	df 93       	push	r29
    31be:	00 d0       	rcall	.+0      	; 0x31c0 <LEDCmdDataInd+0x6>
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	9a 83       	std	Y+2, r25	; 0x02
    31c6:	89 83       	std	Y+1, r24	; 0x01
// Clear the timout flag so we don't switch to local mode
	cmdTimeout = false;
    31c8:	10 92 dc 09 	sts	0x09DC, r1
// Make sure the pointer is set correctly
	cmdBuffer = &appWorkingBuffer[0];
    31cc:	8a e4       	ldi	r24, 0x4A	; 74
    31ce:	9a e0       	ldi	r25, 0x0A	; 10
    31d0:	90 93 ba 0a 	sts	0x0ABA, r25
    31d4:	80 93 b9 0a 	sts	0x0AB9, r24
// Copy the data from the message buffer into the command buffer so that the
// network buffer can be freed up and re-used
	memcpy(appWorkingBuffer, ind->data, ind->size);
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	9a 81       	ldd	r25, Y+2	; 0x02
    31dc:	fc 01       	movw	r30, r24
    31de:	45 81       	ldd	r20, Z+5	; 0x05
    31e0:	56 81       	ldd	r21, Z+6	; 0x06
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	9a 81       	ldd	r25, Y+2	; 0x02
    31e6:	fc 01       	movw	r30, r24
    31e8:	87 81       	ldd	r24, Z+7	; 0x07
    31ea:	28 2f       	mov	r18, r24
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	8a e4       	ldi	r24, 0x4A	; 74
    31f0:	9a e0       	ldi	r25, 0x0A	; 10
    31f2:	ba 01       	movw	r22, r20
    31f4:	a9 01       	movw	r20, r18
    31f6:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <memcpy>
//	debugStart = ind->size;
	nwkState = NWK_STATE_RECD;
    31fa:	87 e0       	ldi	r24, 0x07	; 7
    31fc:	80 93 04 02 	sts	0x0204, r24
	appState = APP_STATE_DATARDY;
    3200:	82 e0       	ldi	r24, 0x02	; 2
    3202:	80 93 76 09 	sts	0x0976, r24
// This is the received signal strength value which might be useful	for some
// swarm rule(s)
	latestRSSI = (ind->rssi + 90) * 9;
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	9a 81       	ldd	r25, Y+2	; 0x02
    320a:	fc 01       	movw	r30, r24
    320c:	81 85       	ldd	r24, Z+9	; 0x09
    320e:	98 2f       	mov	r25, r24
    3210:	89 2f       	mov	r24, r25
    3212:	88 0f       	add	r24, r24
    3214:	88 0f       	add	r24, r24
    3216:	88 0f       	add	r24, r24
    3218:	89 0f       	add	r24, r25
    321a:	86 5d       	subi	r24, 0xD6	; 214
    321c:	80 93 30 0b 	sts	0x0B30, r24
	averageRSSI = (averageRSSI>>2)*3 + latestRSSI;
    3220:	80 91 31 0b 	lds	r24, 0x0B31
    3224:	98 2f       	mov	r25, r24
    3226:	96 95       	lsr	r25
    3228:	96 95       	lsr	r25
    322a:	89 2f       	mov	r24, r25
    322c:	88 0f       	add	r24, r24
    322e:	98 0f       	add	r25, r24
    3230:	80 91 30 0b 	lds	r24, 0x0B30
    3234:	89 0f       	add	r24, r25
    3236:	80 93 31 0b 	sts	0x0B31, r24
// Returning "true" to the network stack says that this message should be acknowledged
// if the sender requested it.
	return true;
    323a:	81 e0       	ldi	r24, 0x01	; 1
}
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	08 95       	ret

00003246 <SyncDataInd>:

/*****************************************************************************
	Callback function from the network stack for the start / sync command
*****************************************************************************/
static bool SyncDataInd(NWK_DataInd_t *ind)
{
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
    324a:	00 d0       	rcall	.+0      	; 0x324c <SyncDataInd+0x6>
    324c:	00 d0       	rcall	.+0      	; 0x324e <SyncDataInd+0x8>
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	9c 83       	std	Y+4, r25	; 0x04
    3254:	8b 83       	std	Y+3, r24	; 0x03
	HAL_GPIO_PIN(statusLED, E, 1)					// General status flag
	HAL_GPIO_PIN(rcvLED, E, 2)
	HAL_GPIO_PIN(lightStripData, E, 3)				// This is the serial output to drive the LED strip
#elif BOARD_VERSION == 2							// Board 2 has a connector with pin D4 used for the LED output
	HAL_GPIO_PIN(hbLED, G, 0)						// This is the LED near the antenna on the board
	HAL_GPIO_PIN(statusLED, D, 7)					// This is the LED near the power regulator on the board
    3256:	8b e2       	ldi	r24, 0x2B	; 43
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	2b e2       	ldi	r18, 0x2B	; 43
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	f9 01       	movw	r30, r18
    3260:	30 81       	ld	r19, Z
    3262:	20 e8       	ldi	r18, 0x80	; 128
    3264:	23 27       	eor	r18, r19
    3266:	fc 01       	movw	r30, r24
    3268:	20 83       	st	Z, r18
	HAL_GPIO_statusLED_toggle();
// Turn on the sync command flag
	syncOn = true;
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	80 93 ce 0a 	sts	0x0ACE, r24
// Set the mode to locked to command node
	appState = APP_STATE_LOCAL;
    3270:	83 e0       	ldi	r24, 0x03	; 3
    3272:	80 93 76 09 	sts	0x0976, r24
// Sync mode is preset to local accelerating throb
	currentLEDmode = THROB;
    3276:	84 e0       	ldi	r24, 0x04	; 4
    3278:	80 93 2f 0b 	sts	0x0B2F, r24
	throbDelta = 2;
    327c:	82 e0       	ldi	r24, 0x02	; 2
    327e:	80 93 c5 0a 	sts	0x0AC5, r24
	throbFade = 1;
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	80 93 c7 0a 	sts	0x0AC7, r24
	for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    3288:	1a 82       	std	Y+2, r1	; 0x02
    328a:	19 82       	std	Y+1, r1	; 0x01
    328c:	2f c0       	rjmp	.+94     	; 0x32ec <SyncDataInd+0xa6>
	{
		LEDarray[LED_ptr] = 0;				// Green
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	9a 81       	ldd	r25, Y+2	; 0x02
    3292:	81 53       	subi	r24, 0x31	; 49
    3294:	95 4f       	sbci	r25, 0xF5	; 245
    3296:	fc 01       	movw	r30, r24
    3298:	10 82       	st	Z, r1
		LEDpattern[LED_ptr] = 0;			// Green
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	9a 81       	ldd	r25, Y+2	; 0x02
    329e:	81 50       	subi	r24, 0x01	; 1
    32a0:	95 4f       	sbci	r25, 0xF5	; 245
    32a2:	fc 01       	movw	r30, r24
    32a4:	10 82       	st	Z, r1
		LEDarray[LED_ptr+1] = 0;			// Red
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	9a 81       	ldd	r25, Y+2	; 0x02
    32aa:	01 96       	adiw	r24, 0x01	; 1
    32ac:	81 53       	subi	r24, 0x31	; 49
    32ae:	95 4f       	sbci	r25, 0xF5	; 245
    32b0:	fc 01       	movw	r30, r24
    32b2:	10 82       	st	Z, r1
		LEDpattern[LED_ptr+1] = 0;			// Red
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
    32b6:	9a 81       	ldd	r25, Y+2	; 0x02
    32b8:	01 96       	adiw	r24, 0x01	; 1
    32ba:	81 50       	subi	r24, 0x01	; 1
    32bc:	95 4f       	sbci	r25, 0xF5	; 245
    32be:	fc 01       	movw	r30, r24
    32c0:	10 82       	st	Z, r1
		LEDarray[LED_ptr+2] = 196;			// Blue
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	9a 81       	ldd	r25, Y+2	; 0x02
    32c6:	02 96       	adiw	r24, 0x02	; 2
    32c8:	81 53       	subi	r24, 0x31	; 49
    32ca:	95 4f       	sbci	r25, 0xF5	; 245
    32cc:	24 ec       	ldi	r18, 0xC4	; 196
    32ce:	fc 01       	movw	r30, r24
    32d0:	20 83       	st	Z, r18
		LEDpattern[LED_ptr+2] = 196;		// Blue
    32d2:	89 81       	ldd	r24, Y+1	; 0x01
    32d4:	9a 81       	ldd	r25, Y+2	; 0x02
    32d6:	02 96       	adiw	r24, 0x02	; 2
    32d8:	81 50       	subi	r24, 0x01	; 1
    32da:	95 4f       	sbci	r25, 0xF5	; 245
    32dc:	24 ec       	ldi	r18, 0xC4	; 196
    32de:	fc 01       	movw	r30, r24
    32e0:	20 83       	st	Z, r18
	appState = APP_STATE_LOCAL;
// Sync mode is preset to local accelerating throb
	currentLEDmode = THROB;
	throbDelta = 2;
	throbFade = 1;
	for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	9a 81       	ldd	r25, Y+2	; 0x02
    32e6:	03 96       	adiw	r24, 0x03	; 3
    32e8:	9a 83       	std	Y+2, r25	; 0x02
    32ea:	89 83       	std	Y+1, r24	; 0x01
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	9a 81       	ldd	r25, Y+2	; 0x02
    32f0:	80 33       	cpi	r24, 0x30	; 48
    32f2:	91 05       	cpc	r25, r1
    32f4:	64 f2       	brlt	.-104    	; 0x328e <SyncDataInd+0x48>
		LEDarray[LED_ptr+1] = 0;			// Red
		LEDpattern[LED_ptr+1] = 0;			// Red
		LEDarray[LED_ptr+2] = 196;			// Blue
		LEDpattern[LED_ptr+2] = 196;		// Blue
	}
	animationTimer.interval = 125;
    32f6:	8d e7       	ldi	r24, 0x7D	; 125
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	a0 e0       	ldi	r26, 0x00	; 0
    32fc:	b0 e0       	ldi	r27, 0x00	; 0
    32fe:	80 93 8a 09 	sts	0x098A, r24
    3302:	90 93 8b 09 	sts	0x098B, r25
    3306:	a0 93 8c 09 	sts	0x098C, r26
    330a:	b0 93 8d 09 	sts	0x098D, r27
	throbTimerAccel = 1;
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	80 93 c8 0a 	sts	0x0AC8, r24

// Returning "true" to the network stack says that this message should be acknowledged
// if the sender requested it.
	return true;
    3314:	81 e0       	ldi	r24, 0x01	; 1
}
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	df 91       	pop	r29
    3320:	cf 91       	pop	r28
    3322:	08 95       	ret

00003324 <appInit>:

/*****************************************************************************
	Initialize all of the application-related states
*****************************************************************************/
static void appInit(void)
{
    3324:	cf 93       	push	r28
    3326:	df 93       	push	r29
    3328:	00 d0       	rcall	.+0      	; 0x332a <appInit+0x6>
    332a:	00 d0       	rcall	.+0      	; 0x332c <appInit+0x8>
    332c:	cd b7       	in	r28, 0x3d	; 61
    332e:	de b7       	in	r29, 0x3e	; 62
// This allows the local node address to come from either EEPROM or the config.h file
#ifndef FIXED_ADDR
	eeprom_busy_wait();
    3330:	8f e3       	ldi	r24, 0x3F	; 63
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	fc 01       	movw	r30, r24
    3336:	80 81       	ld	r24, Z
    3338:	88 2f       	mov	r24, r24
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	82 70       	andi	r24, 0x02	; 2
    333e:	90 70       	andi	r25, 0x00	; 0
    3340:	00 97       	sbiw	r24, 0x00	; 0
    3342:	b1 f7       	brne	.-20     	; 0x3330 <appInit+0xc>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {	
    3344:	8f e5       	ldi	r24, 0x5F	; 95
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	fc 01       	movw	r30, r24
    334a:	80 81       	ld	r24, Z
    334c:	8c 83       	std	Y+4, r24	; 0x04
    334e:	0e 94 56 14 	call	0x28ac	; 0x28ac <__iCliRetVal>
    3352:	89 83       	std	Y+1, r24	; 0x01
    3354:	26 c0       	rjmp	.+76     	; 0x33a2 <appInit+0x7e>
		myAddr = eeprom_read_word(&APP_ADDR);
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <__eerd_word_m128rfa1>
    335e:	90 93 75 09 	sts	0x0975, r25
    3362:	80 93 74 09 	sts	0x0974, r24
		if ((myAddr == 0) || (myAddr == 0xFFFF))
    3366:	80 91 74 09 	lds	r24, 0x0974
    336a:	90 91 75 09 	lds	r25, 0x0975
    336e:	00 97       	sbiw	r24, 0x00	; 0
    3370:	41 f0       	breq	.+16     	; 0x3382 <appInit+0x5e>
    3372:	80 91 74 09 	lds	r24, 0x0974
    3376:	90 91 75 09 	lds	r25, 0x0975
    337a:	ff ef       	ldi	r31, 0xFF	; 255
    337c:	8f 3f       	cpi	r24, 0xFF	; 255
    337e:	9f 07       	cpc	r25, r31
    3380:	31 f4       	brne	.+12     	; 0x338e <appInit+0x6a>
		{
			myAddr = rand();
    3382:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <rand>
    3386:	90 93 75 09 	sts	0x0975, r25
    338a:	80 93 74 09 	sts	0x0974, r24
		}
		eeprom_write_word(&APP_ADDR, myAddr);
    338e:	20 91 74 09 	lds	r18, 0x0974
    3392:	30 91 75 09 	lds	r19, 0x0975
    3396:	80 e0       	ldi	r24, 0x00	; 0
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	b9 01       	movw	r22, r18
    339c:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__eewr_word_m128rfa1>
static void appInit(void)
{
// This allows the local node address to come from either EEPROM or the config.h file
#ifndef FIXED_ADDR
	eeprom_busy_wait();
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {	
    33a0:	19 82       	std	Y+1, r1	; 0x01
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	88 23       	and	r24, r24
    33a6:	b9 f6       	brne	.-82     	; 0x3356 <appInit+0x32>
    33a8:	ce 01       	movw	r24, r28
    33aa:	04 96       	adiw	r24, 0x04	; 4
    33ac:	0e 94 5f 14 	call	0x28be	; 0x28be <__iRestore>
	}
#else
	myAddr = APP_ADDR;
#endif
// Set the seed for the random number generator using the local address
	srand(myAddr);
    33b0:	80 91 74 09 	lds	r24, 0x0974
    33b4:	90 91 75 09 	lds	r25, 0x0975
    33b8:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <srand>
// Set up the system and network for the application
	NWK_SetAddr(myAddr);
    33bc:	80 91 74 09 	lds	r24, 0x0974
    33c0:	90 91 75 09 	lds	r25, 0x0975
    33c4:	0e 94 8b 04 	call	0x916	; 0x916 <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
    33c8:	86 e4       	ldi	r24, 0x46	; 70
    33ca:	96 e4       	ldi	r25, 0x46	; 70
    33cc:	0e 94 a1 04 	call	0x942	; 0x942 <NWK_SetPanId>
	currentChannel = APP_CHANNEL;
    33d0:	8d e0       	ldi	r24, 0x0D	; 13
    33d2:	80 93 b8 0a 	sts	0x0AB8, r24
	PHY_SetChannel(currentChannel);
    33d6:	80 91 b8 0a 	lds	r24, 0x0AB8
    33da:	0e 94 92 01 	call	0x324	; 0x324 <PHY_SetChannel>
	PHY_SetRxState(true);
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	0e 94 80 01 	call	0x300	; 0x300 <PHY_SetRxState>
	NWK_OpenEndpoint(LEDCmd_ENDPOINT, LEDCmdDataInd);
    33e4:	2d ed       	ldi	r18, 0xDD	; 221
    33e6:	38 e1       	ldi	r19, 0x18	; 24
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	b9 01       	movw	r22, r18
    33ec:	0e 94 b7 04 	call	0x96e	; 0x96e <NWK_OpenEndpoint>
	NWK_OpenEndpoint(SyncCmd_ENDPOINT, SyncDataInd);
    33f0:	23 e2       	ldi	r18, 0x23	; 35
    33f2:	39 e1       	ldi	r19, 0x19	; 25
    33f4:	82 e0       	ldi	r24, 0x02	; 2
    33f6:	b9 01       	movw	r22, r18
    33f8:	0e 94 b7 04 	call	0x96e	; 0x96e <NWK_OpenEndpoint>
// Implement a periodic timer to check for duplicate addresses in the mesh
	addrCheckTimer.interval = ADDR_CHECK_INTERVAL;
    33fc:	80 e3       	ldi	r24, 0x30	; 48
    33fe:	95 e7       	ldi	r25, 0x75	; 117
    3400:	a0 e0       	ldi	r26, 0x00	; 0
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	80 93 7d 09 	sts	0x097D, r24
    3408:	90 93 7e 09 	sts	0x097E, r25
    340c:	a0 93 7f 09 	sts	0x097F, r26
    3410:	b0 93 80 09 	sts	0x0980, r27
	addrCheckTimer.mode = SYS_TIMER_PERIODIC_MODE;
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	80 93 81 09 	sts	0x0981, r24
	addrCheckTimer.handler = addrCheckTimerHandler;
    341a:	85 e6       	ldi	r24, 0x65	; 101
    341c:	95 e1       	ldi	r25, 0x15	; 21
    341e:	90 93 83 09 	sts	0x0983, r25
    3422:	80 93 82 09 	sts	0x0982, r24
	SYS_TimerStart(&addrCheckTimer);
    3426:	87 e7       	ldi	r24, 0x77	; 119
    3428:	99 e0       	ldi	r25, 0x09	; 9
    342a:	0e 94 0a 12 	call	0x2414	; 0x2414 <SYS_TimerStart>
// Implement the timer to determine when to switch to local mode if
// no commands are received.
	cmdTimer.interval = COMMAND_TIMEOUT_INTERVAL;
    342e:	80 e3       	ldi	r24, 0x30	; 48
    3430:	95 e7       	ldi	r25, 0x75	; 117
    3432:	a0 e0       	ldi	r26, 0x00	; 0
    3434:	b0 e0       	ldi	r27, 0x00	; 0
    3436:	80 93 a4 09 	sts	0x09A4, r24
    343a:	90 93 a5 09 	sts	0x09A5, r25
    343e:	a0 93 a6 09 	sts	0x09A6, r26
    3442:	b0 93 a7 09 	sts	0x09A7, r27
	cmdTimer.mode = SYS_TIMER_PERIODIC_MODE;
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	80 93 a8 09 	sts	0x09A8, r24
	cmdTimer.handler = cmdTimerHandler;
    344c:	8f ed       	ldi	r24, 0xDF	; 223
    344e:	95 e1       	ldi	r25, 0x15	; 21
    3450:	90 93 aa 09 	sts	0x09AA, r25
    3454:	80 93 a9 09 	sts	0x09A9, r24
	SYS_TimerStart(&cmdTimer);
    3458:	8e e9       	ldi	r24, 0x9E	; 158
    345a:	99 e0       	ldi	r25, 0x09	; 9
    345c:	0e 94 0a 12 	call	0x2414	; 0x2414 <SYS_TimerStart>
// Implement the timer that determines how often the LEDs are changed
// if there is a pattern that flashes, rotates, etc.  Note that the
// interval is only initialized here.  It can be changed on-the-fly by
// the application.  For example, the LED command contains an update
// interval for exactly this purpose.
	animationTimer.interval = LED_ANIMATION_INTERVAL;
    3460:	8e e3       	ldi	r24, 0x3E	; 62
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	a0 e0       	ldi	r26, 0x00	; 0
    3466:	b0 e0       	ldi	r27, 0x00	; 0
    3468:	80 93 8a 09 	sts	0x098A, r24
    346c:	90 93 8b 09 	sts	0x098B, r25
    3470:	a0 93 8c 09 	sts	0x098C, r26
    3474:	b0 93 8d 09 	sts	0x098D, r27
	animationTimer.mode = SYS_TIMER_PERIODIC_MODE;
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	80 93 8e 09 	sts	0x098E, r24
	animationTimer.handler = appLEDAnimationTimerHandler;
    347e:	81 e5       	ldi	r24, 0x51	; 81
    3480:	96 e1       	ldi	r25, 0x16	; 22
    3482:	90 93 90 09 	sts	0x0990, r25
    3486:	80 93 8f 09 	sts	0x098F, r24
	SYS_TimerStart(&animationTimer);
    348a:	84 e8       	ldi	r24, 0x84	; 132
    348c:	99 e0       	ldi	r25, 0x09	; 9
    348e:	0e 94 0a 12 	call	0x2414	; 0x2414 <SYS_TimerStart>
// Implement the timer to determine when to switch to local mode if
// no commands are received.
	accelerationTimer.interval = ACCELERATION_INTERVAL;
    3492:	88 ee       	ldi	r24, 0xE8	; 232
    3494:	93 e0       	ldi	r25, 0x03	; 3
    3496:	a0 e0       	ldi	r26, 0x00	; 0
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	80 93 97 09 	sts	0x0997, r24
    349e:	90 93 98 09 	sts	0x0998, r25
    34a2:	a0 93 99 09 	sts	0x0999, r26
    34a6:	b0 93 9a 09 	sts	0x099A, r27
	accelerationTimer.mode = SYS_TIMER_PERIODIC_MODE;
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	80 93 9b 09 	sts	0x099B, r24
	accelerationTimer.handler = accelerationTimerHandler;
    34b0:	81 e7       	ldi	r24, 0x71	; 113
    34b2:	95 e1       	ldi	r25, 0x15	; 21
    34b4:	90 93 9d 09 	sts	0x099D, r25
    34b8:	80 93 9c 09 	sts	0x099C, r24
	SYS_TimerStart(&cmdTimer);
    34bc:	8e e9       	ldi	r24, 0x9E	; 158
    34be:	99 e0       	ldi	r25, 0x09	; 9
    34c0:	0e 94 0a 12 	call	0x2414	; 0x2414 <SYS_TimerStart>
// Implement the timer to determine the time between channels when scanning
// for a controller.
	channelTimer.interval = CHANNEL_SCAN_INTERVAL;
    34c4:	80 ed       	ldi	r24, 0xD0	; 208
    34c6:	97 e0       	ldi	r25, 0x07	; 7
    34c8:	a0 e0       	ldi	r26, 0x00	; 0
    34ca:	b0 e0       	ldi	r27, 0x00	; 0
    34cc:	80 93 b1 09 	sts	0x09B1, r24
    34d0:	90 93 b2 09 	sts	0x09B2, r25
    34d4:	a0 93 b3 09 	sts	0x09B3, r26
    34d8:	b0 93 b4 09 	sts	0x09B4, r27
	channelTimer.mode = SYS_TIMER_PERIODIC_MODE;
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	80 93 b5 09 	sts	0x09B5, r24
	channelTimer.handler = channelTimerHandler;
    34e2:	83 ec       	ldi	r24, 0xC3	; 195
    34e4:	95 e1       	ldi	r25, 0x15	; 21
    34e6:	90 93 b7 09 	sts	0x09B7, r25
    34ea:	80 93 b6 09 	sts	0x09B6, r24
	SYS_TimerStart(&channelTimer);
    34ee:	8b ea       	ldi	r24, 0xAB	; 171
    34f0:	99 e0       	ldi	r25, 0x09	; 9
    34f2:	0e 94 0a 12 	call	0x2414	; 0x2414 <SYS_TimerStart>
	HAL_GPIO_PIN(hbLED, E, 0)						// The heartbeat flag
	HAL_GPIO_PIN(statusLED, E, 1)					// General status flag
	HAL_GPIO_PIN(rcvLED, E, 2)
	HAL_GPIO_PIN(lightStripData, E, 3)				// This is the serial output to drive the LED strip
#elif BOARD_VERSION == 2							// Board 2 has a connector with pin D4 used for the LED output
	HAL_GPIO_PIN(hbLED, G, 0)						// This is the LED near the antenna on the board
    34f6:	83 e3       	ldi	r24, 0x33	; 51
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	23 e3       	ldi	r18, 0x33	; 51
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	f9 01       	movw	r30, r18
    3500:	20 81       	ld	r18, Z
    3502:	21 60       	ori	r18, 0x01	; 1
    3504:	fc 01       	movw	r30, r24
    3506:	20 83       	st	Z, r18
    3508:	84 e3       	ldi	r24, 0x34	; 52
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	24 e3       	ldi	r18, 0x34	; 52
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	f9 01       	movw	r30, r18
    3512:	20 81       	ld	r18, Z
    3514:	2e 7f       	andi	r18, 0xFE	; 254
    3516:	fc 01       	movw	r30, r24
    3518:	20 83       	st	Z, r18
	HAL_GPIO_PIN(statusLED, D, 7)					// This is the LED near the power regulator on the board
    351a:	8a e2       	ldi	r24, 0x2A	; 42
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	2a e2       	ldi	r18, 0x2A	; 42
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	f9 01       	movw	r30, r18
    3524:	20 81       	ld	r18, Z
    3526:	20 68       	ori	r18, 0x80	; 128
    3528:	fc 01       	movw	r30, r24
    352a:	20 83       	st	Z, r18
    352c:	8b e2       	ldi	r24, 0x2B	; 43
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	2b e2       	ldi	r18, 0x2B	; 43
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	f9 01       	movw	r30, r18
    3536:	20 81       	ld	r18, Z
    3538:	2f 77       	andi	r18, 0x7F	; 127
    353a:	fc 01       	movw	r30, r24
    353c:	20 83       	st	Z, r18
	HAL_GPIO_PIN(rcvLED, B, 4)						//
    353e:	84 e2       	ldi	r24, 0x24	; 36
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	24 e2       	ldi	r18, 0x24	; 36
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	f9 01       	movw	r30, r18
    3548:	20 81       	ld	r18, Z
    354a:	20 61       	ori	r18, 0x10	; 16
    354c:	fc 01       	movw	r30, r24
    354e:	20 83       	st	Z, r18
    3550:	85 e2       	ldi	r24, 0x25	; 37
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	25 e2       	ldi	r18, 0x25	; 37
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	f9 01       	movw	r30, r18
    355a:	20 81       	ld	r18, Z
    355c:	2f 7e       	andi	r18, 0xEF	; 239
    355e:	fc 01       	movw	r30, r24
    3560:	20 83       	st	Z, r18
	HAL_GPIO_PIN(lightStripData, D, 4)				// This pin is brought out to the S-LED connector strip
    3562:	8a e2       	ldi	r24, 0x2A	; 42
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	2a e2       	ldi	r18, 0x2A	; 42
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	f9 01       	movw	r30, r18
    356c:	20 81       	ld	r18, Z
    356e:	20 61       	ori	r18, 0x10	; 16
    3570:	fc 01       	movw	r30, r24
    3572:	20 83       	st	Z, r18
    3574:	8b e2       	ldi	r24, 0x2B	; 43
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	2b e2       	ldi	r18, 0x2B	; 43
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	f9 01       	movw	r30, r18
    357e:	20 81       	ld	r18, Z
    3580:	2f 7e       	andi	r18, 0xEF	; 239
    3582:	fc 01       	movw	r30, r24
    3584:	20 83       	st	Z, r18
#else
													// There's a problem if this is executed
#endif
	HAL_GPIO_PIN(debug1, E, 4)						// General debugging outputs
    3586:	8d e2       	ldi	r24, 0x2D	; 45
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	2d e2       	ldi	r18, 0x2D	; 45
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	f9 01       	movw	r30, r18
    3590:	20 81       	ld	r18, Z
    3592:	20 61       	ori	r18, 0x10	; 16
    3594:	fc 01       	movw	r30, r24
    3596:	20 83       	st	Z, r18
    3598:	8e e2       	ldi	r24, 0x2E	; 46
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	2e e2       	ldi	r18, 0x2E	; 46
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	f9 01       	movw	r30, r18
    35a2:	20 81       	ld	r18, Z
    35a4:	2f 7e       	andi	r18, 0xEF	; 239
    35a6:	fc 01       	movw	r30, r24
    35a8:	20 83       	st	Z, r18
	HAL_GPIO_PIN(debug2, E, 5)
    35aa:	8d e2       	ldi	r24, 0x2D	; 45
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	2d e2       	ldi	r18, 0x2D	; 45
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	f9 01       	movw	r30, r18
    35b4:	20 81       	ld	r18, Z
    35b6:	20 62       	ori	r18, 0x20	; 32
    35b8:	fc 01       	movw	r30, r24
    35ba:	20 83       	st	Z, r18
    35bc:	8e e2       	ldi	r24, 0x2E	; 46
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	2e e2       	ldi	r18, 0x2E	; 46
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	f9 01       	movw	r30, r18
    35c6:	20 81       	ld	r18, Z
    35c8:	2f 7d       	andi	r18, 0xDF	; 223
    35ca:	fc 01       	movw	r30, r24
    35cc:	20 83       	st	Z, r18
	HAL_GPIO_PIN(debug3, E, 6)
    35ce:	8d e2       	ldi	r24, 0x2D	; 45
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	2d e2       	ldi	r18, 0x2D	; 45
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	f9 01       	movw	r30, r18
    35d8:	20 81       	ld	r18, Z
    35da:	20 64       	ori	r18, 0x40	; 64
    35dc:	fc 01       	movw	r30, r24
    35de:	20 83       	st	Z, r18
    35e0:	8e e2       	ldi	r24, 0x2E	; 46
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	2e e2       	ldi	r18, 0x2E	; 46
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	f9 01       	movw	r30, r18
    35ea:	20 81       	ld	r18, Z
    35ec:	2f 7b       	andi	r18, 0xBF	; 191
    35ee:	fc 01       	movw	r30, r24
    35f0:	20 83       	st	Z, r18
	HAL_GPIO_PIN(debug4, E, 7)
    35f2:	8d e2       	ldi	r24, 0x2D	; 45
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	2d e2       	ldi	r18, 0x2D	; 45
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	f9 01       	movw	r30, r18
    35fc:	20 81       	ld	r18, Z
    35fe:	20 68       	ori	r18, 0x80	; 128
    3600:	fc 01       	movw	r30, r24
    3602:	20 83       	st	Z, r18
    3604:	8e e2       	ldi	r24, 0x2E	; 46
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	2e e2       	ldi	r18, 0x2E	; 46
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	f9 01       	movw	r30, r18
    360e:	20 81       	ld	r18, Z
    3610:	2f 77       	andi	r18, 0x7F	; 127
    3612:	fc 01       	movw	r30, r24
    3614:	20 83       	st	Z, r18

	HAL_GPIO_PIN(syncInput, D, 0)					// For the sync
    3616:	8a e2       	ldi	r24, 0x2A	; 42
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	2a e2       	ldi	r18, 0x2A	; 42
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	f9 01       	movw	r30, r18
    3620:	20 81       	ld	r18, Z
    3622:	2e 7f       	andi	r18, 0xFE	; 254
    3624:	fc 01       	movw	r30, r24
    3626:	20 83       	st	Z, r18
    3628:	8b e2       	ldi	r24, 0x2B	; 43
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	2b e2       	ldi	r18, 0x2B	; 43
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	f9 01       	movw	r30, r18
    3632:	20 81       	ld	r18, Z
    3634:	2e 7f       	andi	r18, 0xFE	; 254
    3636:	fc 01       	movw	r30, r24
    3638:	20 83       	st	Z, r18
    363a:	8b e2       	ldi	r24, 0x2B	; 43
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	2b e2       	ldi	r18, 0x2B	; 43
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	f9 01       	movw	r30, r18
    3644:	20 81       	ld	r18, Z
    3646:	21 60       	ori	r18, 0x01	; 1
    3648:	fc 01       	movw	r30, r24
    364a:	20 83       	st	Z, r18
	HAL_GPIO_syncInput_in();
	HAL_GPIO_syncInput_pullup();
// Counters that make things that happen frequently more visible to
// an observer. This will make the outputs blink, rather than just
// appear dimmer or brighter.
	debug1Blink = 0;
    364c:	10 92 35 0b 	sts	0x0B35, r1
    3650:	10 92 34 0b 	sts	0x0B34, r1
	debug2Blink = 0;
    3654:	10 92 37 0b 	sts	0x0B37, r1
    3658:	10 92 36 0b 	sts	0x0B36, r1
	debug3Blink = 0;
    365c:	10 92 39 0b 	sts	0x0B39, r1
    3660:	10 92 38 0b 	sts	0x0B38, r1
	debug4Blink = 0;
    3664:	10 92 3b 0b 	sts	0x0B3B, r1
    3668:	10 92 3a 0b 	sts	0x0B3A, r1
// Initialize the animation variables / parameters.  That way if a parameter is not provided
// via the command message, there is a default value for it.
//		Default to static / fixed mode to start
	currentLEDmode = STATIC;
    366c:	10 92 2f 0b 	sts	0x0B2F, r1
//		For the random mode(s)
	randomFreq = 512;
    3670:	80 e0       	ldi	r24, 0x00	; 0
    3672:	92 e0       	ldi	r25, 0x02	; 2
    3674:	90 93 c4 0a 	sts	0x0AC4, r25
    3678:	80 93 c3 0a 	sts	0x0AC3, r24
//		For the throb mode
	throbDelta = 4;
    367c:	84 e0       	ldi	r24, 0x04	; 4
    367e:	80 93 c5 0a 	sts	0x0AC5, r24
// Initialize the LED string to 1/4 brightness, white color
	for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    3682:	1b 82       	std	Y+3, r1	; 0x03
    3684:	1a 82       	std	Y+2, r1	; 0x02
    3686:	19 c0       	rjmp	.+50     	; 0x36ba <appInit+0x396>
	{
		LEDarray[LED_ptr] = 0;			// Green
    3688:	8a 81       	ldd	r24, Y+2	; 0x02
    368a:	9b 81       	ldd	r25, Y+3	; 0x03
    368c:	81 53       	subi	r24, 0x31	; 49
    368e:	95 4f       	sbci	r25, 0xF5	; 245
    3690:	fc 01       	movw	r30, r24
    3692:	10 82       	st	Z, r1
		LEDarray[LED_ptr+1] = 0;		// Red
    3694:	8a 81       	ldd	r24, Y+2	; 0x02
    3696:	9b 81       	ldd	r25, Y+3	; 0x03
    3698:	01 96       	adiw	r24, 0x01	; 1
    369a:	81 53       	subi	r24, 0x31	; 49
    369c:	95 4f       	sbci	r25, 0xF5	; 245
    369e:	fc 01       	movw	r30, r24
    36a0:	10 82       	st	Z, r1
		LEDarray[LED_ptr+2] = 0;		// Blue
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	9b 81       	ldd	r25, Y+3	; 0x03
    36a6:	02 96       	adiw	r24, 0x02	; 2
    36a8:	81 53       	subi	r24, 0x31	; 49
    36aa:	95 4f       	sbci	r25, 0xF5	; 245
    36ac:	fc 01       	movw	r30, r24
    36ae:	10 82       	st	Z, r1
//		For the random mode(s)
	randomFreq = 512;
//		For the throb mode
	throbDelta = 4;
// Initialize the LED string to 1/4 brightness, white color
	for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    36b0:	8a 81       	ldd	r24, Y+2	; 0x02
    36b2:	9b 81       	ldd	r25, Y+3	; 0x03
    36b4:	03 96       	adiw	r24, 0x03	; 3
    36b6:	9b 83       	std	Y+3, r25	; 0x03
    36b8:	8a 83       	std	Y+2, r24	; 0x02
    36ba:	8a 81       	ldd	r24, Y+2	; 0x02
    36bc:	9b 81       	ldd	r25, Y+3	; 0x03
    36be:	80 33       	cpi	r24, 0x30	; 48
    36c0:	91 05       	cpc	r25, r1
    36c2:	14 f3       	brlt	.-60     	; 0x3688 <appInit+0x364>
	{
		LEDarray[LED_ptr] = 0;			// Green
		LEDarray[LED_ptr+1] = 0;		// Red
		LEDarray[LED_ptr+2] = 0;		// Blue
	}
	updateLEDs(LEDarray, NUM_LEDS*3);
    36c4:	8f ec       	ldi	r24, 0xCF	; 207
    36c6:	9a e0       	ldi	r25, 0x0A	; 10
    36c8:	60 e3       	ldi	r22, 0x30	; 48
    36ca:	70 e0       	ldi	r23, 0x00	; 0
    36cc:	0e 94 b2 00 	call	0x164	; 0x164 <updateLEDs>
	syncOn = false;
    36d0:	10 92 ce 0a 	sts	0x0ACE, r1
// Initialize the state of the flag that says the network is available for transmission
	appDataReqBusy = false;
    36d4:	10 92 da 09 	sts	0x09DA, r1
	
// Broadcast this mote's address
	appWorkingBufferPtr = 2;
    36d8:	82 e0       	ldi	r24, 0x02	; 2
    36da:	80 93 b7 0a 	sts	0x0AB7, r24
	appWorkingBuffer[0] = APP_ADDR;
    36de:	80 91 00 00 	lds	r24, 0x0000
    36e2:	90 91 01 00 	lds	r25, 0x0001
    36e6:	80 93 4a 0a 	sts	0x0A4A, r24
	appWorkingBuffer[1] = 0;
    36ea:	10 92 4b 0a 	sts	0x0A4B, r1
	appSendAddr();
    36ee:	0e 94 81 14 	call	0x2902	; 0x2902 <appSendAddr>
//. Initialize the buffer length
	appWorkingBufferPtr = 0;
    36f2:	10 92 b7 0a 	sts	0x0AB7, r1
// This is a flag used for flashing alternate status outputs on the debug port
//	blanking = 1;
	}
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	0f 90       	pop	r0
    36fe:	df 91       	pop	r29
    3700:	cf 91       	pop	r28
    3702:	08 95       	ret

00003704 <APP_TaskHandler>:

/*****************************************************************************
		Task Handler
*****************************************************************************/
static void APP_TaskHandler(void)
{
    3704:	cf 93       	push	r28
    3706:	df 93       	push	r29
    3708:	00 d0       	rcall	.+0      	; 0x370a <APP_TaskHandler+0x6>
    370a:	cd b7       	in	r28, 0x3d	; 61
    370c:	de b7       	in	r29, 0x3e	; 62
// The app is implemented via a state machine which depends upon the appState
// variable to hold the current value
    switch (appState)
    370e:	80 91 76 09 	lds	r24, 0x0976
    3712:	88 2f       	mov	r24, r24
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	81 30       	cpi	r24, 0x01	; 1
    3718:	91 05       	cpc	r25, r1
    371a:	99 f0       	breq	.+38     	; 0x3742 <APP_TaskHandler+0x3e>
    371c:	82 30       	cpi	r24, 0x02	; 2
    371e:	91 05       	cpc	r25, r1
    3720:	1c f4       	brge	.+6      	; 0x3728 <APP_TaskHandler+0x24>
    3722:	00 97       	sbiw	r24, 0x00	; 0
    3724:	41 f0       	breq	.+16     	; 0x3736 <APP_TaskHandler+0x32>
    3726:	2b c1       	rjmp	.+598    	; 0x397e <APP_TaskHandler+0x27a>
    3728:	82 30       	cpi	r24, 0x02	; 2
    372a:	91 05       	cpc	r25, r1
    372c:	51 f1       	breq	.+84     	; 0x3782 <APP_TaskHandler+0x7e>
    372e:	83 30       	cpi	r24, 0x03	; 3
    3730:	91 05       	cpc	r25, r1
    3732:	91 f0       	breq	.+36     	; 0x3758 <APP_TaskHandler+0x54>
    3734:	24 c1       	rjmp	.+584    	; 0x397e <APP_TaskHandler+0x27a>
	{
// This should ensure that the initialization function is only execute once
		case APP_STATE_INITIAL:
		{
			appInit();
    3736:	0e 94 92 19 	call	0x3324	; 0x3324 <appInit>
			appState = APP_STATE_IDLE;
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	80 93 76 09 	sts	0x0976, r24
		} break;
    3740:	9c c1       	rjmp	.+824    	; 0x3a7a <APP_TaskHandler+0x376>
    3742:	89 e2       	ldi	r24, 0x29	; 41
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	fc 01       	movw	r30, r24
    3748:	80 81       	ld	r24, Z
    374a:	81 70       	andi	r24, 0x01	; 1
// This is the do-nothing case
		case APP_STATE_IDLE:
			if (!HAL_GPIO_syncInput_read())
    374c:	88 23       	and	r24, r24
    374e:	09 f0       	breq	.+2      	; 0x3752 <APP_TaskHandler+0x4e>
    3750:	8f c1       	rjmp	.+798    	; 0x3a70 <APP_TaskHandler+0x36c>
			{
				appSendSync();
    3752:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <appSendSync>
			}
		break;
    3756:	8c c1       	rjmp	.+792    	; 0x3a70 <APP_TaskHandler+0x36c>
    3758:	89 e2       	ldi	r24, 0x29	; 41
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	fc 01       	movw	r30, r24
    375e:	80 81       	ld	r24, Z
    3760:	81 70       	andi	r24, 0x01	; 1
// This is the default local mode for when there is no command node
		case APP_STATE_LOCAL:
		{
			if (!HAL_GPIO_syncInput_read())
    3762:	88 23       	and	r24, r24
    3764:	09 f0       	breq	.+2      	; 0x3768 <APP_TaskHandler+0x64>
    3766:	86 c1       	rjmp	.+780    	; 0x3a74 <APP_TaskHandler+0x370>
	HAL_GPIO_PIN(statusLED, E, 1)					// General status flag
	HAL_GPIO_PIN(rcvLED, E, 2)
	HAL_GPIO_PIN(lightStripData, E, 3)				// This is the serial output to drive the LED strip
#elif BOARD_VERSION == 2							// Board 2 has a connector with pin D4 used for the LED output
	HAL_GPIO_PIN(hbLED, G, 0)						// This is the LED near the antenna on the board
	HAL_GPIO_PIN(statusLED, D, 7)					// This is the LED near the power regulator on the board
    3768:	8b e2       	ldi	r24, 0x2B	; 43
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	2b e2       	ldi	r18, 0x2B	; 43
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	f9 01       	movw	r30, r18
    3772:	30 81       	ld	r19, Z
    3774:	20 e8       	ldi	r18, 0x80	; 128
    3776:	23 27       	eor	r18, r19
    3778:	fc 01       	movw	r30, r24
    377a:	20 83       	st	Z, r18
			{
				HAL_GPIO_statusLED_toggle();
				appSendSync();
    377c:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <appSendSync>
			}
		} break;
    3780:	79 c1       	rjmp	.+754    	; 0x3a74 <APP_TaskHandler+0x370>
// When a new command is received, this state is set by the callback function handling
// messages on the LED command app endpoint
		case APP_STATE_DATARDY:
		{
			if (cmdBuffer->mode == MODE_GLOBAL)
    3782:	80 91 b9 0a 	lds	r24, 0x0AB9
    3786:	90 91 ba 0a 	lds	r25, 0x0ABA
    378a:	fc 01       	movw	r30, r24
    378c:	80 81       	ld	r24, Z
    378e:	88 23       	and	r24, r24
    3790:	09 f0       	breq	.+2      	; 0x3794 <APP_TaskHandler+0x90>
    3792:	df c0       	rjmp	.+446    	; 0x3952 <APP_TaskHandler+0x24e>
			{
//				Set up the common parameters provided by the command message
				currentLEDmode = cmdBuffer->subMode;
    3794:	80 91 b9 0a 	lds	r24, 0x0AB9
    3798:	90 91 ba 0a 	lds	r25, 0x0ABA
    379c:	fc 01       	movw	r30, r24
    379e:	81 81       	ldd	r24, Z+1	; 0x01
    37a0:	80 93 2f 0b 	sts	0x0B2F, r24
				switch (currentLEDmode)
    37a4:	80 91 2f 0b 	lds	r24, 0x0B2F
    37a8:	88 2f       	mov	r24, r24
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	84 30       	cpi	r24, 0x04	; 4
    37ae:	91 05       	cpc	r25, r1
    37b0:	91 f0       	breq	.+36     	; 0x37d6 <APP_TaskHandler+0xd2>
    37b2:	87 30       	cpi	r24, 0x07	; 7
    37b4:	91 05       	cpc	r25, r1
    37b6:	f1 f0       	breq	.+60     	; 0x37f4 <APP_TaskHandler+0xf0>
    37b8:	83 30       	cpi	r24, 0x03	; 3
    37ba:	91 05       	cpc	r25, r1
    37bc:	f9 f4       	brne	.+62     	; 0x37fc <APP_TaskHandler+0xf8>
				{
					case RANDOM:
					{
						randomFreq = cmdBuffer->modeParam;
    37be:	80 91 b9 0a 	lds	r24, 0x0AB9
    37c2:	90 91 ba 0a 	lds	r25, 0x0ABA
    37c6:	fc 01       	movw	r30, r24
    37c8:	82 a9       	sts	0x42, r24
    37ca:	93 a9       	sts	0x43, r25
    37cc:	90 93 c4 0a 	sts	0x0AC4, r25
    37d0:	80 93 c3 0a 	sts	0x0AC3, r24
					}	break;
    37d4:	14 c0       	rjmp	.+40     	; 0x37fe <APP_TaskHandler+0xfa>
					case THROB:
					{
						throbDelta = cmdBuffer->modeParam;
    37d6:	80 91 b9 0a 	lds	r24, 0x0AB9
    37da:	90 91 ba 0a 	lds	r25, 0x0ABA
    37de:	fc 01       	movw	r30, r24
    37e0:	82 a9       	sts	0x42, r24
    37e2:	93 a9       	sts	0x43, r25
    37e4:	80 93 c5 0a 	sts	0x0AC5, r24
						throbFade = 1;
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	80 93 c7 0a 	sts	0x0AC7, r24
						throbTimerAccel = 0;
    37ee:	10 92 c8 0a 	sts	0x0AC8, r1
					}	break;
    37f2:	05 c0       	rjmp	.+10     	; 0x37fe <APP_TaskHandler+0xfa>
					case ONESHOT:
					{
						pulseOn = true;
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	80 93 cd 0a 	sts	0x0ACD, r24
					}	break;
    37fa:	01 c0       	rjmp	.+2      	; 0x37fe <APP_TaskHandler+0xfa>
					default:
					break;
    37fc:	00 00       	nop
				}
				animationTimer.interval = cmdBuffer->period_mS;
    37fe:	80 91 b9 0a 	lds	r24, 0x0AB9
    3802:	90 91 ba 0a 	lds	r25, 0x0ABA
    3806:	fc 01       	movw	r30, r24
    3808:	84 a9       	sts	0x44, r24
    380a:	95 a9       	sts	0x45, r25
    380c:	a6 a9       	sts	0x46, r26
    380e:	b7 a9       	sts	0x47, r27
    3810:	80 93 8a 09 	sts	0x098A, r24
    3814:	90 93 8b 09 	sts	0x098B, r25
    3818:	a0 93 8c 09 	sts	0x098C, r26
    381c:	b0 93 8d 09 	sts	0x098D, r27
				animationTimerPeriod = cmdBuffer->period_mS;
    3820:	80 91 b9 0a 	lds	r24, 0x0AB9
    3824:	90 91 ba 0a 	lds	r25, 0x0ABA
    3828:	fc 01       	movw	r30, r24
    382a:	84 a9       	sts	0x44, r24
    382c:	95 a9       	sts	0x45, r25
    382e:	a6 a9       	sts	0x46, r26
    3830:	b7 a9       	sts	0x47, r27
    3832:	90 93 cc 0a 	sts	0x0ACC, r25
    3836:	80 93 cb 0a 	sts	0x0ACB, r24

//				This mode is fixed color mode where command provides a color pattern
				cmdBufferPtr = 0;
    383a:	10 92 bc 0a 	sts	0x0ABC, r1
    383e:	10 92 bb 0a 	sts	0x0ABB, r1
				for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    3842:	1a 82       	std	Y+2, r1	; 0x02
    3844:	19 82       	std	Y+1, r1	; 0x01
    3846:	75 c0       	rjmp	.+234    	; 0x3932 <APP_TaskHandler+0x22e>
				{
					LEDarray[LED_ptr] = cmdBuffer->grnIntensity[cmdBufferPtr];			// Green
    3848:	20 91 b9 0a 	lds	r18, 0x0AB9
    384c:	30 91 ba 0a 	lds	r19, 0x0ABA
    3850:	80 91 bb 0a 	lds	r24, 0x0ABB
    3854:	90 91 bc 0a 	lds	r25, 0x0ABC
    3858:	82 0f       	add	r24, r18
    385a:	93 1f       	adc	r25, r19
    385c:	42 96       	adiw	r24, 0x12	; 18
    385e:	fc 01       	movw	r30, r24
    3860:	20 81       	ld	r18, Z
    3862:	89 81       	ldd	r24, Y+1	; 0x01
    3864:	9a 81       	ldd	r25, Y+2	; 0x02
    3866:	81 53       	subi	r24, 0x31	; 49
    3868:	95 4f       	sbci	r25, 0xF5	; 245
    386a:	fc 01       	movw	r30, r24
    386c:	20 83       	st	Z, r18
					LEDpattern[LED_ptr] = LEDarray[LED_ptr];
    386e:	89 81       	ldd	r24, Y+1	; 0x01
    3870:	9a 81       	ldd	r25, Y+2	; 0x02
    3872:	81 53       	subi	r24, 0x31	; 49
    3874:	95 4f       	sbci	r25, 0xF5	; 245
    3876:	fc 01       	movw	r30, r24
    3878:	20 81       	ld	r18, Z
    387a:	89 81       	ldd	r24, Y+1	; 0x01
    387c:	9a 81       	ldd	r25, Y+2	; 0x02
    387e:	81 50       	subi	r24, 0x01	; 1
    3880:	95 4f       	sbci	r25, 0xF5	; 245
    3882:	fc 01       	movw	r30, r24
    3884:	20 83       	st	Z, r18
					LEDarray[LED_ptr+1] = cmdBuffer->redIntensity[cmdBufferPtr];		// Red
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	9a 81       	ldd	r25, Y+2	; 0x02
    388a:	01 96       	adiw	r24, 0x01	; 1
    388c:	40 91 b9 0a 	lds	r20, 0x0AB9
    3890:	50 91 ba 0a 	lds	r21, 0x0ABA
    3894:	20 91 bb 0a 	lds	r18, 0x0ABB
    3898:	30 91 bc 0a 	lds	r19, 0x0ABC
    389c:	24 0f       	add	r18, r20
    389e:	35 1f       	adc	r19, r21
    38a0:	2e 5f       	subi	r18, 0xFE	; 254
    38a2:	3f 4f       	sbci	r19, 0xFF	; 255
    38a4:	f9 01       	movw	r30, r18
    38a6:	20 81       	ld	r18, Z
    38a8:	81 53       	subi	r24, 0x31	; 49
    38aa:	95 4f       	sbci	r25, 0xF5	; 245
    38ac:	fc 01       	movw	r30, r24
    38ae:	20 83       	st	Z, r18
					LEDpattern[LED_ptr+1] = LEDarray[LED_ptr+1];
    38b0:	89 81       	ldd	r24, Y+1	; 0x01
    38b2:	9a 81       	ldd	r25, Y+2	; 0x02
    38b4:	01 96       	adiw	r24, 0x01	; 1
    38b6:	29 81       	ldd	r18, Y+1	; 0x01
    38b8:	3a 81       	ldd	r19, Y+2	; 0x02
    38ba:	2f 5f       	subi	r18, 0xFF	; 255
    38bc:	3f 4f       	sbci	r19, 0xFF	; 255
    38be:	21 53       	subi	r18, 0x31	; 49
    38c0:	35 4f       	sbci	r19, 0xF5	; 245
    38c2:	f9 01       	movw	r30, r18
    38c4:	20 81       	ld	r18, Z
    38c6:	81 50       	subi	r24, 0x01	; 1
    38c8:	95 4f       	sbci	r25, 0xF5	; 245
    38ca:	fc 01       	movw	r30, r24
    38cc:	20 83       	st	Z, r18
					LEDarray[LED_ptr+2] = cmdBuffer->bluIntensity[cmdBufferPtr];		// Blue
    38ce:	89 81       	ldd	r24, Y+1	; 0x01
    38d0:	9a 81       	ldd	r25, Y+2	; 0x02
    38d2:	02 96       	adiw	r24, 0x02	; 2
    38d4:	40 91 b9 0a 	lds	r20, 0x0AB9
    38d8:	50 91 ba 0a 	lds	r21, 0x0ABA
    38dc:	20 91 bb 0a 	lds	r18, 0x0ABB
    38e0:	30 91 bc 0a 	lds	r19, 0x0ABC
    38e4:	24 0f       	add	r18, r20
    38e6:	35 1f       	adc	r19, r21
    38e8:	2e 5d       	subi	r18, 0xDE	; 222
    38ea:	3f 4f       	sbci	r19, 0xFF	; 255
    38ec:	f9 01       	movw	r30, r18
    38ee:	20 81       	ld	r18, Z
    38f0:	81 53       	subi	r24, 0x31	; 49
    38f2:	95 4f       	sbci	r25, 0xF5	; 245
    38f4:	fc 01       	movw	r30, r24
    38f6:	20 83       	st	Z, r18
					LEDpattern[LED_ptr+2] = LEDarray[LED_ptr+2];
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	9a 81       	ldd	r25, Y+2	; 0x02
    38fc:	02 96       	adiw	r24, 0x02	; 2
    38fe:	29 81       	ldd	r18, Y+1	; 0x01
    3900:	3a 81       	ldd	r19, Y+2	; 0x02
    3902:	2e 5f       	subi	r18, 0xFE	; 254
    3904:	3f 4f       	sbci	r19, 0xFF	; 255
    3906:	21 53       	subi	r18, 0x31	; 49
    3908:	35 4f       	sbci	r19, 0xF5	; 245
    390a:	f9 01       	movw	r30, r18
    390c:	20 81       	ld	r18, Z
    390e:	81 50       	subi	r24, 0x01	; 1
    3910:	95 4f       	sbci	r25, 0xF5	; 245
    3912:	fc 01       	movw	r30, r24
    3914:	20 83       	st	Z, r18
					cmdBufferPtr++;
    3916:	80 91 bb 0a 	lds	r24, 0x0ABB
    391a:	90 91 bc 0a 	lds	r25, 0x0ABC
    391e:	01 96       	adiw	r24, 0x01	; 1
    3920:	90 93 bc 0a 	sts	0x0ABC, r25
    3924:	80 93 bb 0a 	sts	0x0ABB, r24
				animationTimer.interval = cmdBuffer->period_mS;
				animationTimerPeriod = cmdBuffer->period_mS;

//				This mode is fixed color mode where command provides a color pattern
				cmdBufferPtr = 0;
				for (int LED_ptr=0;LED_ptr<NUM_LEDS*3;LED_ptr+=3)
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	9a 81       	ldd	r25, Y+2	; 0x02
    392c:	03 96       	adiw	r24, 0x03	; 3
    392e:	9a 83       	std	Y+2, r25	; 0x02
    3930:	89 83       	std	Y+1, r24	; 0x01
    3932:	89 81       	ldd	r24, Y+1	; 0x01
    3934:	9a 81       	ldd	r25, Y+2	; 0x02
    3936:	80 33       	cpi	r24, 0x30	; 48
    3938:	91 05       	cpc	r25, r1
    393a:	0c f4       	brge	.+2      	; 0x393e <APP_TaskHandler+0x23a>
    393c:	85 cf       	rjmp	.-246    	; 0x3848 <APP_TaskHandler+0x144>
					LEDpattern[LED_ptr+1] = LEDarray[LED_ptr+1];
					LEDarray[LED_ptr+2] = cmdBuffer->bluIntensity[cmdBufferPtr];		// Blue
					LEDpattern[LED_ptr+2] = LEDarray[LED_ptr+2];
					cmdBufferPtr++;
				}
				updateLEDs(LEDarray, NUM_LEDS*3);
    393e:	8f ec       	ldi	r24, 0xCF	; 207
    3940:	9a e0       	ldi	r25, 0x0A	; 10
    3942:	60 e3       	ldi	r22, 0x30	; 48
    3944:	70 e0       	ldi	r23, 0x00	; 0
    3946:	0e 94 b2 00 	call	0x164	; 0x164 <updateLEDs>
				appState = APP_STATE_IDLE;
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	80 93 76 09 	sts	0x0976, r24
    3950:	12 c0       	rjmp	.+36     	; 0x3976 <APP_TaskHandler+0x272>

// This is for the non-centrally controlled operation.  It should be the default when the node
// starts up and does not get any communications from a controller.
			} else if (cmdBuffer->mode == MODE_PEER_TO_PEER)
    3952:	80 91 b9 0a 	lds	r24, 0x0AB9
    3956:	90 91 ba 0a 	lds	r25, 0x0ABA
    395a:	fc 01       	movw	r30, r24
    395c:	80 81       	ld	r24, Z
    395e:	81 30       	cpi	r24, 0x01	; 1
    3960:	51 f0       	breq	.+20     	; 0x3976 <APP_TaskHandler+0x272>
			{
//					updateLEDs(LEDarray, NUM_LEDS);
// This is used to clear the command timeout
			} else if (cmdBuffer->mode == MODE_NOCHANGE)
    3962:	80 91 b9 0a 	lds	r24, 0x0AB9
    3966:	90 91 ba 0a 	lds	r25, 0x0ABA
    396a:	fc 01       	movw	r30, r24
    396c:	80 81       	ld	r24, Z
    396e:	82 30       	cpi	r24, 0x02	; 2
    3970:	11 f4       	brne	.+4      	; 0x3976 <APP_TaskHandler+0x272>
			{
				cmdTimeout = false;
    3972:	10 92 dc 09 	sts	0x09DC, r1
// This should never be executed, because the state should always be defined as one of the
// previous cases!
			} else
			{
			}
			appState = APP_STATE_IDLE;
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	80 93 76 09 	sts	0x0976, r24
			
		} break;
    397c:	7e c0       	rjmp	.+252    	; 0x3a7a <APP_TaskHandler+0x376>

		default:
// Some debugging patches saved here to avoid warning of non-use
// The parameter in the If statement controls how often the state of the output
// pin is changed.  The counters are initialized in the app init function.
debug1Blink++;
    397e:	80 91 34 0b 	lds	r24, 0x0B34
    3982:	90 91 35 0b 	lds	r25, 0x0B35
    3986:	01 96       	adiw	r24, 0x01	; 1
    3988:	90 93 35 0b 	sts	0x0B35, r25
    398c:	80 93 34 0b 	sts	0x0B34, r24
if (debug1Blink > 2) {
    3990:	80 91 34 0b 	lds	r24, 0x0B34
    3994:	90 91 35 0b 	lds	r25, 0x0B35
    3998:	83 30       	cpi	r24, 0x03	; 3
    399a:	91 05       	cpc	r25, r1
    399c:	70 f0       	brcs	.+28     	; 0x39ba <APP_TaskHandler+0x2b6>
	debug1Blink = 0;
    399e:	10 92 35 0b 	sts	0x0B35, r1
    39a2:	10 92 34 0b 	sts	0x0B34, r1
	HAL_GPIO_PIN(rcvLED, B, 4)						//
	HAL_GPIO_PIN(lightStripData, D, 4)				// This pin is brought out to the S-LED connector strip
#else
													// There's a problem if this is executed
#endif
	HAL_GPIO_PIN(debug1, E, 4)						// General debugging outputs
    39a6:	8e e2       	ldi	r24, 0x2E	; 46
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	2e e2       	ldi	r18, 0x2E	; 46
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	f9 01       	movw	r30, r18
    39b0:	30 81       	ld	r19, Z
    39b2:	20 e1       	ldi	r18, 0x10	; 16
    39b4:	23 27       	eor	r18, r19
    39b6:	fc 01       	movw	r30, r24
    39b8:	20 83       	st	Z, r18
	HAL_GPIO_debug1_toggle();
}
debug2Blink++;
    39ba:	80 91 36 0b 	lds	r24, 0x0B36
    39be:	90 91 37 0b 	lds	r25, 0x0B37
    39c2:	01 96       	adiw	r24, 0x01	; 1
    39c4:	90 93 37 0b 	sts	0x0B37, r25
    39c8:	80 93 36 0b 	sts	0x0B36, r24
if (debug2Blink > 1) {
    39cc:	80 91 36 0b 	lds	r24, 0x0B36
    39d0:	90 91 37 0b 	lds	r25, 0x0B37
    39d4:	82 30       	cpi	r24, 0x02	; 2
    39d6:	91 05       	cpc	r25, r1
    39d8:	70 f0       	brcs	.+28     	; 0x39f6 <APP_TaskHandler+0x2f2>
	debug2Blink = 0;
    39da:	10 92 37 0b 	sts	0x0B37, r1
    39de:	10 92 36 0b 	sts	0x0B36, r1
	HAL_GPIO_PIN(debug2, E, 5)
    39e2:	8e e2       	ldi	r24, 0x2E	; 46
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	2e e2       	ldi	r18, 0x2E	; 46
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	f9 01       	movw	r30, r18
    39ec:	30 81       	ld	r19, Z
    39ee:	20 e2       	ldi	r18, 0x20	; 32
    39f0:	23 27       	eor	r18, r19
    39f2:	fc 01       	movw	r30, r24
    39f4:	20 83       	st	Z, r18
	HAL_GPIO_debug2_toggle();
}
debug3Blink++;
    39f6:	80 91 38 0b 	lds	r24, 0x0B38
    39fa:	90 91 39 0b 	lds	r25, 0x0B39
    39fe:	01 96       	adiw	r24, 0x01	; 1
    3a00:	90 93 39 0b 	sts	0x0B39, r25
    3a04:	80 93 38 0b 	sts	0x0B38, r24
if (debug3Blink > 1) {
    3a08:	80 91 38 0b 	lds	r24, 0x0B38
    3a0c:	90 91 39 0b 	lds	r25, 0x0B39
    3a10:	82 30       	cpi	r24, 0x02	; 2
    3a12:	91 05       	cpc	r25, r1
    3a14:	70 f0       	brcs	.+28     	; 0x3a32 <APP_TaskHandler+0x32e>
	debug3Blink = 0;
    3a16:	10 92 39 0b 	sts	0x0B39, r1
    3a1a:	10 92 38 0b 	sts	0x0B38, r1
	HAL_GPIO_PIN(debug3, E, 6)
    3a1e:	8e e2       	ldi	r24, 0x2E	; 46
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	2e e2       	ldi	r18, 0x2E	; 46
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	f9 01       	movw	r30, r18
    3a28:	30 81       	ld	r19, Z
    3a2a:	20 e4       	ldi	r18, 0x40	; 64
    3a2c:	23 27       	eor	r18, r19
    3a2e:	fc 01       	movw	r30, r24
    3a30:	20 83       	st	Z, r18
	HAL_GPIO_debug3_toggle();
}
debug4Blink++;
    3a32:	80 91 3a 0b 	lds	r24, 0x0B3A
    3a36:	90 91 3b 0b 	lds	r25, 0x0B3B
    3a3a:	01 96       	adiw	r24, 0x01	; 1
    3a3c:	90 93 3b 0b 	sts	0x0B3B, r25
    3a40:	80 93 3a 0b 	sts	0x0B3A, r24
if (debug4Blink > 1) {
    3a44:	80 91 3a 0b 	lds	r24, 0x0B3A
    3a48:	90 91 3b 0b 	lds	r25, 0x0B3B
    3a4c:	82 30       	cpi	r24, 0x02	; 2
    3a4e:	91 05       	cpc	r25, r1
    3a50:	98 f0       	brcs	.+38     	; 0x3a78 <APP_TaskHandler+0x374>
	debug4Blink = 0;
    3a52:	10 92 3b 0b 	sts	0x0B3B, r1
    3a56:	10 92 3a 0b 	sts	0x0B3A, r1
	HAL_GPIO_PIN(debug4, E, 7)
    3a5a:	8e e2       	ldi	r24, 0x2E	; 46
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	2e e2       	ldi	r18, 0x2E	; 46
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	f9 01       	movw	r30, r18
    3a64:	30 81       	ld	r19, Z
    3a66:	20 e8       	ldi	r18, 0x80	; 128
    3a68:	23 27       	eor	r18, r19
    3a6a:	fc 01       	movw	r30, r24
    3a6c:	20 83       	st	Z, r18
	HAL_GPIO_debug4_toggle();
}
		break;
    3a6e:	04 c0       	rjmp	.+8      	; 0x3a78 <APP_TaskHandler+0x374>
		case APP_STATE_IDLE:
			if (!HAL_GPIO_syncInput_read())
			{
				appSendSync();
			}
		break;
    3a70:	00 00       	nop
    3a72:	03 c0       	rjmp	.+6      	; 0x3a7a <APP_TaskHandler+0x376>
			if (!HAL_GPIO_syncInput_read())
			{
				HAL_GPIO_statusLED_toggle();
				appSendSync();
			}
		} break;
    3a74:	00 00       	nop
    3a76:	01 c0       	rjmp	.+2      	; 0x3a7a <APP_TaskHandler+0x376>
debug4Blink++;
if (debug4Blink > 1) {
	debug4Blink = 0;
	HAL_GPIO_debug4_toggle();
}
		break;
    3a78:	00 00       	nop
	}
}
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	df 91       	pop	r29
    3a80:	cf 91       	pop	r28
    3a82:	08 95       	ret

00003a84 <main>:

/*****************************************************************************
		Main Program
*****************************************************************************/
int main(void)
{
    3a84:	cf 93       	push	r28
    3a86:	df 93       	push	r29
    3a88:	cd b7       	in	r28, 0x3d	; 61
    3a8a:	de b7       	in	r29, 0x3e	; 62
// Initialize the system and network function infrastructure
	SYS_Init();
    3a8c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SYS_Init>
    3a90:	01 c0       	rjmp	.+2      	; 0x3a94 <main+0x10>
		mainLoopBlink++;
		if (mainLoopBlink > 25000) {
			mainLoopBlink = 0;
			HAL_GPIO_hbLED_toggle();
		}
	}
    3a92:	00 00       	nop
// Then loops indefinitely, alternating between processing system tasks and app tasks
	while (1)
// Execute all of the pending system and network stacks that make everything else work
// Note that this is where callbacks will be executed!
	{
		SYS_TaskHandler();
    3a94:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SYS_TaskHandler>
// Go do whatever the app state machine says is needed, if anything
// There may be nothing to do here if periodic timer handlers and callbacks can
// accomplish everything in an as-needed manner without polling.
		APP_TaskHandler();
    3a98:	0e 94 82 1b 	call	0x3704	; 0x3704 <APP_TaskHandler>
// This is just the heartbeat LED output that visually tells the observer that
// the application loop is running and also gives an indication of the loop execution
// time.  Each time the LED changes state, 25,000 loops have been executed.  For each on-off
// combination, that's 50,000 loops.
		mainLoopBlink++;
    3a9c:	80 91 32 0b 	lds	r24, 0x0B32
    3aa0:	90 91 33 0b 	lds	r25, 0x0B33
    3aa4:	01 96       	adiw	r24, 0x01	; 1
    3aa6:	90 93 33 0b 	sts	0x0B33, r25
    3aaa:	80 93 32 0b 	sts	0x0B32, r24
		if (mainLoopBlink > 25000) {
    3aae:	80 91 32 0b 	lds	r24, 0x0B32
    3ab2:	90 91 33 0b 	lds	r25, 0x0B33
    3ab6:	21 e6       	ldi	r18, 0x61	; 97
    3ab8:	89 3a       	cpi	r24, 0xA9	; 169
    3aba:	92 07       	cpc	r25, r18
    3abc:	50 f3       	brcs	.-44     	; 0x3a92 <main+0xe>
			mainLoopBlink = 0;
    3abe:	10 92 33 0b 	sts	0x0B33, r1
    3ac2:	10 92 32 0b 	sts	0x0B32, r1
	HAL_GPIO_PIN(hbLED, E, 0)						// The heartbeat flag
	HAL_GPIO_PIN(statusLED, E, 1)					// General status flag
	HAL_GPIO_PIN(rcvLED, E, 2)
	HAL_GPIO_PIN(lightStripData, E, 3)				// This is the serial output to drive the LED strip
#elif BOARD_VERSION == 2							// Board 2 has a connector with pin D4 used for the LED output
	HAL_GPIO_PIN(hbLED, G, 0)						// This is the LED near the antenna on the board
    3ac6:	84 e3       	ldi	r24, 0x34	; 52
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	24 e3       	ldi	r18, 0x34	; 52
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	f9 01       	movw	r30, r18
    3ad0:	30 81       	ld	r19, Z
    3ad2:	21 e0       	ldi	r18, 0x01	; 1
    3ad4:	23 27       	eor	r18, r19
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	20 83       	st	Z, r18
			HAL_GPIO_hbLED_toggle();
		}
	}
    3ada:	db cf       	rjmp	.-74     	; 0x3a92 <main+0xe>

00003adc <__mulsi3>:
    3adc:	62 9f       	mul	r22, r18
    3ade:	d0 01       	movw	r26, r0
    3ae0:	73 9f       	mul	r23, r19
    3ae2:	f0 01       	movw	r30, r0
    3ae4:	82 9f       	mul	r24, r18
    3ae6:	e0 0d       	add	r30, r0
    3ae8:	f1 1d       	adc	r31, r1
    3aea:	64 9f       	mul	r22, r20
    3aec:	e0 0d       	add	r30, r0
    3aee:	f1 1d       	adc	r31, r1
    3af0:	92 9f       	mul	r25, r18
    3af2:	f0 0d       	add	r31, r0
    3af4:	83 9f       	mul	r24, r19
    3af6:	f0 0d       	add	r31, r0
    3af8:	74 9f       	mul	r23, r20
    3afa:	f0 0d       	add	r31, r0
    3afc:	65 9f       	mul	r22, r21
    3afe:	f0 0d       	add	r31, r0
    3b00:	99 27       	eor	r25, r25
    3b02:	72 9f       	mul	r23, r18
    3b04:	b0 0d       	add	r27, r0
    3b06:	e1 1d       	adc	r30, r1
    3b08:	f9 1f       	adc	r31, r25
    3b0a:	63 9f       	mul	r22, r19
    3b0c:	b0 0d       	add	r27, r0
    3b0e:	e1 1d       	adc	r30, r1
    3b10:	f9 1f       	adc	r31, r25
    3b12:	bd 01       	movw	r22, r26
    3b14:	cf 01       	movw	r24, r30
    3b16:	11 24       	eor	r1, r1
    3b18:	08 95       	ret

00003b1a <__udivmodqi4>:
    3b1a:	99 1b       	sub	r25, r25
    3b1c:	79 e0       	ldi	r23, 0x09	; 9
    3b1e:	04 c0       	rjmp	.+8      	; 0x3b28 <__udivmodqi4_ep>

00003b20 <__udivmodqi4_loop>:
    3b20:	99 1f       	adc	r25, r25
    3b22:	96 17       	cp	r25, r22
    3b24:	08 f0       	brcs	.+2      	; 0x3b28 <__udivmodqi4_ep>
    3b26:	96 1b       	sub	r25, r22

00003b28 <__udivmodqi4_ep>:
    3b28:	88 1f       	adc	r24, r24
    3b2a:	7a 95       	dec	r23
    3b2c:	c9 f7       	brne	.-14     	; 0x3b20 <__udivmodqi4_loop>
    3b2e:	80 95       	com	r24
    3b30:	08 95       	ret

00003b32 <__divmodhi4>:
    3b32:	97 fb       	bst	r25, 7
    3b34:	09 2e       	mov	r0, r25
    3b36:	07 26       	eor	r0, r23
    3b38:	0a d0       	rcall	.+20     	; 0x3b4e <__divmodhi4_neg1>
    3b3a:	77 fd       	sbrc	r23, 7
    3b3c:	04 d0       	rcall	.+8      	; 0x3b46 <__divmodhi4_neg2>
    3b3e:	2e d0       	rcall	.+92     	; 0x3b9c <__udivmodhi4>
    3b40:	06 d0       	rcall	.+12     	; 0x3b4e <__divmodhi4_neg1>
    3b42:	00 20       	and	r0, r0
    3b44:	1a f4       	brpl	.+6      	; 0x3b4c <__divmodhi4_exit>

00003b46 <__divmodhi4_neg2>:
    3b46:	70 95       	com	r23
    3b48:	61 95       	neg	r22
    3b4a:	7f 4f       	sbci	r23, 0xFF	; 255

00003b4c <__divmodhi4_exit>:
    3b4c:	08 95       	ret

00003b4e <__divmodhi4_neg1>:
    3b4e:	f6 f7       	brtc	.-4      	; 0x3b4c <__divmodhi4_exit>
    3b50:	90 95       	com	r25
    3b52:	81 95       	neg	r24
    3b54:	9f 4f       	sbci	r25, 0xFF	; 255
    3b56:	08 95       	ret

00003b58 <__udivmodsi4>:
    3b58:	a1 e2       	ldi	r26, 0x21	; 33
    3b5a:	1a 2e       	mov	r1, r26
    3b5c:	aa 1b       	sub	r26, r26
    3b5e:	bb 1b       	sub	r27, r27
    3b60:	fd 01       	movw	r30, r26
    3b62:	0d c0       	rjmp	.+26     	; 0x3b7e <__udivmodsi4_ep>

00003b64 <__udivmodsi4_loop>:
    3b64:	aa 1f       	adc	r26, r26
    3b66:	bb 1f       	adc	r27, r27
    3b68:	ee 1f       	adc	r30, r30
    3b6a:	ff 1f       	adc	r31, r31
    3b6c:	a2 17       	cp	r26, r18
    3b6e:	b3 07       	cpc	r27, r19
    3b70:	e4 07       	cpc	r30, r20
    3b72:	f5 07       	cpc	r31, r21
    3b74:	20 f0       	brcs	.+8      	; 0x3b7e <__udivmodsi4_ep>
    3b76:	a2 1b       	sub	r26, r18
    3b78:	b3 0b       	sbc	r27, r19
    3b7a:	e4 0b       	sbc	r30, r20
    3b7c:	f5 0b       	sbc	r31, r21

00003b7e <__udivmodsi4_ep>:
    3b7e:	66 1f       	adc	r22, r22
    3b80:	77 1f       	adc	r23, r23
    3b82:	88 1f       	adc	r24, r24
    3b84:	99 1f       	adc	r25, r25
    3b86:	1a 94       	dec	r1
    3b88:	69 f7       	brne	.-38     	; 0x3b64 <__udivmodsi4_loop>
    3b8a:	60 95       	com	r22
    3b8c:	70 95       	com	r23
    3b8e:	80 95       	com	r24
    3b90:	90 95       	com	r25
    3b92:	9b 01       	movw	r18, r22
    3b94:	ac 01       	movw	r20, r24
    3b96:	bd 01       	movw	r22, r26
    3b98:	cf 01       	movw	r24, r30
    3b9a:	08 95       	ret

00003b9c <__udivmodhi4>:
    3b9c:	aa 1b       	sub	r26, r26
    3b9e:	bb 1b       	sub	r27, r27
    3ba0:	51 e1       	ldi	r21, 0x11	; 17
    3ba2:	07 c0       	rjmp	.+14     	; 0x3bb2 <__udivmodhi4_ep>

00003ba4 <__udivmodhi4_loop>:
    3ba4:	aa 1f       	adc	r26, r26
    3ba6:	bb 1f       	adc	r27, r27
    3ba8:	a6 17       	cp	r26, r22
    3baa:	b7 07       	cpc	r27, r23
    3bac:	10 f0       	brcs	.+4      	; 0x3bb2 <__udivmodhi4_ep>
    3bae:	a6 1b       	sub	r26, r22
    3bb0:	b7 0b       	sbc	r27, r23

00003bb2 <__udivmodhi4_ep>:
    3bb2:	88 1f       	adc	r24, r24
    3bb4:	99 1f       	adc	r25, r25
    3bb6:	5a 95       	dec	r21
    3bb8:	a9 f7       	brne	.-22     	; 0x3ba4 <__udivmodhi4_loop>
    3bba:	80 95       	com	r24
    3bbc:	90 95       	com	r25
    3bbe:	bc 01       	movw	r22, r24
    3bc0:	cd 01       	movw	r24, r26
    3bc2:	08 95       	ret

00003bc4 <do_rand>:
    3bc4:	8f 92       	push	r8
    3bc6:	9f 92       	push	r9
    3bc8:	af 92       	push	r10
    3bca:	bf 92       	push	r11
    3bcc:	cf 92       	push	r12
    3bce:	df 92       	push	r13
    3bd0:	ef 92       	push	r14
    3bd2:	ff 92       	push	r15
    3bd4:	cf 93       	push	r28
    3bd6:	df 93       	push	r29
    3bd8:	ec 01       	movw	r28, r24
    3bda:	88 81       	ld	r24, Y
    3bdc:	99 81       	ldd	r25, Y+1	; 0x01
    3bde:	aa 81       	ldd	r26, Y+2	; 0x02
    3be0:	bb 81       	ldd	r27, Y+3	; 0x03
    3be2:	00 97       	sbiw	r24, 0x00	; 0
    3be4:	a1 05       	cpc	r26, r1
    3be6:	b1 05       	cpc	r27, r1
    3be8:	21 f4       	brne	.+8      	; 0x3bf2 <do_rand+0x2e>
    3bea:	84 e2       	ldi	r24, 0x24	; 36
    3bec:	99 ed       	ldi	r25, 0xD9	; 217
    3bee:	ab e5       	ldi	r26, 0x5B	; 91
    3bf0:	b7 e0       	ldi	r27, 0x07	; 7
    3bf2:	bc 01       	movw	r22, r24
    3bf4:	cd 01       	movw	r24, r26
    3bf6:	2d e1       	ldi	r18, 0x1D	; 29
    3bf8:	33 ef       	ldi	r19, 0xF3	; 243
    3bfa:	41 e0       	ldi	r20, 0x01	; 1
    3bfc:	50 e0       	ldi	r21, 0x00	; 0
    3bfe:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__divmodsi4>
    3c02:	49 01       	movw	r8, r18
    3c04:	5a 01       	movw	r10, r20
    3c06:	27 ea       	ldi	r18, 0xA7	; 167
    3c08:	31 e4       	ldi	r19, 0x41	; 65
    3c0a:	40 e0       	ldi	r20, 0x00	; 0
    3c0c:	50 e0       	ldi	r21, 0x00	; 0
    3c0e:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__mulsi3>
    3c12:	6b 01       	movw	r12, r22
    3c14:	7c 01       	movw	r14, r24
    3c16:	c5 01       	movw	r24, r10
    3c18:	b4 01       	movw	r22, r8
    3c1a:	2c ee       	ldi	r18, 0xEC	; 236
    3c1c:	34 ef       	ldi	r19, 0xF4	; 244
    3c1e:	4f ef       	ldi	r20, 0xFF	; 255
    3c20:	5f ef       	ldi	r21, 0xFF	; 255
    3c22:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__mulsi3>
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22
    3c2a:	c8 0e       	add	r12, r24
    3c2c:	d9 1e       	adc	r13, r25
    3c2e:	ea 1e       	adc	r14, r26
    3c30:	fb 1e       	adc	r15, r27
    3c32:	f7 fe       	sbrs	r15, 7
    3c34:	08 c0       	rjmp	.+16     	; 0x3c46 <do_rand+0x82>
    3c36:	8f ef       	ldi	r24, 0xFF	; 255
    3c38:	9f ef       	ldi	r25, 0xFF	; 255
    3c3a:	af ef       	ldi	r26, 0xFF	; 255
    3c3c:	bf e7       	ldi	r27, 0x7F	; 127
    3c3e:	c8 0e       	add	r12, r24
    3c40:	d9 1e       	adc	r13, r25
    3c42:	ea 1e       	adc	r14, r26
    3c44:	fb 1e       	adc	r15, r27
    3c46:	c8 82       	st	Y, r12
    3c48:	d9 82       	std	Y+1, r13	; 0x01
    3c4a:	ea 82       	std	Y+2, r14	; 0x02
    3c4c:	fb 82       	std	Y+3, r15	; 0x03
    3c4e:	c6 01       	movw	r24, r12
    3c50:	9f 77       	andi	r25, 0x7F	; 127
    3c52:	df 91       	pop	r29
    3c54:	cf 91       	pop	r28
    3c56:	ff 90       	pop	r15
    3c58:	ef 90       	pop	r14
    3c5a:	df 90       	pop	r13
    3c5c:	cf 90       	pop	r12
    3c5e:	bf 90       	pop	r11
    3c60:	af 90       	pop	r10
    3c62:	9f 90       	pop	r9
    3c64:	8f 90       	pop	r8
    3c66:	08 95       	ret

00003c68 <rand_r>:
    3c68:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <do_rand>
    3c6c:	08 95       	ret

00003c6e <rand>:
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	92 e0       	ldi	r25, 0x02	; 2
    3c72:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <do_rand>
    3c76:	08 95       	ret

00003c78 <srand>:
    3c78:	a0 e0       	ldi	r26, 0x00	; 0
    3c7a:	b0 e0       	ldi	r27, 0x00	; 0
    3c7c:	80 93 00 02 	sts	0x0200, r24
    3c80:	90 93 01 02 	sts	0x0201, r25
    3c84:	a0 93 02 02 	sts	0x0202, r26
    3c88:	b0 93 03 02 	sts	0x0203, r27
    3c8c:	08 95       	ret

00003c8e <memcpy>:
    3c8e:	fb 01       	movw	r30, r22
    3c90:	dc 01       	movw	r26, r24
    3c92:	02 c0       	rjmp	.+4      	; 0x3c98 <memcpy+0xa>
    3c94:	01 90       	ld	r0, Z+
    3c96:	0d 92       	st	X+, r0
    3c98:	41 50       	subi	r20, 0x01	; 1
    3c9a:	50 40       	sbci	r21, 0x00	; 0
    3c9c:	d8 f7       	brcc	.-10     	; 0x3c94 <memcpy+0x6>
    3c9e:	08 95       	ret

00003ca0 <__eerd_word_m128rfa1>:
    3ca0:	a8 e1       	ldi	r26, 0x18	; 24
    3ca2:	b0 e0       	ldi	r27, 0x00	; 0
    3ca4:	42 e0       	ldi	r20, 0x02	; 2
    3ca6:	50 e0       	ldi	r21, 0x00	; 0
    3ca8:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__eerd_blraw_m128rfa1>

00003cac <__eewr_word_m128rfa1>:
    3cac:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__eewr_byte_m128rfa1>
    3cb0:	27 2f       	mov	r18, r23
    3cb2:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <__eewr_r18_m128rfa1>

00003cb6 <__eerd_block_m128rfa1>:
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	cb 01       	movw	r24, r22

00003cba <__eerd_blraw_m128rfa1>:
    3cba:	fc 01       	movw	r30, r24
    3cbc:	f9 99       	sbic	0x1f, 1	; 31
    3cbe:	fe cf       	rjmp	.-4      	; 0x3cbc <__eerd_blraw_m128rfa1+0x2>
    3cc0:	06 c0       	rjmp	.+12     	; 0x3cce <__eerd_blraw_m128rfa1+0x14>
    3cc2:	f2 bd       	out	0x22, r31	; 34
    3cc4:	e1 bd       	out	0x21, r30	; 33
    3cc6:	f8 9a       	sbi	0x1f, 0	; 31
    3cc8:	31 96       	adiw	r30, 0x01	; 1
    3cca:	00 b4       	in	r0, 0x20	; 32
    3ccc:	0d 92       	st	X+, r0
    3cce:	41 50       	subi	r20, 0x01	; 1
    3cd0:	50 40       	sbci	r21, 0x00	; 0
    3cd2:	b8 f7       	brcc	.-18     	; 0x3cc2 <__eerd_blraw_m128rfa1+0x8>
    3cd4:	08 95       	ret

00003cd6 <__eewr_byte_m128rfa1>:
    3cd6:	26 2f       	mov	r18, r22

00003cd8 <__eewr_r18_m128rfa1>:
    3cd8:	f9 99       	sbic	0x1f, 1	; 31
    3cda:	fe cf       	rjmp	.-4      	; 0x3cd8 <__eewr_r18_m128rfa1>
    3cdc:	1f ba       	out	0x1f, r1	; 31
    3cde:	92 bd       	out	0x22, r25	; 34
    3ce0:	81 bd       	out	0x21, r24	; 33
    3ce2:	20 bd       	out	0x20, r18	; 32
    3ce4:	0f b6       	in	r0, 0x3f	; 63
    3ce6:	f8 94       	cli
    3ce8:	fa 9a       	sbi	0x1f, 2	; 31
    3cea:	f9 9a       	sbi	0x1f, 1	; 31
    3cec:	0f be       	out	0x3f, r0	; 63
    3cee:	01 96       	adiw	r24, 0x01	; 1
    3cf0:	08 95       	ret

00003cf2 <__divmodsi4>:
    3cf2:	97 fb       	bst	r25, 7
    3cf4:	09 2e       	mov	r0, r25
    3cf6:	05 26       	eor	r0, r21
    3cf8:	0e d0       	rcall	.+28     	; 0x3d16 <__divmodsi4_neg1>
    3cfa:	57 fd       	sbrc	r21, 7
    3cfc:	04 d0       	rcall	.+8      	; 0x3d06 <__divmodsi4_neg2>
    3cfe:	2c df       	rcall	.-424    	; 0x3b58 <__udivmodsi4>
    3d00:	0a d0       	rcall	.+20     	; 0x3d16 <__divmodsi4_neg1>
    3d02:	00 1c       	adc	r0, r0
    3d04:	38 f4       	brcc	.+14     	; 0x3d14 <__divmodsi4_exit>

00003d06 <__divmodsi4_neg2>:
    3d06:	50 95       	com	r21
    3d08:	40 95       	com	r20
    3d0a:	30 95       	com	r19
    3d0c:	21 95       	neg	r18
    3d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d10:	4f 4f       	sbci	r20, 0xFF	; 255
    3d12:	5f 4f       	sbci	r21, 0xFF	; 255

00003d14 <__divmodsi4_exit>:
    3d14:	08 95       	ret

00003d16 <__divmodsi4_neg1>:
    3d16:	f6 f7       	brtc	.-4      	; 0x3d14 <__divmodsi4_exit>
    3d18:	90 95       	com	r25
    3d1a:	80 95       	com	r24
    3d1c:	70 95       	com	r23
    3d1e:	61 95       	neg	r22
    3d20:	7f 4f       	sbci	r23, 0xFF	; 255
    3d22:	8f 4f       	sbci	r24, 0xFF	; 255
    3d24:	9f 4f       	sbci	r25, 0xFF	; 255
    3d26:	08 95       	ret

00003d28 <_exit>:
    3d28:	f8 94       	cli

00003d2a <__stop_program>:
    3d2a:	ff cf       	rjmp	.-2      	; 0x3d2a <__stop_program>
